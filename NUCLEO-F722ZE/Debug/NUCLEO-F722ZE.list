
NUCLEO-F722ZE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5fc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  0800c7dc  0800c7dc  0001c7dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cdb0  0800cdb0  00020130  2**0
                  CONTENTS
  4 .ARM          00000008  0800cdb0  0800cdb0  0001cdb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cdb8  0800cdb8  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cdb8  0800cdb8  0001cdb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cdbc  0800cdbc  0001cdbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  0800cdc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000152c  20000130  0800cef0  00020130  2**2
                  ALLOC
 10 ._user_heap_stack 00018004  2000165c  0800cef0  0002165c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e867  00000000  00000000  000201a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005575  00000000  00000000  0003ea0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ab8  00000000  00000000  00043f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014ca  00000000  00000000  00045a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029521  00000000  00000000  00046f02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000242e1  00000000  00000000  00070423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f07fd  00000000  00000000  00094704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007788  00000000  00000000  00184f04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0018c68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000130 	.word	0x20000130
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c7c4 	.word	0x0800c7c4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000134 	.word	0x20000134
 800021c:	0800c7c4 	.word	0x0800c7c4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__aeabi_d2iz>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a94:	d215      	bcs.n	8000ac2 <__aeabi_d2iz+0x36>
 8000a96:	d511      	bpl.n	8000abc <__aeabi_d2iz+0x30>
 8000a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d912      	bls.n	8000ac8 <__aeabi_d2iz+0x3c>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ab2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	4240      	negne	r0, r0
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ac6:	d105      	bne.n	8000ad4 <__aeabi_d2iz+0x48>
 8000ac8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	bf08      	it	eq
 8000ace:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ad2:	4770      	bx	lr
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b970 	b.w	8000e74 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9e08      	ldr	r6, [sp, #32]
 8000bb2:	460d      	mov	r5, r1
 8000bb4:	4604      	mov	r4, r0
 8000bb6:	460f      	mov	r7, r1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d14a      	bne.n	8000c52 <__udivmoddi4+0xa6>
 8000bbc:	428a      	cmp	r2, r1
 8000bbe:	4694      	mov	ip, r2
 8000bc0:	d965      	bls.n	8000c8e <__udivmoddi4+0xe2>
 8000bc2:	fab2 f382 	clz	r3, r2
 8000bc6:	b143      	cbz	r3, 8000bda <__udivmoddi4+0x2e>
 8000bc8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bcc:	f1c3 0220 	rsb	r2, r3, #32
 8000bd0:	409f      	lsls	r7, r3
 8000bd2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bd6:	4317      	orrs	r7, r2
 8000bd8:	409c      	lsls	r4, r3
 8000bda:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bde:	fa1f f58c 	uxth.w	r5, ip
 8000be2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000be6:	0c22      	lsrs	r2, r4, #16
 8000be8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bf0:	fb01 f005 	mul.w	r0, r1, r5
 8000bf4:	4290      	cmp	r0, r2
 8000bf6:	d90a      	bls.n	8000c0e <__udivmoddi4+0x62>
 8000bf8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bfc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c00:	f080 811c 	bcs.w	8000e3c <__udivmoddi4+0x290>
 8000c04:	4290      	cmp	r0, r2
 8000c06:	f240 8119 	bls.w	8000e3c <__udivmoddi4+0x290>
 8000c0a:	3902      	subs	r1, #2
 8000c0c:	4462      	add	r2, ip
 8000c0e:	1a12      	subs	r2, r2, r0
 8000c10:	b2a4      	uxth	r4, r4
 8000c12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c1a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c1e:	fb00 f505 	mul.w	r5, r0, r5
 8000c22:	42a5      	cmp	r5, r4
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x90>
 8000c26:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c2e:	f080 8107 	bcs.w	8000e40 <__udivmoddi4+0x294>
 8000c32:	42a5      	cmp	r5, r4
 8000c34:	f240 8104 	bls.w	8000e40 <__udivmoddi4+0x294>
 8000c38:	4464      	add	r4, ip
 8000c3a:	3802      	subs	r0, #2
 8000c3c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c40:	1b64      	subs	r4, r4, r5
 8000c42:	2100      	movs	r1, #0
 8000c44:	b11e      	cbz	r6, 8000c4e <__udivmoddi4+0xa2>
 8000c46:	40dc      	lsrs	r4, r3
 8000c48:	2300      	movs	r3, #0
 8000c4a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0xbc>
 8000c56:	2e00      	cmp	r6, #0
 8000c58:	f000 80ed 	beq.w	8000e36 <__udivmoddi4+0x28a>
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c62:	4608      	mov	r0, r1
 8000c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c68:	fab3 f183 	clz	r1, r3
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	d149      	bne.n	8000d04 <__udivmoddi4+0x158>
 8000c70:	42ab      	cmp	r3, r5
 8000c72:	d302      	bcc.n	8000c7a <__udivmoddi4+0xce>
 8000c74:	4282      	cmp	r2, r0
 8000c76:	f200 80f8 	bhi.w	8000e6a <__udivmoddi4+0x2be>
 8000c7a:	1a84      	subs	r4, r0, r2
 8000c7c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c80:	2001      	movs	r0, #1
 8000c82:	4617      	mov	r7, r2
 8000c84:	2e00      	cmp	r6, #0
 8000c86:	d0e2      	beq.n	8000c4e <__udivmoddi4+0xa2>
 8000c88:	e9c6 4700 	strd	r4, r7, [r6]
 8000c8c:	e7df      	b.n	8000c4e <__udivmoddi4+0xa2>
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xe6>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f382 	clz	r3, r2
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f040 8090 	bne.w	8000dbc <__udivmoddi4+0x210>
 8000c9c:	1a8a      	subs	r2, r1, r2
 8000c9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca2:	fa1f fe8c 	uxth.w	lr, ip
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cac:	fb07 2015 	mls	r0, r7, r5, r2
 8000cb0:	0c22      	lsrs	r2, r4, #16
 8000cb2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cb6:	fb0e f005 	mul.w	r0, lr, r5
 8000cba:	4290      	cmp	r0, r2
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x124>
 8000cbe:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x122>
 8000cc8:	4290      	cmp	r0, r2
 8000cca:	f200 80cb 	bhi.w	8000e64 <__udivmoddi4+0x2b8>
 8000cce:	4645      	mov	r5, r8
 8000cd0:	1a12      	subs	r2, r2, r0
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cd8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cdc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ce0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce4:	45a6      	cmp	lr, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x14e>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf0:	d202      	bcs.n	8000cf8 <__udivmoddi4+0x14c>
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	f200 80bb 	bhi.w	8000e6e <__udivmoddi4+0x2c2>
 8000cf8:	4610      	mov	r0, r2
 8000cfa:	eba4 040e 	sub.w	r4, r4, lr
 8000cfe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d02:	e79f      	b.n	8000c44 <__udivmoddi4+0x98>
 8000d04:	f1c1 0720 	rsb	r7, r1, #32
 8000d08:	408b      	lsls	r3, r1
 8000d0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d12:	fa05 f401 	lsl.w	r4, r5, r1
 8000d16:	fa20 f307 	lsr.w	r3, r0, r7
 8000d1a:	40fd      	lsrs	r5, r7
 8000d1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d20:	4323      	orrs	r3, r4
 8000d22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d2e:	0c1c      	lsrs	r4, r3, #16
 8000d30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d34:	fb08 f50e 	mul.w	r5, r8, lr
 8000d38:	42a5      	cmp	r5, r4
 8000d3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d42:	d90b      	bls.n	8000d5c <__udivmoddi4+0x1b0>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d4c:	f080 8088 	bcs.w	8000e60 <__udivmoddi4+0x2b4>
 8000d50:	42a5      	cmp	r5, r4
 8000d52:	f240 8085 	bls.w	8000e60 <__udivmoddi4+0x2b4>
 8000d56:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5a:	4464      	add	r4, ip
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	b29d      	uxth	r5, r3
 8000d60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d64:	fb09 4413 	mls	r4, r9, r3, r4
 8000d68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x1da>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d7c:	d26c      	bcs.n	8000e58 <__udivmoddi4+0x2ac>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	d96a      	bls.n	8000e58 <__udivmoddi4+0x2ac>
 8000d82:	3b02      	subs	r3, #2
 8000d84:	4464      	add	r4, ip
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d8e:	eba4 040e 	sub.w	r4, r4, lr
 8000d92:	42ac      	cmp	r4, r5
 8000d94:	46c8      	mov	r8, r9
 8000d96:	46ae      	mov	lr, r5
 8000d98:	d356      	bcc.n	8000e48 <__udivmoddi4+0x29c>
 8000d9a:	d053      	beq.n	8000e44 <__udivmoddi4+0x298>
 8000d9c:	b156      	cbz	r6, 8000db4 <__udivmoddi4+0x208>
 8000d9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000da2:	eb64 040e 	sbc.w	r4, r4, lr
 8000da6:	fa04 f707 	lsl.w	r7, r4, r7
 8000daa:	40ca      	lsrs	r2, r1
 8000dac:	40cc      	lsrs	r4, r1
 8000dae:	4317      	orrs	r7, r2
 8000db0:	e9c6 7400 	strd	r7, r4, [r6]
 8000db4:	4618      	mov	r0, r3
 8000db6:	2100      	movs	r1, #0
 8000db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbc:	f1c3 0120 	rsb	r1, r3, #32
 8000dc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dc4:	fa20 f201 	lsr.w	r2, r0, r1
 8000dc8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dcc:	409d      	lsls	r5, r3
 8000dce:	432a      	orrs	r2, r5
 8000dd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd4:	fa1f fe8c 	uxth.w	lr, ip
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1510 	mls	r5, r7, r0, r1
 8000de0:	0c11      	lsrs	r1, r2, #16
 8000de2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000de6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dea:	428d      	cmp	r5, r1
 8000dec:	fa04 f403 	lsl.w	r4, r4, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x258>
 8000df2:	eb1c 0101 	adds.w	r1, ip, r1
 8000df6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dfa:	d22f      	bcs.n	8000e5c <__udivmoddi4+0x2b0>
 8000dfc:	428d      	cmp	r5, r1
 8000dfe:	d92d      	bls.n	8000e5c <__udivmoddi4+0x2b0>
 8000e00:	3802      	subs	r0, #2
 8000e02:	4461      	add	r1, ip
 8000e04:	1b49      	subs	r1, r1, r5
 8000e06:	b292      	uxth	r2, r2
 8000e08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e14:	fb05 f10e 	mul.w	r1, r5, lr
 8000e18:	4291      	cmp	r1, r2
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x282>
 8000e1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e20:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e24:	d216      	bcs.n	8000e54 <__udivmoddi4+0x2a8>
 8000e26:	4291      	cmp	r1, r2
 8000e28:	d914      	bls.n	8000e54 <__udivmoddi4+0x2a8>
 8000e2a:	3d02      	subs	r5, #2
 8000e2c:	4462      	add	r2, ip
 8000e2e:	1a52      	subs	r2, r2, r1
 8000e30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e34:	e738      	b.n	8000ca8 <__udivmoddi4+0xfc>
 8000e36:	4631      	mov	r1, r6
 8000e38:	4630      	mov	r0, r6
 8000e3a:	e708      	b.n	8000c4e <__udivmoddi4+0xa2>
 8000e3c:	4639      	mov	r1, r7
 8000e3e:	e6e6      	b.n	8000c0e <__udivmoddi4+0x62>
 8000e40:	4610      	mov	r0, r2
 8000e42:	e6fb      	b.n	8000c3c <__udivmoddi4+0x90>
 8000e44:	4548      	cmp	r0, r9
 8000e46:	d2a9      	bcs.n	8000d9c <__udivmoddi4+0x1f0>
 8000e48:	ebb9 0802 	subs.w	r8, r9, r2
 8000e4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e50:	3b01      	subs	r3, #1
 8000e52:	e7a3      	b.n	8000d9c <__udivmoddi4+0x1f0>
 8000e54:	4645      	mov	r5, r8
 8000e56:	e7ea      	b.n	8000e2e <__udivmoddi4+0x282>
 8000e58:	462b      	mov	r3, r5
 8000e5a:	e794      	b.n	8000d86 <__udivmoddi4+0x1da>
 8000e5c:	4640      	mov	r0, r8
 8000e5e:	e7d1      	b.n	8000e04 <__udivmoddi4+0x258>
 8000e60:	46d0      	mov	r8, sl
 8000e62:	e77b      	b.n	8000d5c <__udivmoddi4+0x1b0>
 8000e64:	3d02      	subs	r5, #2
 8000e66:	4462      	add	r2, ip
 8000e68:	e732      	b.n	8000cd0 <__udivmoddi4+0x124>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e70a      	b.n	8000c84 <__udivmoddi4+0xd8>
 8000e6e:	4464      	add	r4, ip
 8000e70:	3802      	subs	r0, #2
 8000e72:	e742      	b.n	8000cfa <__udivmoddi4+0x14e>

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <init_dht11>:
 */

#include "dht11.h"


void init_dht11(dht11_t *dht, TIM_HandleTypeDef *htim, GPIO_TypeDef* port, uint16_t pin){
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
 8000e84:	807b      	strh	r3, [r7, #2]
	dht->htim = htim;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	68ba      	ldr	r2, [r7, #8]
 8000e8a:	609a      	str	r2, [r3, #8]
	dht->port = port;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	601a      	str	r2, [r3, #0]
	dht->pin = pin;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	887a      	ldrh	r2, [r7, #2]
 8000e96:	809a      	strh	r2, [r3, #4]
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <set_dht11_gpio_mode>:


void set_dht11_gpio_mode(dht11_t *dht, uint8_t pMode)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 030c 	add.w	r3, r7, #12
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]

	if(pMode == OUTPUT)
 8000ec0:	78fb      	ldrb	r3, [r7, #3]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d111      	bne.n	8000eea <set_dht11_gpio_mode+0x46>
	{
	  GPIO_InitStruct.Pin = dht->pin;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	889b      	ldrh	r3, [r3, #4]
 8000eca:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f107 020c 	add.w	r2, r7, #12
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f003 fbba 	bl	800465c <HAL_GPIO_Init>
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
	}
}
 8000ee8:	e013      	b.n	8000f12 <set_dht11_gpio_mode+0x6e>
	}else if(pMode == INPUT)
 8000eea:	78fb      	ldrb	r3, [r7, #3]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d110      	bne.n	8000f12 <set_dht11_gpio_mode+0x6e>
	  GPIO_InitStruct.Pin = dht->pin;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	889b      	ldrh	r3, [r3, #4]
 8000ef4:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efe:	2303      	movs	r3, #3
 8000f00:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f107 020c 	add.w	r2, r7, #12
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f003 fba5 	bl	800465c <HAL_GPIO_Init>
}
 8000f12:	bf00      	nop
 8000f14:	3720      	adds	r7, #32
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <readDHT11>:


uint8_t readDHT11(dht11_t *dht)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b094      	sub	sp, #80	; 0x50
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
	uint16_t mTime1 = 0, mTime2 = 0, mBit = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	86fb      	strh	r3, [r7, #54]	; 0x36
 8000f26:	2300      	movs	r3, #0
 8000f28:	86bb      	strh	r3, [r7, #52]	; 0x34
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint8_t humVal = 0, tempVal = 0, parityVal = 0, genParity = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8000f36:	2300      	movs	r3, #0
 8000f38:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8000f42:	2300      	movs	r3, #0
 8000f44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t mData[40];

	//start comm
	set_dht11_gpio_mode(dht, OUTPUT);			//set pin direction as input
 8000f48:	2101      	movs	r1, #1
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff ffaa 	bl	8000ea4 <set_dht11_gpio_mode>
	HAL_GPIO_WritePin(dht->port, dht->pin, GPIO_PIN_RESET);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6818      	ldr	r0, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	889b      	ldrh	r3, [r3, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f003 fd32 	bl	80049c4 <HAL_GPIO_WritePin>
	HAL_Delay(18);					//wait 18 ms in Low state
 8000f60:	2012      	movs	r0, #18
 8000f62:	f002 faa3 	bl	80034ac <HAL_Delay>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f66:	b672      	cpsid	i
}
 8000f68:	bf00      	nop
	__disable_irq();	//disable all interupts to do only read dht otherwise miss timer
	HAL_TIM_Base_Start(dht->htim); //start timer
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f005 fc0a 	bl	8006788 <HAL_TIM_Base_Start>
	set_dht11_gpio_mode(dht, INPUT);
 8000f74:	2100      	movs	r1, #0
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff ff94 	bl	8000ea4 <set_dht11_gpio_mode>
	//check dht answer
	__HAL_TIM_SET_COUNTER(dht->htim, 0);				//set timer counter to zero
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2200      	movs	r2, #0
 8000f84:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8000f86:	e00b      	b.n	8000fa0 <readDHT11+0x86>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f96:	d903      	bls.n	8000fa0 <readDHT11+0x86>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f98:	b662      	cpsie	i
}
 8000f9a:	bf00      	nop
			__enable_irq();
			return 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e130      	b.n	8001202 <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	889b      	ldrh	r3, [r3, #4]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4610      	mov	r0, r2
 8000fac:	f003 fcf2 	bl	8004994 <HAL_GPIO_ReadPin>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d0e8      	beq.n	8000f88 <readDHT11+0x6e>
		}
	}
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8000fc0:	e00b      	b.n	8000fda <readDHT11+0xc0>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fd0:	d903      	bls.n	8000fda <readDHT11+0xc0>
  __ASM volatile ("cpsie i" : : : "memory");
 8000fd2:	b662      	cpsie	i
}
 8000fd4:	bf00      	nop
			__enable_irq();
			return 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e113      	b.n	8001202 <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	889b      	ldrh	r3, [r3, #4]
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	f003 fcd5 	bl	8004994 <HAL_GPIO_ReadPin>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d0e8      	beq.n	8000fc2 <readDHT11+0xa8>
		}
	}
	mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff8:	86fb      	strh	r3, [r7, #54]	; 0x36
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2200      	movs	r2, #0
 8001002:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8001004:	e00b      	b.n	800101e <readDHT11+0x104>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100e:	b29b      	uxth	r3, r3
 8001010:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001014:	d903      	bls.n	800101e <readDHT11+0x104>
  __ASM volatile ("cpsie i" : : : "memory");
 8001016:	b662      	cpsie	i
}
 8001018:	bf00      	nop
			__enable_irq();
			return 0;
 800101a:	2300      	movs	r3, #0
 800101c:	e0f1      	b.n	8001202 <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	889b      	ldrh	r3, [r3, #4]
 8001026:	4619      	mov	r1, r3
 8001028:	4610      	mov	r0, r2
 800102a:	f003 fcb3 	bl	8004994 <HAL_GPIO_ReadPin>
 800102e:	4603      	mov	r3, r0
 8001030:	2b01      	cmp	r3, #1
 8001032:	d0e8      	beq.n	8001006 <readDHT11+0xec>
		}
	}
	mTime2 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103c:	86bb      	strh	r3, [r7, #52]	; 0x34

	//if answer is wrong return
	if(mTime1 < 75 && mTime1 > 85 && mTime2 < 75 && mTime2 > 85)
 800103e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001040:	2b4a      	cmp	r3, #74	; 0x4a
 8001042:	d80c      	bhi.n	800105e <readDHT11+0x144>
 8001044:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001046:	2b55      	cmp	r3, #85	; 0x55
 8001048:	d909      	bls.n	800105e <readDHT11+0x144>
 800104a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800104c:	2b4a      	cmp	r3, #74	; 0x4a
 800104e:	d806      	bhi.n	800105e <readDHT11+0x144>
 8001050:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001052:	2b55      	cmp	r3, #85	; 0x55
 8001054:	d903      	bls.n	800105e <readDHT11+0x144>
  __ASM volatile ("cpsie i" : : : "memory");
 8001056:	b662      	cpsie	i
}
 8001058:	bf00      	nop
	{
		__enable_irq();
		return 0;
 800105a:	2300      	movs	r3, #0
 800105c:	e0d1      	b.n	8001202 <readDHT11+0x2e8>
	}

    //HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	for(int j = 0; j < 40; j++)
 800105e:	2300      	movs	r3, #0
 8001060:	647b      	str	r3, [r7, #68]	; 0x44
 8001062:	e05d      	b.n	8001120 <readDHT11+0x206>
	{
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2200      	movs	r2, #0
 800106c:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 800106e:	e00b      	b.n	8001088 <readDHT11+0x16e>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001078:	b29b      	uxth	r3, r3
 800107a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800107e:	d903      	bls.n	8001088 <readDHT11+0x16e>
  __ASM volatile ("cpsie i" : : : "memory");
 8001080:	b662      	cpsie	i
}
 8001082:	bf00      	nop
				__enable_irq();
				return 0;
 8001084:	2300      	movs	r3, #0
 8001086:	e0bc      	b.n	8001202 <readDHT11+0x2e8>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	889b      	ldrh	r3, [r3, #4]
 8001090:	4619      	mov	r1, r3
 8001092:	4610      	mov	r0, r2
 8001094:	f003 fc7e 	bl	8004994 <HAL_GPIO_ReadPin>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d0e8      	beq.n	8001070 <readDHT11+0x156>
			}

		}
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2200      	movs	r2, #0
 80010a6:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 80010a8:	e00b      	b.n	80010c2 <readDHT11+0x1a8>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010b8:	d903      	bls.n	80010c2 <readDHT11+0x1a8>
  __ASM volatile ("cpsie i" : : : "memory");
 80010ba:	b662      	cpsie	i
}
 80010bc:	bf00      	nop
				__enable_irq();
				return 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	e09f      	b.n	8001202 <readDHT11+0x2e8>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	889b      	ldrh	r3, [r3, #4]
 80010ca:	4619      	mov	r1, r3
 80010cc:	4610      	mov	r0, r2
 80010ce:	f003 fc61 	bl	8004994 <HAL_GPIO_ReadPin>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d0e8      	beq.n	80010aa <readDHT11+0x190>
			}

		}
		mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e0:	86fb      	strh	r3, [r7, #54]	; 0x36

		//check pass time in high state
		//if pass time 25uS set as LOW
		if(mTime1 > 20 && mTime1 < 30)
 80010e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80010e4:	2b14      	cmp	r3, #20
 80010e6:	d906      	bls.n	80010f6 <readDHT11+0x1dc>
 80010e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80010ea:	2b1d      	cmp	r3, #29
 80010ec:	d803      	bhi.n	80010f6 <readDHT11+0x1dc>
		{
			mBit = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80010f4:	e008      	b.n	8001108 <readDHT11+0x1ee>
		}
		else if(mTime1 > 60 && mTime1 < 80) //if pass time 70 uS set as HIGH
 80010f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80010f8:	2b3c      	cmp	r3, #60	; 0x3c
 80010fa:	d905      	bls.n	8001108 <readDHT11+0x1ee>
 80010fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80010fe:	2b4f      	cmp	r3, #79	; 0x4f
 8001100:	d802      	bhi.n	8001108 <readDHT11+0x1ee>
		{
			 mBit = 1;
 8001102:	2301      	movs	r3, #1
 8001104:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		}

		//set i th data in data buffer
		mData[j] = mBit;
 8001108:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800110c:	b2d9      	uxtb	r1, r3
 800110e:	f107 0208 	add.w	r2, r7, #8
 8001112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001114:	4413      	add	r3, r2
 8001116:	460a      	mov	r2, r1
 8001118:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < 40; j++)
 800111a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800111c:	3301      	adds	r3, #1
 800111e:	647b      	str	r3, [r7, #68]	; 0x44
 8001120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001122:	2b27      	cmp	r3, #39	; 0x27
 8001124:	dd9e      	ble.n	8001064 <readDHT11+0x14a>

	}

	HAL_TIM_Base_Stop(dht->htim); //stop timer
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	4618      	mov	r0, r3
 800112c:	f005 fb9c 	bl	8006868 <HAL_TIM_Base_Stop>
  __ASM volatile ("cpsie i" : : : "memory");
 8001130:	b662      	cpsie	i
}
 8001132:	bf00      	nop
	__enable_irq(); //enable all interrupts

	//get hum value from data buffer
	for(int i = 0; i < 8; i++)
 8001134:	2300      	movs	r3, #0
 8001136:	643b      	str	r3, [r7, #64]	; 0x40
 8001138:	e011      	b.n	800115e <readDHT11+0x244>
	{
		humVal += mData[i];
 800113a:	f107 0208 	add.w	r2, r7, #8
 800113e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001140:	4413      	add	r3, r2
 8001142:	781a      	ldrb	r2, [r3, #0]
 8001144:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001148:	4413      	add	r3, r2
 800114a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		humVal = humVal << 1;
 800114e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	for(int i = 0; i < 8; i++)
 8001158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800115a:	3301      	adds	r3, #1
 800115c:	643b      	str	r3, [r7, #64]	; 0x40
 800115e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001160:	2b07      	cmp	r3, #7
 8001162:	ddea      	ble.n	800113a <readDHT11+0x220>
	}

	//get temp value from data buffer
	for(int i = 16; i < 24; i++)
 8001164:	2310      	movs	r3, #16
 8001166:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001168:	e011      	b.n	800118e <readDHT11+0x274>
	{
		tempVal += mData[i];
 800116a:	f107 0208 	add.w	r2, r7, #8
 800116e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001170:	4413      	add	r3, r2
 8001172:	781a      	ldrb	r2, [r3, #0]
 8001174:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001178:	4413      	add	r3, r2
 800117a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		tempVal = tempVal << 1;
 800117e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	for(int i = 16; i < 24; i++)
 8001188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800118a:	3301      	adds	r3, #1
 800118c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800118e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001190:	2b17      	cmp	r3, #23
 8001192:	ddea      	ble.n	800116a <readDHT11+0x250>
	}

	//get parity value from data buffer
	for(int i = 32; i < 40; i++)
 8001194:	2320      	movs	r3, #32
 8001196:	63bb      	str	r3, [r7, #56]	; 0x38
 8001198:	e011      	b.n	80011be <readDHT11+0x2a4>
	{
		parityVal += mData[i];
 800119a:	f107 0208 	add.w	r2, r7, #8
 800119e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011a0:	4413      	add	r3, r2
 80011a2:	781a      	ldrb	r2, [r3, #0]
 80011a4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80011a8:	4413      	add	r3, r2
 80011aa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		parityVal = parityVal << 1;
 80011ae:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for(int i = 32; i < 40; i++)
 80011b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011ba:	3301      	adds	r3, #1
 80011bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80011be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011c0:	2b27      	cmp	r3, #39	; 0x27
 80011c2:	ddea      	ble.n	800119a <readDHT11+0x280>
	}

	parityVal = parityVal >> 1;
 80011c4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80011c8:	085b      	lsrs	r3, r3, #1
 80011ca:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	humVal = humVal >> 1;
 80011ce:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80011d2:	085b      	lsrs	r3, r3, #1
 80011d4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	tempVal = tempVal >> 1;
 80011d8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80011dc:	085b      	lsrs	r3, r3, #1
 80011de:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

	genParity = humVal + tempVal;
 80011e2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80011e6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80011ea:	4413      	add	r3, r2
 80011ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    //if(genParity == parityVal)

	dht->temperature = tempVal;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80011f6:	731a      	strb	r2, [r3, #12]
	dht->humidity = humVal;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80011fe:	735a      	strb	r2, [r3, #13]


	return 1;
 8001200:	2301      	movs	r3, #1
}
 8001202:	4618      	mov	r0, r3
 8001204:	3750      	adds	r7, #80	; 0x50
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001210:	2200      	movs	r2, #0
 8001212:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001216:	4804      	ldr	r0, [pc, #16]	; (8001228 <SELECT+0x1c>)
 8001218:	f003 fbd4 	bl	80049c4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800121c:	2001      	movs	r0, #1
 800121e:	f002 f945 	bl	80034ac <HAL_Delay>
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40020000 	.word	0x40020000

0800122c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001230:	2201      	movs	r2, #1
 8001232:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001236:	4804      	ldr	r0, [pc, #16]	; (8001248 <DESELECT+0x1c>)
 8001238:	f003 fbc4 	bl	80049c4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800123c:	2001      	movs	r0, #1
 800123e:	f002 f935 	bl	80034ac <HAL_Delay>
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40020000 	.word	0x40020000

0800124c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001256:	bf00      	nop
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <SPI_TxByte+0x30>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b02      	cmp	r3, #2
 8001264:	d1f8      	bne.n	8001258 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001266:	1df9      	adds	r1, r7, #7
 8001268:	2364      	movs	r3, #100	; 0x64
 800126a:	2201      	movs	r2, #1
 800126c:	4803      	ldr	r0, [pc, #12]	; (800127c <SPI_TxByte+0x30>)
 800126e:	f004 fce2 	bl	8005c36 <HAL_SPI_Transmit>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200001fc 	.word	0x200001fc

08001280 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800128c:	bf00      	nop
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <SPI_TxBuffer+0x30>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b02      	cmp	r3, #2
 800129a:	d1f8      	bne.n	800128e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800129c:	887a      	ldrh	r2, [r7, #2]
 800129e:	2364      	movs	r3, #100	; 0x64
 80012a0:	6879      	ldr	r1, [r7, #4]
 80012a2:	4803      	ldr	r0, [pc, #12]	; (80012b0 <SPI_TxBuffer+0x30>)
 80012a4:	f004 fcc7 	bl	8005c36 <HAL_SPI_Transmit>
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	200001fc 	.word	0x200001fc

080012b4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80012ba:	23ff      	movs	r3, #255	; 0xff
 80012bc:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80012be:	bf00      	nop
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <SPI_RxByte+0x34>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d1f8      	bne.n	80012c0 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80012ce:	1dba      	adds	r2, r7, #6
 80012d0:	1df9      	adds	r1, r7, #7
 80012d2:	2364      	movs	r3, #100	; 0x64
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2301      	movs	r3, #1
 80012d8:	4803      	ldr	r0, [pc, #12]	; (80012e8 <SPI_RxByte+0x34>)
 80012da:	f004 fe1a 	bl	8005f12 <HAL_SPI_TransmitReceive>

	return data;
 80012de:	79bb      	ldrb	r3, [r7, #6]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200001fc 	.word	0x200001fc

080012ec <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80012f4:	f7ff ffde 	bl	80012b4 <SPI_RxByte>
 80012f8:	4603      	mov	r3, r0
 80012fa:	461a      	mov	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	701a      	strb	r2, [r3, #0]
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800130e:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <SD_ReadyWait+0x30>)
 8001310:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001314:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001316:	f7ff ffcd 	bl	80012b4 <SPI_RxByte>
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	2bff      	cmp	r3, #255	; 0xff
 8001322:	d003      	beq.n	800132c <SD_ReadyWait+0x24>
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <SD_ReadyWait+0x30>)
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f4      	bne.n	8001316 <SD_ReadyWait+0xe>

	return res;
 800132c:	79fb      	ldrb	r3, [r7, #7]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	2000014e 	.word	0x2000014e

0800133c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001342:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001346:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001348:	f7ff ff70 	bl	800122c <DESELECT>
	for(int i = 0; i < 10; i++)
 800134c:	2300      	movs	r3, #0
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	e005      	b.n	800135e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001352:	20ff      	movs	r0, #255	; 0xff
 8001354:	f7ff ff7a 	bl	800124c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	3301      	adds	r3, #1
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	2b09      	cmp	r3, #9
 8001362:	ddf6      	ble.n	8001352 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001364:	f7ff ff52 	bl	800120c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001368:	2340      	movs	r3, #64	; 0x40
 800136a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800137c:	2395      	movs	r3, #149	; 0x95
 800137e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001380:	463b      	mov	r3, r7
 8001382:	2106      	movs	r1, #6
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff7b 	bl	8001280 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800138a:	e002      	b.n	8001392 <SD_PowerOn+0x56>
	{
		cnt--;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	3b01      	subs	r3, #1
 8001390:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001392:	f7ff ff8f 	bl	80012b4 <SPI_RxByte>
 8001396:	4603      	mov	r3, r0
 8001398:	2b01      	cmp	r3, #1
 800139a:	d002      	beq.n	80013a2 <SD_PowerOn+0x66>
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1f4      	bne.n	800138c <SD_PowerOn+0x50>
	}

	DESELECT();
 80013a2:	f7ff ff43 	bl	800122c <DESELECT>
	SPI_TxByte(0XFF);
 80013a6:	20ff      	movs	r0, #255	; 0xff
 80013a8:	f7ff ff50 	bl	800124c <SPI_TxByte>

	PowerFlag = 1;
 80013ac:	4b03      	ldr	r3, [pc, #12]	; (80013bc <SD_PowerOn+0x80>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	701a      	strb	r2, [r3, #0]
}
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000151 	.word	0x20000151

080013c0 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80013c4:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <SD_PowerOff+0x14>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	20000151 	.word	0x20000151

080013d8 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
	return PowerFlag;
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <SD_CheckPower+0x14>)
 80013de:	781b      	ldrb	r3, [r3, #0]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	20000151 	.word	0x20000151

080013f0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80013fa:	4b13      	ldr	r3, [pc, #76]	; (8001448 <SD_RxDataBlock+0x58>)
 80013fc:	22c8      	movs	r2, #200	; 0xc8
 80013fe:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001400:	f7ff ff58 	bl	80012b4 <SPI_RxByte>
 8001404:	4603      	mov	r3, r0
 8001406:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	2bff      	cmp	r3, #255	; 0xff
 800140c:	d103      	bne.n	8001416 <SD_RxDataBlock+0x26>
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <SD_RxDataBlock+0x58>)
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f4      	bne.n	8001400 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	2bfe      	cmp	r3, #254	; 0xfe
 800141a:	d001      	beq.n	8001420 <SD_RxDataBlock+0x30>
 800141c:	2300      	movs	r3, #0
 800141e:	e00f      	b.n	8001440 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	607a      	str	r2, [r7, #4]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ff60 	bl	80012ec <SPI_RxBytePtr>
	} while(len--);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	1e5a      	subs	r2, r3, #1
 8001430:	603a      	str	r2, [r7, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f4      	bne.n	8001420 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8001436:	f7ff ff3d 	bl	80012b4 <SPI_RxByte>
	SPI_RxByte();
 800143a:	f7ff ff3b 	bl	80012b4 <SPI_RxByte>

	return TRUE;
 800143e:	2301      	movs	r3, #1
}
 8001440:	4618      	mov	r0, r3
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	2000014c 	.word	0x2000014c

0800144c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800145c:	f7ff ff54 	bl	8001308 <SD_ReadyWait>
 8001460:	4603      	mov	r3, r0
 8001462:	2bff      	cmp	r3, #255	; 0xff
 8001464:	d001      	beq.n	800146a <SD_TxDataBlock+0x1e>
 8001466:	2300      	movs	r3, #0
 8001468:	e02f      	b.n	80014ca <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800146a:	78fb      	ldrb	r3, [r7, #3]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff feed 	bl	800124c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001472:	78fb      	ldrb	r3, [r7, #3]
 8001474:	2bfd      	cmp	r3, #253	; 0xfd
 8001476:	d020      	beq.n	80014ba <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001478:	f44f 7100 	mov.w	r1, #512	; 0x200
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff feff 	bl	8001280 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001482:	f7ff ff17 	bl	80012b4 <SPI_RxByte>
		SPI_RxByte();
 8001486:	f7ff ff15 	bl	80012b4 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800148a:	e00b      	b.n	80014a4 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800148c:	f7ff ff12 	bl	80012b4 <SPI_RxByte>
 8001490:	4603      	mov	r3, r0
 8001492:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	f003 031f 	and.w	r3, r3, #31
 800149a:	2b05      	cmp	r3, #5
 800149c:	d006      	beq.n	80014ac <SD_TxDataBlock+0x60>
			i++;
 800149e:	7bbb      	ldrb	r3, [r7, #14]
 80014a0:	3301      	adds	r3, #1
 80014a2:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80014a4:	7bbb      	ldrb	r3, [r7, #14]
 80014a6:	2b40      	cmp	r3, #64	; 0x40
 80014a8:	d9f0      	bls.n	800148c <SD_TxDataBlock+0x40>
 80014aa:	e000      	b.n	80014ae <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80014ac:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80014ae:	bf00      	nop
 80014b0:	f7ff ff00 	bl	80012b4 <SPI_RxByte>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0fa      	beq.n	80014b0 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	f003 031f 	and.w	r3, r3, #31
 80014c0:	2b05      	cmp	r3, #5
 80014c2:	d101      	bne.n	80014c8 <SD_TxDataBlock+0x7c>
 80014c4:	2301      	movs	r3, #1
 80014c6:	e000      	b.n	80014ca <SD_TxDataBlock+0x7e>

	return FALSE;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b084      	sub	sp, #16
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	6039      	str	r1, [r7, #0]
 80014dc:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80014de:	f7ff ff13 	bl	8001308 <SD_ReadyWait>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2bff      	cmp	r3, #255	; 0xff
 80014e6:	d001      	beq.n	80014ec <SD_SendCmd+0x1a>
 80014e8:	23ff      	movs	r3, #255	; 0xff
 80014ea:	e042      	b.n	8001572 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff feac 	bl	800124c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	0e1b      	lsrs	r3, r3, #24
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fea6 	bl	800124c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	0c1b      	lsrs	r3, r3, #16
 8001504:	b2db      	uxtb	r3, r3
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fea0 	bl	800124c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	0a1b      	lsrs	r3, r3, #8
 8001510:	b2db      	uxtb	r3, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fe9a 	bl	800124c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fe95 	bl	800124c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	2b40      	cmp	r3, #64	; 0x40
 8001526:	d102      	bne.n	800152e <SD_SendCmd+0x5c>
 8001528:	2395      	movs	r3, #149	; 0x95
 800152a:	73fb      	strb	r3, [r7, #15]
 800152c:	e007      	b.n	800153e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	2b48      	cmp	r3, #72	; 0x48
 8001532:	d102      	bne.n	800153a <SD_SendCmd+0x68>
 8001534:	2387      	movs	r3, #135	; 0x87
 8001536:	73fb      	strb	r3, [r7, #15]
 8001538:	e001      	b.n	800153e <SD_SendCmd+0x6c>
	else crc = 1;
 800153a:	2301      	movs	r3, #1
 800153c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fe83 	bl	800124c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	2b4c      	cmp	r3, #76	; 0x4c
 800154a:	d101      	bne.n	8001550 <SD_SendCmd+0x7e>
 800154c:	f7ff feb2 	bl	80012b4 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001550:	230a      	movs	r3, #10
 8001552:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001554:	f7ff feae 	bl	80012b4 <SPI_RxByte>
 8001558:	4603      	mov	r3, r0
 800155a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800155c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001560:	2b00      	cmp	r3, #0
 8001562:	da05      	bge.n	8001570 <SD_SendCmd+0x9e>
 8001564:	7bbb      	ldrb	r3, [r7, #14]
 8001566:	3b01      	subs	r3, #1
 8001568:	73bb      	strb	r3, [r7, #14]
 800156a:	7bbb      	ldrb	r3, [r7, #14]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1f1      	bne.n	8001554 <SD_SendCmd+0x82>

	return res;
 8001570:	7b7b      	ldrb	r3, [r7, #13]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800157c:	b590      	push	{r4, r7, lr}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <SD_disk_initialize+0x14>
 800158c:	2301      	movs	r3, #1
 800158e:	e0d1      	b.n	8001734 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001590:	4b6a      	ldr	r3, [pc, #424]	; (800173c <SD_disk_initialize+0x1c0>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <SD_disk_initialize+0x2a>
 800159e:	4b67      	ldr	r3, [pc, #412]	; (800173c <SD_disk_initialize+0x1c0>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	e0c6      	b.n	8001734 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80015a6:	f7ff fec9 	bl	800133c <SD_PowerOn>

	/* slave select */
	SELECT();
 80015aa:	f7ff fe2f 	bl	800120c <SELECT>

	/* check disk type */
	type = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80015b2:	2100      	movs	r1, #0
 80015b4:	2040      	movs	r0, #64	; 0x40
 80015b6:	f7ff ff8c 	bl	80014d2 <SD_SendCmd>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b01      	cmp	r3, #1
 80015be:	f040 80a1 	bne.w	8001704 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80015c2:	4b5f      	ldr	r3, [pc, #380]	; (8001740 <SD_disk_initialize+0x1c4>)
 80015c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015c8:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80015ca:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80015ce:	2048      	movs	r0, #72	; 0x48
 80015d0:	f7ff ff7f 	bl	80014d2 <SD_SendCmd>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d155      	bne.n	8001686 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80015da:	2300      	movs	r3, #0
 80015dc:	73fb      	strb	r3, [r7, #15]
 80015de:	e00c      	b.n	80015fa <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80015e0:	7bfc      	ldrb	r4, [r7, #15]
 80015e2:	f7ff fe67 	bl	80012b4 <SPI_RxByte>
 80015e6:	4603      	mov	r3, r0
 80015e8:	461a      	mov	r2, r3
 80015ea:	f104 0310 	add.w	r3, r4, #16
 80015ee:	443b      	add	r3, r7
 80015f0:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	3301      	adds	r3, #1
 80015f8:	73fb      	strb	r3, [r7, #15]
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	2b03      	cmp	r3, #3
 80015fe:	d9ef      	bls.n	80015e0 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001600:	7abb      	ldrb	r3, [r7, #10]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d17e      	bne.n	8001704 <SD_disk_initialize+0x188>
 8001606:	7afb      	ldrb	r3, [r7, #11]
 8001608:	2baa      	cmp	r3, #170	; 0xaa
 800160a:	d17b      	bne.n	8001704 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800160c:	2100      	movs	r1, #0
 800160e:	2077      	movs	r0, #119	; 0x77
 8001610:	f7ff ff5f 	bl	80014d2 <SD_SendCmd>
 8001614:	4603      	mov	r3, r0
 8001616:	2b01      	cmp	r3, #1
 8001618:	d807      	bhi.n	800162a <SD_disk_initialize+0xae>
 800161a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800161e:	2069      	movs	r0, #105	; 0x69
 8001620:	f7ff ff57 	bl	80014d2 <SD_SendCmd>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d004      	beq.n	8001634 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800162a:	4b45      	ldr	r3, [pc, #276]	; (8001740 <SD_disk_initialize+0x1c4>)
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1ec      	bne.n	800160c <SD_disk_initialize+0x90>
 8001632:	e000      	b.n	8001636 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001634:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001636:	4b42      	ldr	r3, [pc, #264]	; (8001740 <SD_disk_initialize+0x1c4>)
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d062      	beq.n	8001704 <SD_disk_initialize+0x188>
 800163e:	2100      	movs	r1, #0
 8001640:	207a      	movs	r0, #122	; 0x7a
 8001642:	f7ff ff46 	bl	80014d2 <SD_SendCmd>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d15b      	bne.n	8001704 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800164c:	2300      	movs	r3, #0
 800164e:	73fb      	strb	r3, [r7, #15]
 8001650:	e00c      	b.n	800166c <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001652:	7bfc      	ldrb	r4, [r7, #15]
 8001654:	f7ff fe2e 	bl	80012b4 <SPI_RxByte>
 8001658:	4603      	mov	r3, r0
 800165a:	461a      	mov	r2, r3
 800165c:	f104 0310 	add.w	r3, r4, #16
 8001660:	443b      	add	r3, r7
 8001662:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001666:	7bfb      	ldrb	r3, [r7, #15]
 8001668:	3301      	adds	r3, #1
 800166a:	73fb      	strb	r3, [r7, #15]
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	2b03      	cmp	r3, #3
 8001670:	d9ef      	bls.n	8001652 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001672:	7a3b      	ldrb	r3, [r7, #8]
 8001674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <SD_disk_initialize+0x104>
 800167c:	230c      	movs	r3, #12
 800167e:	e000      	b.n	8001682 <SD_disk_initialize+0x106>
 8001680:	2304      	movs	r3, #4
 8001682:	73bb      	strb	r3, [r7, #14]
 8001684:	e03e      	b.n	8001704 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001686:	2100      	movs	r1, #0
 8001688:	2077      	movs	r0, #119	; 0x77
 800168a:	f7ff ff22 	bl	80014d2 <SD_SendCmd>
 800168e:	4603      	mov	r3, r0
 8001690:	2b01      	cmp	r3, #1
 8001692:	d808      	bhi.n	80016a6 <SD_disk_initialize+0x12a>
 8001694:	2100      	movs	r1, #0
 8001696:	2069      	movs	r0, #105	; 0x69
 8001698:	f7ff ff1b 	bl	80014d2 <SD_SendCmd>
 800169c:	4603      	mov	r3, r0
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d801      	bhi.n	80016a6 <SD_disk_initialize+0x12a>
 80016a2:	2302      	movs	r3, #2
 80016a4:	e000      	b.n	80016a8 <SD_disk_initialize+0x12c>
 80016a6:	2301      	movs	r3, #1
 80016a8:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80016aa:	7bbb      	ldrb	r3, [r7, #14]
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d10e      	bne.n	80016ce <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80016b0:	2100      	movs	r1, #0
 80016b2:	2077      	movs	r0, #119	; 0x77
 80016b4:	f7ff ff0d 	bl	80014d2 <SD_SendCmd>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d80e      	bhi.n	80016dc <SD_disk_initialize+0x160>
 80016be:	2100      	movs	r1, #0
 80016c0:	2069      	movs	r0, #105	; 0x69
 80016c2:	f7ff ff06 	bl	80014d2 <SD_SendCmd>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d107      	bne.n	80016dc <SD_disk_initialize+0x160>
 80016cc:	e00c      	b.n	80016e8 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80016ce:	2100      	movs	r1, #0
 80016d0:	2041      	movs	r0, #65	; 0x41
 80016d2:	f7ff fefe 	bl	80014d2 <SD_SendCmd>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d004      	beq.n	80016e6 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80016dc:	4b18      	ldr	r3, [pc, #96]	; (8001740 <SD_disk_initialize+0x1c4>)
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1e2      	bne.n	80016aa <SD_disk_initialize+0x12e>
 80016e4:	e000      	b.n	80016e8 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80016e6:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80016e8:	4b15      	ldr	r3, [pc, #84]	; (8001740 <SD_disk_initialize+0x1c4>)
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d007      	beq.n	8001700 <SD_disk_initialize+0x184>
 80016f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016f4:	2050      	movs	r0, #80	; 0x50
 80016f6:	f7ff feec 	bl	80014d2 <SD_SendCmd>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <SD_disk_initialize+0x188>
 8001700:	2300      	movs	r3, #0
 8001702:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001704:	4a0f      	ldr	r2, [pc, #60]	; (8001744 <SD_disk_initialize+0x1c8>)
 8001706:	7bbb      	ldrb	r3, [r7, #14]
 8001708:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800170a:	f7ff fd8f 	bl	800122c <DESELECT>
	SPI_RxByte();
 800170e:	f7ff fdd1 	bl	80012b4 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001712:	7bbb      	ldrb	r3, [r7, #14]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d008      	beq.n	800172a <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <SD_disk_initialize+0x1c0>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	b2db      	uxtb	r3, r3
 800171e:	f023 0301 	bic.w	r3, r3, #1
 8001722:	b2da      	uxtb	r2, r3
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <SD_disk_initialize+0x1c0>)
 8001726:	701a      	strb	r2, [r3, #0]
 8001728:	e001      	b.n	800172e <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800172a:	f7ff fe49 	bl	80013c0 <SD_PowerOff>
	}

	return Stat;
 800172e:	4b03      	ldr	r3, [pc, #12]	; (800173c <SD_disk_initialize+0x1c0>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	b2db      	uxtb	r3, r3
}
 8001734:	4618      	mov	r0, r3
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	bd90      	pop	{r4, r7, pc}
 800173c:	20000000 	.word	0x20000000
 8001740:	2000014c 	.word	0x2000014c
 8001744:	20000150 	.word	0x20000150

08001748 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <SD_disk_status+0x14>
 8001758:	2301      	movs	r3, #1
 800175a:	e002      	b.n	8001762 <SD_disk_status+0x1a>
	return Stat;
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <SD_disk_status+0x28>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	b2db      	uxtb	r3, r3
}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000000 	.word	0x20000000

08001774 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	4603      	mov	r3, r0
 8001782:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d102      	bne.n	8001790 <SD_disk_read+0x1c>
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d101      	bne.n	8001794 <SD_disk_read+0x20>
 8001790:	2304      	movs	r3, #4
 8001792:	e051      	b.n	8001838 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001794:	4b2a      	ldr	r3, [pc, #168]	; (8001840 <SD_disk_read+0xcc>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <SD_disk_read+0x32>
 80017a2:	2303      	movs	r3, #3
 80017a4:	e048      	b.n	8001838 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80017a6:	4b27      	ldr	r3, [pc, #156]	; (8001844 <SD_disk_read+0xd0>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d102      	bne.n	80017b8 <SD_disk_read+0x44>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	025b      	lsls	r3, r3, #9
 80017b6:	607b      	str	r3, [r7, #4]

	SELECT();
 80017b8:	f7ff fd28 	bl	800120c <SELECT>

	if (count == 1)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d111      	bne.n	80017e6 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	2051      	movs	r0, #81	; 0x51
 80017c6:	f7ff fe84 	bl	80014d2 <SD_SendCmd>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d129      	bne.n	8001824 <SD_disk_read+0xb0>
 80017d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017d4:	68b8      	ldr	r0, [r7, #8]
 80017d6:	f7ff fe0b 	bl	80013f0 <SD_RxDataBlock>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d021      	beq.n	8001824 <SD_disk_read+0xb0>
 80017e0:	2300      	movs	r3, #0
 80017e2:	603b      	str	r3, [r7, #0]
 80017e4:	e01e      	b.n	8001824 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	2052      	movs	r0, #82	; 0x52
 80017ea:	f7ff fe72 	bl	80014d2 <SD_SendCmd>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d117      	bne.n	8001824 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80017f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017f8:	68b8      	ldr	r0, [r7, #8]
 80017fa:	f7ff fdf9 	bl	80013f0 <SD_RxDataBlock>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00a      	beq.n	800181a <SD_disk_read+0xa6>
				buff += 512;
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800180a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	3b01      	subs	r3, #1
 8001810:	603b      	str	r3, [r7, #0]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1ed      	bne.n	80017f4 <SD_disk_read+0x80>
 8001818:	e000      	b.n	800181c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800181a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800181c:	2100      	movs	r1, #0
 800181e:	204c      	movs	r0, #76	; 0x4c
 8001820:	f7ff fe57 	bl	80014d2 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001824:	f7ff fd02 	bl	800122c <DESELECT>
	SPI_RxByte();
 8001828:	f7ff fd44 	bl	80012b4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	bf14      	ite	ne
 8001832:	2301      	movne	r3, #1
 8001834:	2300      	moveq	r3, #0
 8001836:	b2db      	uxtb	r3, r3
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000000 	.word	0x20000000
 8001844:	20000150 	.word	0x20000150

08001848 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	607a      	str	r2, [r7, #4]
 8001852:	603b      	str	r3, [r7, #0]
 8001854:	4603      	mov	r3, r0
 8001856:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d102      	bne.n	8001864 <SD_disk_write+0x1c>
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <SD_disk_write+0x20>
 8001864:	2304      	movs	r3, #4
 8001866:	e06b      	b.n	8001940 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001868:	4b37      	ldr	r3, [pc, #220]	; (8001948 <SD_disk_write+0x100>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <SD_disk_write+0x32>
 8001876:	2303      	movs	r3, #3
 8001878:	e062      	b.n	8001940 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800187a:	4b33      	ldr	r3, [pc, #204]	; (8001948 <SD_disk_write+0x100>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	b2db      	uxtb	r3, r3
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <SD_disk_write+0x44>
 8001888:	2302      	movs	r3, #2
 800188a:	e059      	b.n	8001940 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800188c:	4b2f      	ldr	r3, [pc, #188]	; (800194c <SD_disk_write+0x104>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	d102      	bne.n	800189e <SD_disk_write+0x56>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	025b      	lsls	r3, r3, #9
 800189c:	607b      	str	r3, [r7, #4]

	SELECT();
 800189e:	f7ff fcb5 	bl	800120c <SELECT>

	if (count == 1)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d110      	bne.n	80018ca <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	2058      	movs	r0, #88	; 0x58
 80018ac:	f7ff fe11 	bl	80014d2 <SD_SendCmd>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d13a      	bne.n	800192c <SD_disk_write+0xe4>
 80018b6:	21fe      	movs	r1, #254	; 0xfe
 80018b8:	68b8      	ldr	r0, [r7, #8]
 80018ba:	f7ff fdc7 	bl	800144c <SD_TxDataBlock>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d033      	beq.n	800192c <SD_disk_write+0xe4>
			count = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	e030      	b.n	800192c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80018ca:	4b20      	ldr	r3, [pc, #128]	; (800194c <SD_disk_write+0x104>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d007      	beq.n	80018e6 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80018d6:	2100      	movs	r1, #0
 80018d8:	2077      	movs	r0, #119	; 0x77
 80018da:	f7ff fdfa 	bl	80014d2 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80018de:	6839      	ldr	r1, [r7, #0]
 80018e0:	2057      	movs	r0, #87	; 0x57
 80018e2:	f7ff fdf6 	bl	80014d2 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	2059      	movs	r0, #89	; 0x59
 80018ea:	f7ff fdf2 	bl	80014d2 <SD_SendCmd>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d11b      	bne.n	800192c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80018f4:	21fc      	movs	r1, #252	; 0xfc
 80018f6:	68b8      	ldr	r0, [r7, #8]
 80018f8:	f7ff fda8 	bl	800144c <SD_TxDataBlock>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00a      	beq.n	8001918 <SD_disk_write+0xd0>
				buff += 512;
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001908:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	3b01      	subs	r3, #1
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1ee      	bne.n	80018f4 <SD_disk_write+0xac>
 8001916:	e000      	b.n	800191a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001918:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800191a:	21fd      	movs	r1, #253	; 0xfd
 800191c:	2000      	movs	r0, #0
 800191e:	f7ff fd95 	bl	800144c <SD_TxDataBlock>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <SD_disk_write+0xe4>
			{
				count = 1;
 8001928:	2301      	movs	r3, #1
 800192a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800192c:	f7ff fc7e 	bl	800122c <DESELECT>
	SPI_RxByte();
 8001930:	f7ff fcc0 	bl	80012b4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	bf14      	ite	ne
 800193a:	2301      	movne	r3, #1
 800193c:	2300      	moveq	r3, #0
 800193e:	b2db      	uxtb	r3, r3
}
 8001940:	4618      	mov	r0, r3
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000000 	.word	0x20000000
 800194c:	20000150 	.word	0x20000150

08001950 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b08b      	sub	sp, #44	; 0x2c
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	603a      	str	r2, [r7, #0]
 800195a:	71fb      	strb	r3, [r7, #7]
 800195c:	460b      	mov	r3, r1
 800195e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <SD_disk_ioctl+0x1e>
 800196a:	2304      	movs	r3, #4
 800196c:	e115      	b.n	8001b9a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001974:	79bb      	ldrb	r3, [r7, #6]
 8001976:	2b05      	cmp	r3, #5
 8001978:	d124      	bne.n	80019c4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800197a:	6a3b      	ldr	r3, [r7, #32]
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b02      	cmp	r3, #2
 8001980:	d012      	beq.n	80019a8 <SD_disk_ioctl+0x58>
 8001982:	2b02      	cmp	r3, #2
 8001984:	dc1a      	bgt.n	80019bc <SD_disk_ioctl+0x6c>
 8001986:	2b00      	cmp	r3, #0
 8001988:	d002      	beq.n	8001990 <SD_disk_ioctl+0x40>
 800198a:	2b01      	cmp	r3, #1
 800198c:	d006      	beq.n	800199c <SD_disk_ioctl+0x4c>
 800198e:	e015      	b.n	80019bc <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001990:	f7ff fd16 	bl	80013c0 <SD_PowerOff>
			res = RES_OK;
 8001994:	2300      	movs	r3, #0
 8001996:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800199a:	e0fc      	b.n	8001b96 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 800199c:	f7ff fcce 	bl	800133c <SD_PowerOn>
			res = RES_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80019a6:	e0f6      	b.n	8001b96 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	1c5c      	adds	r4, r3, #1
 80019ac:	f7ff fd14 	bl	80013d8 <SD_CheckPower>
 80019b0:	4603      	mov	r3, r0
 80019b2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80019b4:	2300      	movs	r3, #0
 80019b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80019ba:	e0ec      	b.n	8001b96 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80019bc:	2304      	movs	r3, #4
 80019be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80019c2:	e0e8      	b.n	8001b96 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80019c4:	4b77      	ldr	r3, [pc, #476]	; (8001ba4 <SD_disk_ioctl+0x254>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <SD_disk_ioctl+0x86>
 80019d2:	2303      	movs	r3, #3
 80019d4:	e0e1      	b.n	8001b9a <SD_disk_ioctl+0x24a>

		SELECT();
 80019d6:	f7ff fc19 	bl	800120c <SELECT>

		switch (ctrl)
 80019da:	79bb      	ldrb	r3, [r7, #6]
 80019dc:	2b0d      	cmp	r3, #13
 80019de:	f200 80cb 	bhi.w	8001b78 <SD_disk_ioctl+0x228>
 80019e2:	a201      	add	r2, pc, #4	; (adr r2, 80019e8 <SD_disk_ioctl+0x98>)
 80019e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e8:	08001ae3 	.word	0x08001ae3
 80019ec:	08001a21 	.word	0x08001a21
 80019f0:	08001ad3 	.word	0x08001ad3
 80019f4:	08001b79 	.word	0x08001b79
 80019f8:	08001b79 	.word	0x08001b79
 80019fc:	08001b79 	.word	0x08001b79
 8001a00:	08001b79 	.word	0x08001b79
 8001a04:	08001b79 	.word	0x08001b79
 8001a08:	08001b79 	.word	0x08001b79
 8001a0c:	08001b79 	.word	0x08001b79
 8001a10:	08001b79 	.word	0x08001b79
 8001a14:	08001af5 	.word	0x08001af5
 8001a18:	08001b19 	.word	0x08001b19
 8001a1c:	08001b3d 	.word	0x08001b3d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001a20:	2100      	movs	r1, #0
 8001a22:	2049      	movs	r0, #73	; 0x49
 8001a24:	f7ff fd55 	bl	80014d2 <SD_SendCmd>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f040 80a8 	bne.w	8001b80 <SD_disk_ioctl+0x230>
 8001a30:	f107 030c 	add.w	r3, r7, #12
 8001a34:	2110      	movs	r1, #16
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fcda 	bl	80013f0 <SD_RxDataBlock>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 809e 	beq.w	8001b80 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001a44:	7b3b      	ldrb	r3, [r7, #12]
 8001a46:	099b      	lsrs	r3, r3, #6
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d10e      	bne.n	8001a6c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001a4e:	7d7b      	ldrb	r3, [r7, #21]
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	7d3b      	ldrb	r3, [r7, #20]
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	021b      	lsls	r3, r3, #8
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	3301      	adds	r3, #1
 8001a60:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001a62:	8bfb      	ldrh	r3, [r7, #30]
 8001a64:	029a      	lsls	r2, r3, #10
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	e02e      	b.n	8001aca <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001a6c:	7c7b      	ldrb	r3, [r7, #17]
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	7dbb      	ldrb	r3, [r7, #22]
 8001a76:	09db      	lsrs	r3, r3, #7
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	7d7b      	ldrb	r3, [r7, #21]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	f003 0306 	and.w	r3, r3, #6
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	3302      	adds	r3, #2
 8001a90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001a94:	7d3b      	ldrb	r3, [r7, #20]
 8001a96:	099b      	lsrs	r3, r3, #6
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	7cfb      	ldrb	r3, [r7, #19]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	4413      	add	r3, r2
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	7cbb      	ldrb	r3, [r7, #18]
 8001aaa:	029b      	lsls	r3, r3, #10
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	4413      	add	r3, r2
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	3301      	adds	r3, #1
 8001aba:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001abc:	8bfa      	ldrh	r2, [r7, #30]
 8001abe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ac2:	3b09      	subs	r3, #9
 8001ac4:	409a      	lsls	r2, r3
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001ad0:	e056      	b.n	8001b80 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ad8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001ada:	2300      	movs	r3, #0
 8001adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001ae0:	e055      	b.n	8001b8e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001ae2:	f7ff fc11 	bl	8001308 <SD_ReadyWait>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2bff      	cmp	r3, #255	; 0xff
 8001aea:	d14b      	bne.n	8001b84 <SD_disk_ioctl+0x234>
 8001aec:	2300      	movs	r3, #0
 8001aee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001af2:	e047      	b.n	8001b84 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001af4:	2100      	movs	r1, #0
 8001af6:	2049      	movs	r0, #73	; 0x49
 8001af8:	f7ff fceb 	bl	80014d2 <SD_SendCmd>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d142      	bne.n	8001b88 <SD_disk_ioctl+0x238>
 8001b02:	2110      	movs	r1, #16
 8001b04:	6a38      	ldr	r0, [r7, #32]
 8001b06:	f7ff fc73 	bl	80013f0 <SD_RxDataBlock>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d03b      	beq.n	8001b88 <SD_disk_ioctl+0x238>
 8001b10:	2300      	movs	r3, #0
 8001b12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001b16:	e037      	b.n	8001b88 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001b18:	2100      	movs	r1, #0
 8001b1a:	204a      	movs	r0, #74	; 0x4a
 8001b1c:	f7ff fcd9 	bl	80014d2 <SD_SendCmd>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d132      	bne.n	8001b8c <SD_disk_ioctl+0x23c>
 8001b26:	2110      	movs	r1, #16
 8001b28:	6a38      	ldr	r0, [r7, #32]
 8001b2a:	f7ff fc61 	bl	80013f0 <SD_RxDataBlock>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d02b      	beq.n	8001b8c <SD_disk_ioctl+0x23c>
 8001b34:	2300      	movs	r3, #0
 8001b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001b3a:	e027      	b.n	8001b8c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	207a      	movs	r0, #122	; 0x7a
 8001b40:	f7ff fcc7 	bl	80014d2 <SD_SendCmd>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d116      	bne.n	8001b78 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001b50:	e00b      	b.n	8001b6a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001b52:	6a3c      	ldr	r4, [r7, #32]
 8001b54:	1c63      	adds	r3, r4, #1
 8001b56:	623b      	str	r3, [r7, #32]
 8001b58:	f7ff fbac 	bl	80012b4 <SPI_RxByte>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001b60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b64:	3301      	adds	r3, #1
 8001b66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001b6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b6e:	2b03      	cmp	r3, #3
 8001b70:	d9ef      	bls.n	8001b52 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001b72:	2300      	movs	r3, #0
 8001b74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001b78:	2304      	movs	r3, #4
 8001b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b7e:	e006      	b.n	8001b8e <SD_disk_ioctl+0x23e>
			break;
 8001b80:	bf00      	nop
 8001b82:	e004      	b.n	8001b8e <SD_disk_ioctl+0x23e>
			break;
 8001b84:	bf00      	nop
 8001b86:	e002      	b.n	8001b8e <SD_disk_ioctl+0x23e>
			break;
 8001b88:	bf00      	nop
 8001b8a:	e000      	b.n	8001b8e <SD_disk_ioctl+0x23e>
			break;
 8001b8c:	bf00      	nop
		}

		DESELECT();
 8001b8e:	f7ff fb4d 	bl	800122c <DESELECT>
		SPI_RxByte();
 8001b92:	f7ff fb8f 	bl	80012b4 <SPI_RxByte>
	}

	return res;
 8001b96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	372c      	adds	r7, #44	; 0x2c
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd90      	pop	{r4, r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000000 	.word	0x20000000

08001ba8 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFF);
 8001bb0:	1d39      	adds	r1, r7, #4
 8001bb2:	23ff      	movs	r3, #255	; 0xff
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	4804      	ldr	r0, [pc, #16]	; (8001bc8 <__io_putchar+0x20>)
 8001bb8:	f004 fffa 	bl	8006bb0 <HAL_UART_Transmit>

  return ch;
 8001bbc:	687b      	ldr	r3, [r7, #4]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200002ac 	.word	0x200002ac

08001bcc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  // Conversion Complete & DMA Transfer Complete As Well
  adc_conv_complete_flag = 1;
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	701a      	strb	r2, [r3, #0]
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	2000040c 	.word	0x2000040c

08001bec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b09a      	sub	sp, #104	; 0x68
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bf2:	f001 fbfe 	bl	80033f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bf6:	f000 f8ad 	bl	8001d54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bfa:	f000 fabf 	bl	800217c <MX_GPIO_Init>
  MX_DMA_Init();
 8001bfe:	f000 fa3d 	bl	800207c <MX_DMA_Init>
  MX_FMC_Init();
 8001c02:	f000 fa59 	bl	80020b8 <MX_FMC_Init>
  MX_TIM6_Init();
 8001c06:	f000 f9a3 	bl	8001f50 <MX_TIM6_Init>
  MX_USART6_UART_Init();
 8001c0a:	f000 fa07 	bl	800201c <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001c0e:	f000 f90f 	bl	8001e30 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8001c12:	f000 f9d3 	bl	8001fbc <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001c16:	f000 f95d 	bl	8001ed4 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001c1a:	f005 fe2d 	bl	8007878 <MX_FATFS_Init>
  /* USER CODE BEGIN WHILE */

  pzem_values pzem_sensor1; //Connected to Arduino D8 and D9 pins of TOE Shield

  dht11_t dht; //Connected to Arduino D3 pin of TOE Shield
  init_dht11(&dht, &htim6, DHT11_PIN_GPIO_Port, DHT11_PIN_Pin);
 8001c1e:	4638      	mov	r0, r7
 8001c20:	2304      	movs	r3, #4
 8001c22:	4a45      	ldr	r2, [pc, #276]	; (8001d38 <main+0x14c>)
 8001c24:	4945      	ldr	r1, [pc, #276]	; (8001d3c <main+0x150>)
 8001c26:	f7ff f927 	bl	8000e78 <init_dht11>

  int mqtt_connect_flag = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	667b      	str	r3, [r7, #100]	; 0x64
  int count = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	663b      	str	r3, [r7, #96]	; 0x60
  //takes three attempts to connect the MQTT broker
  while(count<3){
 8001c32:	e010      	b.n	8001c56 <main+0x6a>
	  int val = mqtt_connect(&net_info);
 8001c34:	4842      	ldr	r0, [pc, #264]	; (8001d40 <main+0x154>)
 8001c36:	f001 fad3 	bl	80031e0 <mqtt_connect>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	653b      	str	r3, [r7, #80]	; 0x50
	  if(val==1) {
 8001c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d105      	bne.n	8001c50 <main+0x64>
		  mqtt_connect_flag = 1;
 8001c44:	2301      	movs	r3, #1
 8001c46:	667b      	str	r3, [r7, #100]	; 0x64
		  mqtt_subscribe(&net_info);
 8001c48:	483d      	ldr	r0, [pc, #244]	; (8001d40 <main+0x154>)
 8001c4a:	f001 fb7f 	bl	800334c <mqtt_subscribe>
		  break;
 8001c4e:	e005      	b.n	8001c5c <main+0x70>
	  }
	  count++;
 8001c50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c52:	3301      	adds	r3, #1
 8001c54:	663b      	str	r3, [r7, #96]	; 0x60
  while(count<3){
 8001c56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	ddeb      	ble.n	8001c34 <main+0x48>
  }

  while (1)
  {
	  read_pzem004t(&pzem_sensor1, &huart6);
 8001c5c:	f107 0310 	add.w	r3, r7, #16
 8001c60:	4938      	ldr	r1, [pc, #224]	; (8001d44 <main+0x158>)
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 fdb8 	bl	80027d8 <read_pzem004t>
	  float volt = pzem_sensor1.voltage;
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
	  float cur = pzem_sensor1.current;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	64bb      	str	r3, [r7, #72]	; 0x48
	  float pow = pzem_sensor1.power;
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	647b      	str	r3, [r7, #68]	; 0x44
	  float enrg = pzem_sensor1.energy;
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	643b      	str	r3, [r7, #64]	; 0x40
	  float freq = pzem_sensor1.frequency;
 8001c78:	6a3b      	ldr	r3, [r7, #32]
 8001c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
	  float pfactor = pzem_sensor1.pf;
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	63bb      	str	r3, [r7, #56]	; 0x38

      float temp = 0;
 8001c80:	f04f 0300 	mov.w	r3, #0
 8001c84:	65fb      	str	r3, [r7, #92]	; 0x5c
      float humid = 0;
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	65bb      	str	r3, [r7, #88]	; 0x58
	  int result = readDHT11(&dht);
 8001c8c:	463b      	mov	r3, r7
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff f943 	bl	8000f1a <readDHT11>
 8001c94:	4603      	mov	r3, r0
 8001c96:	637b      	str	r3, [r7, #52]	; 0x34
      if(result == 1){
 8001c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d10d      	bne.n	8001cba <main+0xce>
    	  temp = dht.temperature;
 8001c9e:	7b3b      	ldrb	r3, [r7, #12]
 8001ca0:	ee07 3a90 	vmov	s15, r3
 8001ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ca8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    	  humid = dht.humidity;
 8001cac:	7b7b      	ldrb	r3, [r7, #13]
 8001cae:	ee07 3a90 	vmov	s15, r3
 8001cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cb6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      }

      HAL_ADC_Start_DMA(&hadc1, &VOC_VALUE, 1);
 8001cba:	2201      	movs	r2, #1
 8001cbc:	4922      	ldr	r1, [pc, #136]	; (8001d48 <main+0x15c>)
 8001cbe:	4823      	ldr	r0, [pc, #140]	; (8001d4c <main+0x160>)
 8001cc0:	f001 fc5c 	bl	800357c <HAL_ADC_Start_DMA>
      float voc_value = 0;
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	657b      	str	r3, [r7, #84]	; 0x54
      if(adc_conv_complete_flag == 1){
 8001cca:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <main+0x164>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d10a      	bne.n	8001ce8 <main+0xfc>
    	  voc_value = VOC_VALUE;
 8001cd2:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <main+0x15c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	ee07 3a90 	vmov	s15, r3
 8001cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cde:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    	  adc_conv_complete_flag = 0;
 8001ce2:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <main+0x164>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]
      }

      //Check if mqtt is connected or not. If not connected then connect
      if(!mqtt_connect_flag){
 8001ce8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d109      	bne.n	8001d02 <main+0x116>
		  int result = mqtt_connect(&net_info);
 8001cee:	4814      	ldr	r0, [pc, #80]	; (8001d40 <main+0x154>)
 8001cf0:	f001 fa76 	bl	80031e0 <mqtt_connect>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	633b      	str	r3, [r7, #48]	; 0x30
		  if(result==1) mqtt_connect_flag = 1;
 8001cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d11a      	bne.n	8001d34 <main+0x148>
 8001cfe:	2301      	movs	r3, #1
 8001d00:	667b      	str	r3, [r7, #100]	; 0x64
		  else continue;
	  }

      //If connected then sends the data to MQTT broker
	  send_to_cloud(temp, humid, volt, cur, pow, enrg, freq, pfactor, voc_value);
 8001d02:	ed97 4a15 	vldr	s8, [r7, #84]	; 0x54
 8001d06:	edd7 3a0e 	vldr	s7, [r7, #56]	; 0x38
 8001d0a:	ed97 3a0f 	vldr	s6, [r7, #60]	; 0x3c
 8001d0e:	edd7 2a10 	vldr	s5, [r7, #64]	; 0x40
 8001d12:	ed97 2a11 	vldr	s4, [r7, #68]	; 0x44
 8001d16:	edd7 1a12 	vldr	s3, [r7, #72]	; 0x48
 8001d1a:	ed97 1a13 	vldr	s2, [r7, #76]	; 0x4c
 8001d1e:	edd7 0a16 	vldr	s1, [r7, #88]	; 0x58
 8001d22:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 8001d26:	f000 faeb 	bl	8002300 <send_to_cloud>

	  //publish data to every 5 seconds, adjust as per your requirement
	  HAL_Delay(5000);
 8001d2a:	f241 3088 	movw	r0, #5000	; 0x1388
 8001d2e:	f001 fbbd 	bl	80034ac <HAL_Delay>
 8001d32:	e793      	b.n	8001c5c <main+0x70>
		  else continue;
 8001d34:	bf00      	nop
  {
 8001d36:	e791      	b.n	8001c5c <main+0x70>
 8001d38:	40020000 	.word	0x40020000
 8001d3c:	20000260 	.word	0x20000260
 8001d40:	20000004 	.word	0x20000004
 8001d44:	20000334 	.word	0x20000334
 8001d48:	20000408 	.word	0x20000408
 8001d4c:	20000154 	.word	0x20000154
 8001d50:	2000040c 	.word	0x2000040c

08001d54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b094      	sub	sp, #80	; 0x50
 8001d58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d5a:	f107 0320 	add.w	r3, r7, #32
 8001d5e:	2230      	movs	r2, #48	; 0x30
 8001d60:	2100      	movs	r1, #0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f009 ff36 	bl	800bbd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d68:	f107 030c 	add.w	r3, r7, #12
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001d78:	f002 fe3e 	bl	80049f8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7c:	4b2a      	ldr	r3, [pc, #168]	; (8001e28 <SystemClock_Config+0xd4>)
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	4a29      	ldr	r2, [pc, #164]	; (8001e28 <SystemClock_Config+0xd4>)
 8001d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d86:	6413      	str	r3, [r2, #64]	; 0x40
 8001d88:	4b27      	ldr	r3, [pc, #156]	; (8001e28 <SystemClock_Config+0xd4>)
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d94:	4b25      	ldr	r3, [pc, #148]	; (8001e2c <SystemClock_Config+0xd8>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a24      	ldr	r2, [pc, #144]	; (8001e2c <SystemClock_Config+0xd8>)
 8001d9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	4b22      	ldr	r3, [pc, #136]	; (8001e2c <SystemClock_Config+0xd8>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dac:	2301      	movs	r3, #1
 8001dae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001db0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001db6:	2302      	movs	r3, #2
 8001db8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001dc0:	2304      	movs	r3, #4
 8001dc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001dc4:	23d8      	movs	r3, #216	; 0xd8
 8001dc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001dcc:	2309      	movs	r3, #9
 8001dce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dd0:	f107 0320 	add.w	r3, r7, #32
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f002 fe6f 	bl	8004ab8 <HAL_RCC_OscConfig>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001de0:	f000 fcf4 	bl	80027cc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001de4:	f002 fe18 	bl	8004a18 <HAL_PWREx_EnableOverDrive>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001dee:	f000 fced 	bl	80027cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001df2:	230f      	movs	r3, #15
 8001df4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001df6:	2302      	movs	r3, #2
 8001df8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001dfe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001e0a:	f107 030c 	add.w	r3, r7, #12
 8001e0e:	2107      	movs	r1, #7
 8001e10:	4618      	mov	r0, r3
 8001e12:	f003 f8f5 	bl	8005000 <HAL_RCC_ClockConfig>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001e1c:	f000 fcd6 	bl	80027cc <Error_Handler>
  }
}
 8001e20:	bf00      	nop
 8001e22:	3750      	adds	r7, #80	; 0x50
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40007000 	.word	0x40007000

08001e30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e36:	463b      	mov	r3, r7
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e42:	4b21      	ldr	r3, [pc, #132]	; (8001ec8 <MX_ADC1_Init+0x98>)
 8001e44:	4a21      	ldr	r2, [pc, #132]	; (8001ecc <MX_ADC1_Init+0x9c>)
 8001e46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e48:	4b1f      	ldr	r3, [pc, #124]	; (8001ec8 <MX_ADC1_Init+0x98>)
 8001e4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e4e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e50:	4b1d      	ldr	r3, [pc, #116]	; (8001ec8 <MX_ADC1_Init+0x98>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e56:	4b1c      	ldr	r3, [pc, #112]	; (8001ec8 <MX_ADC1_Init+0x98>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <MX_ADC1_Init+0x98>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e62:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <MX_ADC1_Init+0x98>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e6a:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <MX_ADC1_Init+0x98>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e70:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <MX_ADC1_Init+0x98>)
 8001e72:	4a17      	ldr	r2, [pc, #92]	; (8001ed0 <MX_ADC1_Init+0xa0>)
 8001e74:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e76:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <MX_ADC1_Init+0x98>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001e7c:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <MX_ADC1_Init+0x98>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001e82:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <MX_ADC1_Init+0x98>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <MX_ADC1_Init+0x98>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e90:	480d      	ldr	r0, [pc, #52]	; (8001ec8 <MX_ADC1_Init+0x98>)
 8001e92:	f001 fb2f 	bl	80034f4 <HAL_ADC_Init>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001e9c:	f000 fc96 	bl	80027cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eac:	463b      	mov	r3, r7
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4805      	ldr	r0, [pc, #20]	; (8001ec8 <MX_ADC1_Init+0x98>)
 8001eb2:	f001 fc71 	bl	8003798 <HAL_ADC_ConfigChannel>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001ebc:	f000 fc86 	bl	80027cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ec0:	bf00      	nop
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000154 	.word	0x20000154
 8001ecc:	40012000 	.word	0x40012000
 8001ed0:	0f000001 	.word	0x0f000001

08001ed4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ed8:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <MX_SPI1_Init+0x74>)
 8001eda:	4a1c      	ldr	r2, [pc, #112]	; (8001f4c <MX_SPI1_Init+0x78>)
 8001edc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ede:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <MX_SPI1_Init+0x74>)
 8001ee0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ee4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ee6:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <MX_SPI1_Init+0x74>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001eec:	4b16      	ldr	r3, [pc, #88]	; (8001f48 <MX_SPI1_Init+0x74>)
 8001eee:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001ef2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ef4:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <MX_SPI1_Init+0x74>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001efa:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <MX_SPI1_Init+0x74>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f00:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <MX_SPI1_Init+0x74>)
 8001f02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f06:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f08:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <MX_SPI1_Init+0x74>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <MX_SPI1_Init+0x74>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <MX_SPI1_Init+0x74>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <MX_SPI1_Init+0x74>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001f20:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <MX_SPI1_Init+0x74>)
 8001f22:	2207      	movs	r2, #7
 8001f24:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f26:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <MX_SPI1_Init+0x74>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <MX_SPI1_Init+0x74>)
 8001f2e:	2208      	movs	r2, #8
 8001f30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f32:	4805      	ldr	r0, [pc, #20]	; (8001f48 <MX_SPI1_Init+0x74>)
 8001f34:	f003 fdd4 	bl	8005ae0 <HAL_SPI_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001f3e:	f000 fc45 	bl	80027cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	200001fc 	.word	0x200001fc
 8001f4c:	40013000 	.word	0x40013000

08001f50 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001f60:	4b14      	ldr	r3, [pc, #80]	; (8001fb4 <MX_TIM6_Init+0x64>)
 8001f62:	4a15      	ldr	r2, [pc, #84]	; (8001fb8 <MX_TIM6_Init+0x68>)
 8001f64:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 108;
 8001f66:	4b13      	ldr	r3, [pc, #76]	; (8001fb4 <MX_TIM6_Init+0x64>)
 8001f68:	226c      	movs	r2, #108	; 0x6c
 8001f6a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f6c:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <MX_TIM6_Init+0x64>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001f72:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <MX_TIM6_Init+0x64>)
 8001f74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f78:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f7a:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <MX_TIM6_Init+0x64>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f80:	480c      	ldr	r0, [pc, #48]	; (8001fb4 <MX_TIM6_Init+0x64>)
 8001f82:	f004 fba9 	bl	80066d8 <HAL_TIM_Base_Init>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001f8c:	f000 fc1e 	bl	80027cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f90:	2300      	movs	r3, #0
 8001f92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f94:	2300      	movs	r3, #0
 8001f96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4805      	ldr	r0, [pc, #20]	; (8001fb4 <MX_TIM6_Init+0x64>)
 8001f9e:	f004 fd2b 	bl	80069f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001fa8:	f000 fc10 	bl	80027cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001fac:	bf00      	nop
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000260 	.word	0x20000260
 8001fb8:	40001000 	.word	0x40001000

08001fbc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fc0:	4b14      	ldr	r3, [pc, #80]	; (8002014 <MX_USART3_UART_Init+0x58>)
 8001fc2:	4a15      	ldr	r2, [pc, #84]	; (8002018 <MX_USART3_UART_Init+0x5c>)
 8001fc4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001fc6:	4b13      	ldr	r3, [pc, #76]	; (8002014 <MX_USART3_UART_Init+0x58>)
 8001fc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fcc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fce:	4b11      	ldr	r3, [pc, #68]	; (8002014 <MX_USART3_UART_Init+0x58>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <MX_USART3_UART_Init+0x58>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fda:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <MX_USART3_UART_Init+0x58>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <MX_USART3_UART_Init+0x58>)
 8001fe2:	220c      	movs	r2, #12
 8001fe4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <MX_USART3_UART_Init+0x58>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fec:	4b09      	ldr	r3, [pc, #36]	; (8002014 <MX_USART3_UART_Init+0x58>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ff2:	4b08      	ldr	r3, [pc, #32]	; (8002014 <MX_USART3_UART_Init+0x58>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <MX_USART3_UART_Init+0x58>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ffe:	4805      	ldr	r0, [pc, #20]	; (8002014 <MX_USART3_UART_Init+0x58>)
 8002000:	f004 fd88 	bl	8006b14 <HAL_UART_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800200a:	f000 fbdf 	bl	80027cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	200002ac 	.word	0x200002ac
 8002018:	40004800 	.word	0x40004800

0800201c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002020:	4b14      	ldr	r3, [pc, #80]	; (8002074 <MX_USART6_UART_Init+0x58>)
 8002022:	4a15      	ldr	r2, [pc, #84]	; (8002078 <MX_USART6_UART_Init+0x5c>)
 8002024:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002026:	4b13      	ldr	r3, [pc, #76]	; (8002074 <MX_USART6_UART_Init+0x58>)
 8002028:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800202c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800202e:	4b11      	ldr	r3, [pc, #68]	; (8002074 <MX_USART6_UART_Init+0x58>)
 8002030:	2200      	movs	r2, #0
 8002032:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002034:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <MX_USART6_UART_Init+0x58>)
 8002036:	2200      	movs	r2, #0
 8002038:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800203a:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <MX_USART6_UART_Init+0x58>)
 800203c:	2200      	movs	r2, #0
 800203e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <MX_USART6_UART_Init+0x58>)
 8002042:	220c      	movs	r2, #12
 8002044:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <MX_USART6_UART_Init+0x58>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800204c:	4b09      	ldr	r3, [pc, #36]	; (8002074 <MX_USART6_UART_Init+0x58>)
 800204e:	2200      	movs	r2, #0
 8002050:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002052:	4b08      	ldr	r3, [pc, #32]	; (8002074 <MX_USART6_UART_Init+0x58>)
 8002054:	2200      	movs	r2, #0
 8002056:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <MX_USART6_UART_Init+0x58>)
 800205a:	2200      	movs	r2, #0
 800205c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800205e:	4805      	ldr	r0, [pc, #20]	; (8002074 <MX_USART6_UART_Init+0x58>)
 8002060:	f004 fd58 	bl	8006b14 <HAL_UART_Init>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800206a:	f000 fbaf 	bl	80027cc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000334 	.word	0x20000334
 8002078:	40011400 	.word	0x40011400

0800207c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002082:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <MX_DMA_Init+0x38>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	4a0b      	ldr	r2, [pc, #44]	; (80020b4 <MX_DMA_Init+0x38>)
 8002088:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800208c:	6313      	str	r3, [r2, #48]	; 0x30
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <MX_DMA_Init+0x38>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002096:	607b      	str	r3, [r7, #4]
 8002098:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	2100      	movs	r1, #0
 800209e:	2038      	movs	r0, #56	; 0x38
 80020a0:	f001 ff27 	bl	8003ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80020a4:	2038      	movs	r0, #56	; 0x38
 80020a6:	f001 ff40 	bl	8003f2a <HAL_NVIC_EnableIRQ>

}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40023800 	.word	0x40023800

080020b8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]
 80020cc:	615a      	str	r2, [r3, #20]
 80020ce:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80020d0:	4b28      	ldr	r3, [pc, #160]	; (8002174 <MX_FMC_Init+0xbc>)
 80020d2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80020d6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80020d8:	4b26      	ldr	r3, [pc, #152]	; (8002174 <MX_FMC_Init+0xbc>)
 80020da:	4a27      	ldr	r2, [pc, #156]	; (8002178 <MX_FMC_Init+0xc0>)
 80020dc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80020de:	4b25      	ldr	r3, [pc, #148]	; (8002174 <MX_FMC_Init+0xbc>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80020e4:	4b23      	ldr	r3, [pc, #140]	; (8002174 <MX_FMC_Init+0xbc>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80020ea:	4b22      	ldr	r3, [pc, #136]	; (8002174 <MX_FMC_Init+0xbc>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80020f0:	4b20      	ldr	r3, [pc, #128]	; (8002174 <MX_FMC_Init+0xbc>)
 80020f2:	2210      	movs	r2, #16
 80020f4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80020f6:	4b1f      	ldr	r3, [pc, #124]	; (8002174 <MX_FMC_Init+0xbc>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80020fc:	4b1d      	ldr	r3, [pc, #116]	; (8002174 <MX_FMC_Init+0xbc>)
 80020fe:	2200      	movs	r2, #0
 8002100:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8002102:	4b1c      	ldr	r3, [pc, #112]	; (8002174 <MX_FMC_Init+0xbc>)
 8002104:	2200      	movs	r2, #0
 8002106:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8002108:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <MX_FMC_Init+0xbc>)
 800210a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800210e:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8002110:	4b18      	ldr	r3, [pc, #96]	; (8002174 <MX_FMC_Init+0xbc>)
 8002112:	2200      	movs	r2, #0
 8002114:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8002116:	4b17      	ldr	r3, [pc, #92]	; (8002174 <MX_FMC_Init+0xbc>)
 8002118:	2200      	movs	r2, #0
 800211a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800211c:	4b15      	ldr	r3, [pc, #84]	; (8002174 <MX_FMC_Init+0xbc>)
 800211e:	2200      	movs	r2, #0
 8002120:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8002122:	4b14      	ldr	r3, [pc, #80]	; (8002174 <MX_FMC_Init+0xbc>)
 8002124:	2200      	movs	r2, #0
 8002126:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8002128:	4b12      	ldr	r3, [pc, #72]	; (8002174 <MX_FMC_Init+0xbc>)
 800212a:	2200      	movs	r2, #0
 800212c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <MX_FMC_Init+0xbc>)
 8002130:	2200      	movs	r2, #0
 8002132:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8002134:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <MX_FMC_Init+0xbc>)
 8002136:	2200      	movs	r2, #0
 8002138:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 800213a:	230f      	movs	r3, #15
 800213c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800213e:	230f      	movs	r3, #15
 8002140:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8002142:	23ff      	movs	r3, #255	; 0xff
 8002144:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8002146:	230f      	movs	r3, #15
 8002148:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800214a:	2310      	movs	r3, #16
 800214c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800214e:	2311      	movs	r3, #17
 8002150:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8002156:	1d3b      	adds	r3, r7, #4
 8002158:	2200      	movs	r2, #0
 800215a:	4619      	mov	r1, r3
 800215c:	4805      	ldr	r0, [pc, #20]	; (8002174 <MX_FMC_Init+0xbc>)
 800215e:	f004 fa73 	bl	8006648 <HAL_SRAM_Init>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 8002168:	f000 fb30 	bl	80027cc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800216c:	bf00      	nop
 800216e:	3720      	adds	r7, #32
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	200003bc 	.word	0x200003bc
 8002178:	a0000104 	.word	0xa0000104

0800217c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08c      	sub	sp, #48	; 0x30
 8002180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002182:	f107 031c 	add.w	r3, r7, #28
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	605a      	str	r2, [r3, #4]
 800218c:	609a      	str	r2, [r3, #8]
 800218e:	60da      	str	r2, [r3, #12]
 8002190:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002192:	4b57      	ldr	r3, [pc, #348]	; (80022f0 <MX_GPIO_Init+0x174>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a56      	ldr	r2, [pc, #344]	; (80022f0 <MX_GPIO_Init+0x174>)
 8002198:	f043 0310 	orr.w	r3, r3, #16
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
 800219e:	4b54      	ldr	r3, [pc, #336]	; (80022f0 <MX_GPIO_Init+0x174>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f003 0310 	and.w	r3, r3, #16
 80021a6:	61bb      	str	r3, [r7, #24]
 80021a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021aa:	4b51      	ldr	r3, [pc, #324]	; (80022f0 <MX_GPIO_Init+0x174>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	4a50      	ldr	r2, [pc, #320]	; (80022f0 <MX_GPIO_Init+0x174>)
 80021b0:	f043 0304 	orr.w	r3, r3, #4
 80021b4:	6313      	str	r3, [r2, #48]	; 0x30
 80021b6:	4b4e      	ldr	r3, [pc, #312]	; (80022f0 <MX_GPIO_Init+0x174>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	f003 0304 	and.w	r3, r3, #4
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021c2:	4b4b      	ldr	r3, [pc, #300]	; (80022f0 <MX_GPIO_Init+0x174>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	4a4a      	ldr	r2, [pc, #296]	; (80022f0 <MX_GPIO_Init+0x174>)
 80021c8:	f043 0320 	orr.w	r3, r3, #32
 80021cc:	6313      	str	r3, [r2, #48]	; 0x30
 80021ce:	4b48      	ldr	r3, [pc, #288]	; (80022f0 <MX_GPIO_Init+0x174>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f003 0320 	and.w	r3, r3, #32
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021da:	4b45      	ldr	r3, [pc, #276]	; (80022f0 <MX_GPIO_Init+0x174>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	4a44      	ldr	r2, [pc, #272]	; (80022f0 <MX_GPIO_Init+0x174>)
 80021e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021e4:	6313      	str	r3, [r2, #48]	; 0x30
 80021e6:	4b42      	ldr	r3, [pc, #264]	; (80022f0 <MX_GPIO_Init+0x174>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f2:	4b3f      	ldr	r3, [pc, #252]	; (80022f0 <MX_GPIO_Init+0x174>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	4a3e      	ldr	r2, [pc, #248]	; (80022f0 <MX_GPIO_Init+0x174>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6313      	str	r3, [r2, #48]	; 0x30
 80021fe:	4b3c      	ldr	r3, [pc, #240]	; (80022f0 <MX_GPIO_Init+0x174>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800220a:	4b39      	ldr	r3, [pc, #228]	; (80022f0 <MX_GPIO_Init+0x174>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a38      	ldr	r2, [pc, #224]	; (80022f0 <MX_GPIO_Init+0x174>)
 8002210:	f043 0308 	orr.w	r3, r3, #8
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b36      	ldr	r3, [pc, #216]	; (80022f0 <MX_GPIO_Init+0x174>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	607b      	str	r3, [r7, #4]
 8002220:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RELAY_1_Pin|RELAY_2_Pin|RELAY_3_Pin|RELAY_4_Pin, GPIO_PIN_RESET);
 8002222:	2200      	movs	r2, #0
 8002224:	210f      	movs	r1, #15
 8002226:	4833      	ldr	r0, [pc, #204]	; (80022f4 <MX_GPIO_Init+0x178>)
 8002228:	f002 fbcc 	bl	80049c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5x00_RST_GPIO_Port, W5x00_RST_Pin, GPIO_PIN_SET);
 800222c:	2201      	movs	r2, #1
 800222e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002232:	4830      	ldr	r0, [pc, #192]	; (80022f4 <MX_GPIO_Init+0x178>)
 8002234:	f002 fbc6 	bl	80049c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002238:	2200      	movs	r2, #0
 800223a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800223e:	482e      	ldr	r0, [pc, #184]	; (80022f8 <MX_GPIO_Init+0x17c>)
 8002240:	f002 fbc0 	bl	80049c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : W5x00_BRDY0_Pin W5x00_BRDY1_Pin W5x00_BRDY2_Pin W5x00_BRDY3_Pin */
  GPIO_InitStruct.Pin = W5x00_BRDY0_Pin|W5x00_BRDY1_Pin|W5x00_BRDY2_Pin|W5x00_BRDY3_Pin;
 8002244:	233c      	movs	r3, #60	; 0x3c
 8002246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002248:	2300      	movs	r3, #0
 800224a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002250:	f107 031c 	add.w	r3, r7, #28
 8002254:	4619      	mov	r1, r3
 8002256:	4829      	ldr	r0, [pc, #164]	; (80022fc <MX_GPIO_Init+0x180>)
 8002258:	f002 fa00 	bl	800465c <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_1_Pin RELAY_2_Pin RELAY_3_Pin RELAY_4_Pin */
  GPIO_InitStruct.Pin = RELAY_1_Pin|RELAY_2_Pin|RELAY_3_Pin|RELAY_4_Pin;
 800225c:	230f      	movs	r3, #15
 800225e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002260:	2301      	movs	r3, #1
 8002262:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002268:	2300      	movs	r3, #0
 800226a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800226c:	f107 031c 	add.w	r3, r7, #28
 8002270:	4619      	mov	r1, r3
 8002272:	4820      	ldr	r0, [pc, #128]	; (80022f4 <MX_GPIO_Init+0x178>)
 8002274:	f002 f9f2 	bl	800465c <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_PIN_Pin */
  GPIO_InitStruct.Pin = DHT11_PIN_Pin;
 8002278:	2304      	movs	r3, #4
 800227a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800227c:	2300      	movs	r3, #0
 800227e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DHT11_PIN_GPIO_Port, &GPIO_InitStruct);
 8002284:	f107 031c 	add.w	r3, r7, #28
 8002288:	4619      	mov	r1, r3
 800228a:	481b      	ldr	r0, [pc, #108]	; (80022f8 <MX_GPIO_Init+0x17c>)
 800228c:	f002 f9e6 	bl	800465c <HAL_GPIO_Init>

  /*Configure GPIO pin : W5x00_INT_Pin */
  GPIO_InitStruct.Pin = W5x00_INT_Pin;
 8002290:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002296:	2300      	movs	r3, #0
 8002298:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(W5x00_INT_GPIO_Port, &GPIO_InitStruct);
 800229e:	f107 031c 	add.w	r3, r7, #28
 80022a2:	4619      	mov	r1, r3
 80022a4:	4813      	ldr	r0, [pc, #76]	; (80022f4 <MX_GPIO_Init+0x178>)
 80022a6:	f002 f9d9 	bl	800465c <HAL_GPIO_Init>

  /*Configure GPIO pin : W5x00_RST_Pin */
  GPIO_InitStruct.Pin = W5x00_RST_Pin;
 80022aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b0:	2301      	movs	r3, #1
 80022b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022b4:	2301      	movs	r3, #1
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b8:	2300      	movs	r3, #0
 80022ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(W5x00_RST_GPIO_Port, &GPIO_InitStruct);
 80022bc:	f107 031c 	add.w	r3, r7, #28
 80022c0:	4619      	mov	r1, r3
 80022c2:	480c      	ldr	r0, [pc, #48]	; (80022f4 <MX_GPIO_Init+0x178>)
 80022c4:	f002 f9ca 	bl	800465c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80022c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ce:	2301      	movs	r3, #1
 80022d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80022d6:	2301      	movs	r3, #1
 80022d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80022da:	f107 031c 	add.w	r3, r7, #28
 80022de:	4619      	mov	r1, r3
 80022e0:	4805      	ldr	r0, [pc, #20]	; (80022f8 <MX_GPIO_Init+0x17c>)
 80022e2:	f002 f9bb 	bl	800465c <HAL_GPIO_Init>

}
 80022e6:	bf00      	nop
 80022e8:	3730      	adds	r7, #48	; 0x30
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40020800 	.word	0x40020800
 80022f8:	40020000 	.word	0x40020000
 80022fc:	40021000 	.word	0x40021000

08002300 <send_to_cloud>:

/* USER CODE BEGIN 4 */
//This function make two integers from the float value add form a data array to send the cloud
void send_to_cloud(float temperature, float humidity, float voltage, float current, float power, float energy, float frequency, float pf, float voc)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b0ea      	sub	sp, #424	; 0x1a8
 8002304:	af12      	add	r7, sp, #72	; 0x48
 8002306:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800230a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800230e:	ed83 0a00 	vstr	s0, [r3]
 8002312:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002316:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800231a:	edc3 0a00 	vstr	s1, [r3]
 800231e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002322:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002326:	ed83 1a00 	vstr	s2, [r3]
 800232a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800232e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002332:	edc3 1a00 	vstr	s3, [r3]
 8002336:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800233a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800233e:	ed83 2a00 	vstr	s4, [r3]
 8002342:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002346:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800234a:	edc3 2a00 	vstr	s5, [r3]
 800234e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002352:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002356:	ed83 3a00 	vstr	s6, [r3]
 800235a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800235e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002362:	edc3 3a00 	vstr	s7, [r3]
 8002366:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800236a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800236e:	ed83 4a00 	vstr	s8, [r3]
	int tempInt1 = temperature;
 8002372:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002376:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800237a:	edd3 7a00 	vldr	s15, [r3]
 800237e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002382:	ee17 3a90 	vmov	r3, s15
 8002386:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	float tempF = temperature - tempInt1;
 800238a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800238e:	ee07 3a90 	vmov	s15, r3
 8002392:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002396:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800239a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800239e:	ed93 7a00 	vldr	s14, [r3]
 80023a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023a6:	edc7 7a56 	vstr	s15, [r7, #344]	; 0x158
	int tempInt2 = trunc(tempF * 100);
 80023aa:	edd7 7a56 	vldr	s15, [r7, #344]	; 0x158
 80023ae:	ed9f 7af7 	vldr	s14, [pc, #988]	; 800278c <send_to_cloud+0x48c>
 80023b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023b6:	ee17 0a90 	vmov	r0, s15
 80023ba:	f7fe f8fd 	bl	80005b8 <__aeabi_f2d>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	ec43 2b10 	vmov	d0, r2, r3
 80023c6:	f009 f847 	bl	800b458 <trunc>
 80023ca:	ec53 2b10 	vmov	r2, r3, d0
 80023ce:	4610      	mov	r0, r2
 80023d0:	4619      	mov	r1, r3
 80023d2:	f7fe fb5b 	bl	8000a8c <__aeabi_d2iz>
 80023d6:	4603      	mov	r3, r0
 80023d8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

	int humidInt1 = humidity;
 80023dc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80023e0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80023e4:	edd3 7a00 	vldr	s15, [r3]
 80023e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023ec:	ee17 3a90 	vmov	r3, s15
 80023f0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	float humidF = humidity - humidInt1;
 80023f4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80023f8:	ee07 3a90 	vmov	s15, r3
 80023fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002400:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002404:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002408:	ed93 7a00 	vldr	s14, [r3]
 800240c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002410:	edc7 7a53 	vstr	s15, [r7, #332]	; 0x14c
	int humidInt2 = trunc(humidF * 100);
 8002414:	edd7 7a53 	vldr	s15, [r7, #332]	; 0x14c
 8002418:	ed9f 7adc 	vldr	s14, [pc, #880]	; 800278c <send_to_cloud+0x48c>
 800241c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002420:	ee17 0a90 	vmov	r0, s15
 8002424:	f7fe f8c8 	bl	80005b8 <__aeabi_f2d>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	ec43 2b10 	vmov	d0, r2, r3
 8002430:	f009 f812 	bl	800b458 <trunc>
 8002434:	ec53 2b10 	vmov	r2, r3, d0
 8002438:	4610      	mov	r0, r2
 800243a:	4619      	mov	r1, r3
 800243c:	f7fe fb26 	bl	8000a8c <__aeabi_d2iz>
 8002440:	4603      	mov	r3, r0
 8002442:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

	int voltInt1 = voltage;
 8002446:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800244a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800244e:	edd3 7a00 	vldr	s15, [r3]
 8002452:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002456:	ee17 3a90 	vmov	r3, s15
 800245a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	float voltF = voltage - voltInt1;
 800245e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002462:	ee07 3a90 	vmov	s15, r3
 8002466:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800246a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800246e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002472:	ed93 7a00 	vldr	s14, [r3]
 8002476:	ee77 7a67 	vsub.f32	s15, s14, s15
 800247a:	edc7 7a50 	vstr	s15, [r7, #320]	; 0x140
	int voltInt2 = trunc(voltF * 100);
 800247e:	edd7 7a50 	vldr	s15, [r7, #320]	; 0x140
 8002482:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 800278c <send_to_cloud+0x48c>
 8002486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800248a:	ee17 0a90 	vmov	r0, s15
 800248e:	f7fe f893 	bl	80005b8 <__aeabi_f2d>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	ec43 2b10 	vmov	d0, r2, r3
 800249a:	f008 ffdd 	bl	800b458 <trunc>
 800249e:	ec53 2b10 	vmov	r2, r3, d0
 80024a2:	4610      	mov	r0, r2
 80024a4:	4619      	mov	r1, r3
 80024a6:	f7fe faf1 	bl	8000a8c <__aeabi_d2iz>
 80024aa:	4603      	mov	r3, r0
 80024ac:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

	int curInt1 = current;
 80024b0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80024b4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80024b8:	edd3 7a00 	vldr	s15, [r3]
 80024bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024c0:	ee17 3a90 	vmov	r3, s15
 80024c4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	float curF = current - curInt1;
 80024c8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80024cc:	ee07 3a90 	vmov	s15, r3
 80024d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024d4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80024d8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80024dc:	ed93 7a00 	vldr	s14, [r3]
 80024e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024e4:	edc7 7a4d 	vstr	s15, [r7, #308]	; 0x134
    int curInt2 = trunc(curF * 100);
 80024e8:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 80024ec:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 800278c <send_to_cloud+0x48c>
 80024f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024f4:	ee17 0a90 	vmov	r0, s15
 80024f8:	f7fe f85e 	bl	80005b8 <__aeabi_f2d>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	ec43 2b10 	vmov	d0, r2, r3
 8002504:	f008 ffa8 	bl	800b458 <trunc>
 8002508:	ec53 2b10 	vmov	r2, r3, d0
 800250c:	4610      	mov	r0, r2
 800250e:	4619      	mov	r1, r3
 8002510:	f7fe fabc 	bl	8000a8c <__aeabi_d2iz>
 8002514:	4603      	mov	r3, r0
 8002516:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

    int powInt1 = power;
 800251a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800251e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002522:	edd3 7a00 	vldr	s15, [r3]
 8002526:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800252a:	ee17 3a90 	vmov	r3, s15
 800252e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    float powF = power - powInt1;
 8002532:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002536:	ee07 3a90 	vmov	s15, r3
 800253a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800253e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002542:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002546:	ed93 7a00 	vldr	s14, [r3]
 800254a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800254e:	edc7 7a4a 	vstr	s15, [r7, #296]	; 0x128
    int powInt2 = trunc(powF * 100);
 8002552:	edd7 7a4a 	vldr	s15, [r7, #296]	; 0x128
 8002556:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800278c <send_to_cloud+0x48c>
 800255a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800255e:	ee17 0a90 	vmov	r0, s15
 8002562:	f7fe f829 	bl	80005b8 <__aeabi_f2d>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	ec43 2b10 	vmov	d0, r2, r3
 800256e:	f008 ff73 	bl	800b458 <trunc>
 8002572:	ec53 2b10 	vmov	r2, r3, d0
 8002576:	4610      	mov	r0, r2
 8002578:	4619      	mov	r1, r3
 800257a:	f7fe fa87 	bl	8000a8c <__aeabi_d2iz>
 800257e:	4603      	mov	r3, r0
 8002580:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

    int enrgInt1 = energy;
 8002584:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002588:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800258c:	edd3 7a00 	vldr	s15, [r3]
 8002590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002594:	ee17 3a90 	vmov	r3, s15
 8002598:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    float enrgF = energy - enrgInt1;
 800259c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80025a0:	ee07 3a90 	vmov	s15, r3
 80025a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025a8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80025ac:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80025b0:	ed93 7a00 	vldr	s14, [r3]
 80025b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025b8:	edc7 7a47 	vstr	s15, [r7, #284]	; 0x11c
    int enrgInt2 = trunc(enrgF * 100);
 80025bc:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 80025c0:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800278c <send_to_cloud+0x48c>
 80025c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025c8:	ee17 0a90 	vmov	r0, s15
 80025cc:	f7fd fff4 	bl	80005b8 <__aeabi_f2d>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	ec43 2b10 	vmov	d0, r2, r3
 80025d8:	f008 ff3e 	bl	800b458 <trunc>
 80025dc:	ec53 2b10 	vmov	r2, r3, d0
 80025e0:	4610      	mov	r0, r2
 80025e2:	4619      	mov	r1, r3
 80025e4:	f7fe fa52 	bl	8000a8c <__aeabi_d2iz>
 80025e8:	4603      	mov	r3, r0
 80025ea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    int freqInt1 = frequency;
 80025ee:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80025f2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80025f6:	edd3 7a00 	vldr	s15, [r3]
 80025fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025fe:	ee17 3a90 	vmov	r3, s15
 8002602:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    float freqF = frequency - freqInt1;
 8002606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800260a:	ee07 3a90 	vmov	s15, r3
 800260e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002612:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002616:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800261a:	ed93 7a00 	vldr	s14, [r3]
 800261e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002622:	edc7 7a44 	vstr	s15, [r7, #272]	; 0x110
    int freqInt2 = trunc(freqF * 100);
 8002626:	edd7 7a44 	vldr	s15, [r7, #272]	; 0x110
 800262a:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800278c <send_to_cloud+0x48c>
 800262e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002632:	ee17 0a90 	vmov	r0, s15
 8002636:	f7fd ffbf 	bl	80005b8 <__aeabi_f2d>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	ec43 2b10 	vmov	d0, r2, r3
 8002642:	f008 ff09 	bl	800b458 <trunc>
 8002646:	ec53 2b10 	vmov	r2, r3, d0
 800264a:	4610      	mov	r0, r2
 800264c:	4619      	mov	r1, r3
 800264e:	f7fe fa1d 	bl	8000a8c <__aeabi_d2iz>
 8002652:	4603      	mov	r3, r0
 8002654:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

    int pfInt1 = pf;
 8002658:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800265c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002660:	edd3 7a00 	vldr	s15, [r3]
 8002664:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002668:	ee17 3a90 	vmov	r3, s15
 800266c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    float pfF = pf - pfInt1;
 8002670:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002674:	ee07 3a90 	vmov	s15, r3
 8002678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800267c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002680:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002684:	ed93 7a00 	vldr	s14, [r3]
 8002688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800268c:	edc7 7a41 	vstr	s15, [r7, #260]	; 0x104
    int pfInt2 = trunc(pfF * 100);
 8002690:	edd7 7a41 	vldr	s15, [r7, #260]	; 0x104
 8002694:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800278c <send_to_cloud+0x48c>
 8002698:	ee67 7a87 	vmul.f32	s15, s15, s14
 800269c:	ee17 0a90 	vmov	r0, s15
 80026a0:	f7fd ff8a 	bl	80005b8 <__aeabi_f2d>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	ec43 2b10 	vmov	d0, r2, r3
 80026ac:	f008 fed4 	bl	800b458 <trunc>
 80026b0:	ec53 2b10 	vmov	r2, r3, d0
 80026b4:	4610      	mov	r0, r2
 80026b6:	4619      	mov	r1, r3
 80026b8:	f7fe f9e8 	bl	8000a8c <__aeabi_d2iz>
 80026bc:	4603      	mov	r3, r0
 80026be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

    int vocInt1 = voc;
 80026c2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80026c6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80026ca:	edd3 7a00 	vldr	s15, [r3]
 80026ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026d2:	ee17 3a90 	vmov	r3, s15
 80026d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    float vocF = voc - vocInt1;
 80026da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026de:	ee07 3a90 	vmov	s15, r3
 80026e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026e6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80026ea:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80026ee:	ed93 7a00 	vldr	s14, [r3]
 80026f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026f6:	edc7 7a3e 	vstr	s15, [r7, #248]	; 0xf8
    int vocInt2 = trunc(vocF * 100);
 80026fa:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 80026fe:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800278c <send_to_cloud+0x48c>
 8002702:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002706:	ee17 0a90 	vmov	r0, s15
 800270a:	f7fd ff55 	bl	80005b8 <__aeabi_f2d>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	ec43 2b10 	vmov	d0, r2, r3
 8002716:	f008 fe9f 	bl	800b458 <trunc>
 800271a:	ec53 2b10 	vmov	r2, r3, d0
 800271e:	4610      	mov	r0, r2
 8002720:	4619      	mov	r1, r3
 8002722:	f7fe f9b3 	bl	8000a8c <__aeabi_d2iz>
 8002726:	4603      	mov	r3, r0
 8002728:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    char data_array[200];
    snprintf(data_array, sizeof(data_array), "%d.%d,%d.%d,%d.%d,%d.%d,%d.%d,%d.%d,%d.%d,%d.%d,%d.%d",
 800272c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002734:	9310      	str	r3, [sp, #64]	; 0x40
 8002736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800273a:	930f      	str	r3, [sp, #60]	; 0x3c
 800273c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002740:	930e      	str	r3, [sp, #56]	; 0x38
 8002742:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002746:	930d      	str	r3, [sp, #52]	; 0x34
 8002748:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800274c:	930c      	str	r3, [sp, #48]	; 0x30
 800274e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002752:	930b      	str	r3, [sp, #44]	; 0x2c
 8002754:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002758:	930a      	str	r3, [sp, #40]	; 0x28
 800275a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800275e:	9309      	str	r3, [sp, #36]	; 0x24
 8002760:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002764:	9308      	str	r3, [sp, #32]
 8002766:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800276a:	9307      	str	r3, [sp, #28]
 800276c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002770:	9306      	str	r3, [sp, #24]
 8002772:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002776:	9305      	str	r3, [sp, #20]
 8002778:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800277c:	9304      	str	r3, [sp, #16]
 800277e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002782:	9303      	str	r3, [sp, #12]
 8002784:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002788:	e002      	b.n	8002790 <send_to_cloud+0x490>
 800278a:	bf00      	nop
 800278c:	42c80000 	.word	0x42c80000
 8002790:	9302      	str	r3, [sp, #8]
 8002792:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002796:	9301      	str	r3, [sp, #4]
 8002798:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80027a2:	4a09      	ldr	r2, [pc, #36]	; (80027c8 <send_to_cloud+0x4c8>)
 80027a4:	21c8      	movs	r1, #200	; 0xc8
 80027a6:	f009 f909 	bl	800b9bc <sniprintf>
    		tempInt1, tempInt2, humidInt1, humidInt2, voltInt1, voltInt2, curInt1, curInt2, powInt1, powInt2, enrgInt1, enrgInt2,
			freqInt1, freqInt2, pfInt1, pfInt2, vocInt1, vocInt2);
    printf("%s\n", data_array);
 80027aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027ae:	4618      	mov	r0, r3
 80027b0:	f009 f8fc 	bl	800b9ac <puts>
    mqtt_publish(data_array);
 80027b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 fd7d 	bl	80032b8 <mqtt_publish>

}
 80027be:	bf00      	nop
 80027c0:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	0800c7dc 	.word	0x0800c7dc

080027cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80027d0:	b672      	cpsid	i
}
 80027d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027d4:	e7fe      	b.n	80027d4 <Error_Handler+0x8>
	...

080027d8 <read_pzem004t>:
uint8_t buf[8] = {0xF8, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x64, 0x64};
uint8_t rst_buf[4] = {0xF8, 0x42, 0xC2, 0x41};
uint8_t res_buf[25];

void read_pzem004t(pzem_values *currentValues, UART_HandleTypeDef *huart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
	currentValues->huart = huart;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	61da      	str	r2, [r3, #28]
	HAL_Delay(100);
 80027e8:	2064      	movs	r0, #100	; 0x64
 80027ea:	f000 fe5f 	bl	80034ac <HAL_Delay>
    HAL_UART_Transmit(currentValues->huart, (uint8_t*) &rst_buf, 4, 10);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69d8      	ldr	r0, [r3, #28]
 80027f2:	230a      	movs	r3, #10
 80027f4:	2204      	movs	r2, #4
 80027f6:	4966      	ldr	r1, [pc, #408]	; (8002990 <read_pzem004t+0x1b8>)
 80027f8:	f004 f9da 	bl	8006bb0 <HAL_UART_Transmit>
    HAL_UART_Receive(currentValues->huart, res_buf, 25, 250);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	69d8      	ldr	r0, [r3, #28]
 8002800:	23fa      	movs	r3, #250	; 0xfa
 8002802:	2219      	movs	r2, #25
 8002804:	4963      	ldr	r1, [pc, #396]	; (8002994 <read_pzem004t+0x1bc>)
 8002806:	f004 fa56 	bl	8006cb6 <HAL_UART_Receive>
    HAL_Delay(100);
 800280a:	2064      	movs	r0, #100	; 0x64
 800280c:	f000 fe4e 	bl	80034ac <HAL_Delay>
    HAL_UART_Transmit(currentValues->huart, (uint8_t*) &buf, 8, 20);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69d8      	ldr	r0, [r3, #28]
 8002814:	2314      	movs	r3, #20
 8002816:	2208      	movs	r2, #8
 8002818:	495f      	ldr	r1, [pc, #380]	; (8002998 <read_pzem004t+0x1c0>)
 800281a:	f004 f9c9 	bl	8006bb0 <HAL_UART_Transmit>
	HAL_UART_Receive(currentValues->huart, res_buf, 25, 250);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69d8      	ldr	r0, [r3, #28]
 8002822:	23fa      	movs	r3, #250	; 0xfa
 8002824:	2219      	movs	r2, #25
 8002826:	495b      	ldr	r1, [pc, #364]	; (8002994 <read_pzem004t+0x1bc>)
 8002828:	f004 fa45 	bl	8006cb6 <HAL_UART_Receive>

	currentValues->voltage = ((uint32_t) res_buf[3] << 8 | (uint32_t) res_buf[4]) / 10;
 800282c:	4b59      	ldr	r3, [pc, #356]	; (8002994 <read_pzem004t+0x1bc>)
 800282e:	78db      	ldrb	r3, [r3, #3]
 8002830:	021b      	lsls	r3, r3, #8
 8002832:	4a58      	ldr	r2, [pc, #352]	; (8002994 <read_pzem004t+0x1bc>)
 8002834:	7912      	ldrb	r2, [r2, #4]
 8002836:	4313      	orrs	r3, r2
 8002838:	4a58      	ldr	r2, [pc, #352]	; (800299c <read_pzem004t+0x1c4>)
 800283a:	fba2 2303 	umull	r2, r3, r2, r3
 800283e:	08db      	lsrs	r3, r3, #3
 8002840:	ee07 3a90 	vmov	s15, r3
 8002844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	edc3 7a00 	vstr	s15, [r3]
	currentValues->current = ((uint32_t) res_buf[5] << 8 | (uint32_t) res_buf[6] | (uint32_t) res_buf[7] << 24 |
 800284e:	4b51      	ldr	r3, [pc, #324]	; (8002994 <read_pzem004t+0x1bc>)
 8002850:	795b      	ldrb	r3, [r3, #5]
 8002852:	021b      	lsls	r3, r3, #8
 8002854:	4a4f      	ldr	r2, [pc, #316]	; (8002994 <read_pzem004t+0x1bc>)
 8002856:	7992      	ldrb	r2, [r2, #6]
 8002858:	431a      	orrs	r2, r3
 800285a:	4b4e      	ldr	r3, [pc, #312]	; (8002994 <read_pzem004t+0x1bc>)
 800285c:	79db      	ldrb	r3, [r3, #7]
 800285e:	061b      	lsls	r3, r3, #24
 8002860:	431a      	orrs	r2, r3
							(uint32_t) res_buf[8] << 16) / 1000.0;
 8002862:	4b4c      	ldr	r3, [pc, #304]	; (8002994 <read_pzem004t+0x1bc>)
 8002864:	7a1b      	ldrb	r3, [r3, #8]
 8002866:	041b      	lsls	r3, r3, #16
	currentValues->current = ((uint32_t) res_buf[5] << 8 | (uint32_t) res_buf[6] | (uint32_t) res_buf[7] << 24 |
 8002868:	4313      	orrs	r3, r2
							(uint32_t) res_buf[8] << 16) / 1000.0;
 800286a:	4618      	mov	r0, r3
 800286c:	f7fd fe82 	bl	8000574 <__aeabi_ui2d>
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	4b4a      	ldr	r3, [pc, #296]	; (80029a0 <read_pzem004t+0x1c8>)
 8002876:	f7fe f821 	bl	80008bc <__aeabi_ddiv>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	f7fe f92b 	bl	8000adc <__aeabi_d2f>
 8002886:	4602      	mov	r2, r0
	currentValues->current = ((uint32_t) res_buf[5] << 8 | (uint32_t) res_buf[6] | (uint32_t) res_buf[7] << 24 |
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	605a      	str	r2, [r3, #4]
	currentValues->power = ((uint32_t) res_buf[9] << 8 | (uint32_t) res_buf[10] | (uint32_t) res_buf[11] << 24 |
 800288c:	4b41      	ldr	r3, [pc, #260]	; (8002994 <read_pzem004t+0x1bc>)
 800288e:	7a5b      	ldrb	r3, [r3, #9]
 8002890:	021b      	lsls	r3, r3, #8
 8002892:	4a40      	ldr	r2, [pc, #256]	; (8002994 <read_pzem004t+0x1bc>)
 8002894:	7a92      	ldrb	r2, [r2, #10]
 8002896:	431a      	orrs	r2, r3
 8002898:	4b3e      	ldr	r3, [pc, #248]	; (8002994 <read_pzem004t+0x1bc>)
 800289a:	7adb      	ldrb	r3, [r3, #11]
 800289c:	061b      	lsls	r3, r3, #24
 800289e:	431a      	orrs	r2, r3
						  (uint32_t) res_buf[12] << 16) / 10.0;
 80028a0:	4b3c      	ldr	r3, [pc, #240]	; (8002994 <read_pzem004t+0x1bc>)
 80028a2:	7b1b      	ldrb	r3, [r3, #12]
 80028a4:	041b      	lsls	r3, r3, #16
	currentValues->power = ((uint32_t) res_buf[9] << 8 | (uint32_t) res_buf[10] | (uint32_t) res_buf[11] << 24 |
 80028a6:	4313      	orrs	r3, r2
						  (uint32_t) res_buf[12] << 16) / 10.0;
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fd fe63 	bl	8000574 <__aeabi_ui2d>
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	4b3c      	ldr	r3, [pc, #240]	; (80029a4 <read_pzem004t+0x1cc>)
 80028b4:	f7fe f802 	bl	80008bc <__aeabi_ddiv>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4610      	mov	r0, r2
 80028be:	4619      	mov	r1, r3
 80028c0:	f7fe f90c 	bl	8000adc <__aeabi_d2f>
 80028c4:	4602      	mov	r2, r0
	currentValues->power = ((uint32_t) res_buf[9] << 8 | (uint32_t) res_buf[10] | (uint32_t) res_buf[11] << 24 |
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	609a      	str	r2, [r3, #8]
	currentValues->energy = ((uint32_t) res_buf[13] << 8 | (uint32_t) res_buf[14] | (uint32_t) res_buf[15] << 24 |
 80028ca:	4b32      	ldr	r3, [pc, #200]	; (8002994 <read_pzem004t+0x1bc>)
 80028cc:	7b5b      	ldrb	r3, [r3, #13]
 80028ce:	021b      	lsls	r3, r3, #8
 80028d0:	4a30      	ldr	r2, [pc, #192]	; (8002994 <read_pzem004t+0x1bc>)
 80028d2:	7b92      	ldrb	r2, [r2, #14]
 80028d4:	431a      	orrs	r2, r3
 80028d6:	4b2f      	ldr	r3, [pc, #188]	; (8002994 <read_pzem004t+0x1bc>)
 80028d8:	7bdb      	ldrb	r3, [r3, #15]
 80028da:	061b      	lsls	r3, r3, #24
 80028dc:	431a      	orrs	r2, r3
						   (uint32_t) res_buf[16] << 16) / 1000.0;
 80028de:	4b2d      	ldr	r3, [pc, #180]	; (8002994 <read_pzem004t+0x1bc>)
 80028e0:	7c1b      	ldrb	r3, [r3, #16]
 80028e2:	041b      	lsls	r3, r3, #16
	currentValues->energy = ((uint32_t) res_buf[13] << 8 | (uint32_t) res_buf[14] | (uint32_t) res_buf[15] << 24 |
 80028e4:	4313      	orrs	r3, r2
						   (uint32_t) res_buf[16] << 16) / 1000.0;
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fd fe44 	bl	8000574 <__aeabi_ui2d>
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	4b2b      	ldr	r3, [pc, #172]	; (80029a0 <read_pzem004t+0x1c8>)
 80028f2:	f7fd ffe3 	bl	80008bc <__aeabi_ddiv>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4610      	mov	r0, r2
 80028fc:	4619      	mov	r1, r3
 80028fe:	f7fe f8ed 	bl	8000adc <__aeabi_d2f>
 8002902:	4602      	mov	r2, r0
	currentValues->energy = ((uint32_t) res_buf[13] << 8 | (uint32_t) res_buf[14] | (uint32_t) res_buf[15] << 24 |
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	60da      	str	r2, [r3, #12]
	currentValues->frequency = ((uint32_t) res_buf[17] << 8 | (uint32_t) res_buf[18]) / 10.0;
 8002908:	4b22      	ldr	r3, [pc, #136]	; (8002994 <read_pzem004t+0x1bc>)
 800290a:	7c5b      	ldrb	r3, [r3, #17]
 800290c:	021b      	lsls	r3, r3, #8
 800290e:	4a21      	ldr	r2, [pc, #132]	; (8002994 <read_pzem004t+0x1bc>)
 8002910:	7c92      	ldrb	r2, [r2, #18]
 8002912:	4313      	orrs	r3, r2
 8002914:	4618      	mov	r0, r3
 8002916:	f7fd fe2d 	bl	8000574 <__aeabi_ui2d>
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	4b21      	ldr	r3, [pc, #132]	; (80029a4 <read_pzem004t+0x1cc>)
 8002920:	f7fd ffcc 	bl	80008bc <__aeabi_ddiv>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4610      	mov	r0, r2
 800292a:	4619      	mov	r1, r3
 800292c:	f7fe f8d6 	bl	8000adc <__aeabi_d2f>
 8002930:	4602      	mov	r2, r0
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	611a      	str	r2, [r3, #16]
	currentValues->pf = ((uint32_t) res_buf[19] << 8 | (uint32_t) res_buf[20]) / 100.0;
 8002936:	4b17      	ldr	r3, [pc, #92]	; (8002994 <read_pzem004t+0x1bc>)
 8002938:	7cdb      	ldrb	r3, [r3, #19]
 800293a:	021b      	lsls	r3, r3, #8
 800293c:	4a15      	ldr	r2, [pc, #84]	; (8002994 <read_pzem004t+0x1bc>)
 800293e:	7d12      	ldrb	r2, [r2, #20]
 8002940:	4313      	orrs	r3, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f7fd fe16 	bl	8000574 <__aeabi_ui2d>
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	4b16      	ldr	r3, [pc, #88]	; (80029a8 <read_pzem004t+0x1d0>)
 800294e:	f7fd ffb5 	bl	80008bc <__aeabi_ddiv>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4610      	mov	r0, r2
 8002958:	4619      	mov	r1, r3
 800295a:	f7fe f8bf 	bl	8000adc <__aeabi_d2f>
 800295e:	4602      	mov	r2, r0
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	615a      	str	r2, [r3, #20]
	currentValues->alarms = ((uint32_t) res_buf[21] << 8 | (uint32_t) res_buf[22]);
 8002964:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <read_pzem004t+0x1bc>)
 8002966:	7d5b      	ldrb	r3, [r3, #21]
 8002968:	b29b      	uxth	r3, r3
 800296a:	021b      	lsls	r3, r3, #8
 800296c:	b29a      	uxth	r2, r3
 800296e:	4b09      	ldr	r3, [pc, #36]	; (8002994 <read_pzem004t+0x1bc>)
 8002970:	7d9b      	ldrb	r3, [r3, #22]
 8002972:	b29b      	uxth	r3, r3
 8002974:	4313      	orrs	r3, r2
 8002976:	b29a      	uxth	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	831a      	strh	r2, [r3, #24]

	memset(res_buf,0,sizeof(res_buf));
 800297c:	2219      	movs	r2, #25
 800297e:	2100      	movs	r1, #0
 8002980:	4804      	ldr	r0, [pc, #16]	; (8002994 <read_pzem004t+0x1bc>)
 8002982:	f009 f927 	bl	800bbd4 <memset>

}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000024 	.word	0x20000024
 8002994:	20000410 	.word	0x20000410
 8002998:	2000001c 	.word	0x2000001c
 800299c:	cccccccd 	.word	0xcccccccd
 80029a0:	408f4000 	.word	0x408f4000
 80029a4:	40240000 	.word	0x40240000
 80029a8:	40590000 	.word	0x40590000

080029ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80029b2:	4b0f      	ldr	r3, [pc, #60]	; (80029f0 <HAL_MspInit+0x44>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	4a0e      	ldr	r2, [pc, #56]	; (80029f0 <HAL_MspInit+0x44>)
 80029b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029bc:	6413      	str	r3, [r2, #64]	; 0x40
 80029be:	4b0c      	ldr	r3, [pc, #48]	; (80029f0 <HAL_MspInit+0x44>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c6:	607b      	str	r3, [r7, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ca:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <HAL_MspInit+0x44>)
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	4a08      	ldr	r2, [pc, #32]	; (80029f0 <HAL_MspInit+0x44>)
 80029d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029d4:	6453      	str	r3, [r2, #68]	; 0x44
 80029d6:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <HAL_MspInit+0x44>)
 80029d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029de:	603b      	str	r3, [r7, #0]
 80029e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40023800 	.word	0x40023800

080029f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08a      	sub	sp, #40	; 0x28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029fc:	f107 0314 	add.w	r3, r7, #20
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	60da      	str	r2, [r3, #12]
 8002a0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a2d      	ldr	r2, [pc, #180]	; (8002ac8 <HAL_ADC_MspInit+0xd4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d153      	bne.n	8002abe <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a16:	4b2d      	ldr	r3, [pc, #180]	; (8002acc <HAL_ADC_MspInit+0xd8>)
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	4a2c      	ldr	r2, [pc, #176]	; (8002acc <HAL_ADC_MspInit+0xd8>)
 8002a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a20:	6453      	str	r3, [r2, #68]	; 0x44
 8002a22:	4b2a      	ldr	r3, [pc, #168]	; (8002acc <HAL_ADC_MspInit+0xd8>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2e:	4b27      	ldr	r3, [pc, #156]	; (8002acc <HAL_ADC_MspInit+0xd8>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	4a26      	ldr	r2, [pc, #152]	; (8002acc <HAL_ADC_MspInit+0xd8>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3a:	4b24      	ldr	r3, [pc, #144]	; (8002acc <HAL_ADC_MspInit+0xd8>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = AIR_QUALITY_Pin;
 8002a46:	2308      	movs	r3, #8
 8002a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AIR_QUALITY_GPIO_Port, &GPIO_InitStruct);
 8002a52:	f107 0314 	add.w	r3, r7, #20
 8002a56:	4619      	mov	r1, r3
 8002a58:	481d      	ldr	r0, [pc, #116]	; (8002ad0 <HAL_ADC_MspInit+0xdc>)
 8002a5a:	f001 fdff 	bl	800465c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002a5e:	4b1d      	ldr	r3, [pc, #116]	; (8002ad4 <HAL_ADC_MspInit+0xe0>)
 8002a60:	4a1d      	ldr	r2, [pc, #116]	; (8002ad8 <HAL_ADC_MspInit+0xe4>)
 8002a62:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002a64:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <HAL_ADC_MspInit+0xe0>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a6a:	4b1a      	ldr	r3, [pc, #104]	; (8002ad4 <HAL_ADC_MspInit+0xe0>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a70:	4b18      	ldr	r3, [pc, #96]	; (8002ad4 <HAL_ADC_MspInit+0xe0>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a76:	4b17      	ldr	r3, [pc, #92]	; (8002ad4 <HAL_ADC_MspInit+0xe0>)
 8002a78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a7c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a7e:	4b15      	ldr	r3, [pc, #84]	; (8002ad4 <HAL_ADC_MspInit+0xe0>)
 8002a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a84:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a86:	4b13      	ldr	r3, [pc, #76]	; (8002ad4 <HAL_ADC_MspInit+0xe0>)
 8002a88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a8c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002a8e:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <HAL_ADC_MspInit+0xe0>)
 8002a90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a94:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002a96:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <HAL_ADC_MspInit+0xe0>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a9c:	4b0d      	ldr	r3, [pc, #52]	; (8002ad4 <HAL_ADC_MspInit+0xe0>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002aa2:	480c      	ldr	r0, [pc, #48]	; (8002ad4 <HAL_ADC_MspInit+0xe0>)
 8002aa4:	f001 fa62 	bl	8003f6c <HAL_DMA_Init>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8002aae:	f7ff fe8d 	bl	80027cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a07      	ldr	r2, [pc, #28]	; (8002ad4 <HAL_ADC_MspInit+0xe0>)
 8002ab6:	639a      	str	r2, [r3, #56]	; 0x38
 8002ab8:	4a06      	ldr	r2, [pc, #24]	; (8002ad4 <HAL_ADC_MspInit+0xe0>)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002abe:	bf00      	nop
 8002ac0:	3728      	adds	r7, #40	; 0x28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40012000 	.word	0x40012000
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	40020000 	.word	0x40020000
 8002ad4:	2000019c 	.word	0x2000019c
 8002ad8:	40026410 	.word	0x40026410

08002adc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08a      	sub	sp, #40	; 0x28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae4:	f107 0314 	add.w	r3, r7, #20
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
 8002af2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a17      	ldr	r2, [pc, #92]	; (8002b58 <HAL_SPI_MspInit+0x7c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d127      	bne.n	8002b4e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002afe:	4b17      	ldr	r3, [pc, #92]	; (8002b5c <HAL_SPI_MspInit+0x80>)
 8002b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b02:	4a16      	ldr	r2, [pc, #88]	; (8002b5c <HAL_SPI_MspInit+0x80>)
 8002b04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b08:	6453      	str	r3, [r2, #68]	; 0x44
 8002b0a:	4b14      	ldr	r3, [pc, #80]	; (8002b5c <HAL_SPI_MspInit+0x80>)
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b12:	613b      	str	r3, [r7, #16]
 8002b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b16:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <HAL_SPI_MspInit+0x80>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	4a10      	ldr	r2, [pc, #64]	; (8002b5c <HAL_SPI_MspInit+0x80>)
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	6313      	str	r3, [r2, #48]	; 0x30
 8002b22:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <HAL_SPI_MspInit+0x80>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002b2e:	23e0      	movs	r3, #224	; 0xe0
 8002b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b32:	2302      	movs	r3, #2
 8002b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b36:	2300      	movs	r3, #0
 8002b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b3e:	2305      	movs	r3, #5
 8002b40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b42:	f107 0314 	add.w	r3, r7, #20
 8002b46:	4619      	mov	r1, r3
 8002b48:	4805      	ldr	r0, [pc, #20]	; (8002b60 <HAL_SPI_MspInit+0x84>)
 8002b4a:	f001 fd87 	bl	800465c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b4e:	bf00      	nop
 8002b50:	3728      	adds	r7, #40	; 0x28
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40013000 	.word	0x40013000
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	40020000 	.word	0x40020000

08002b64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a0a      	ldr	r2, [pc, #40]	; (8002b9c <HAL_TIM_Base_MspInit+0x38>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d10b      	bne.n	8002b8e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002b76:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <HAL_TIM_Base_MspInit+0x3c>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	4a09      	ldr	r2, [pc, #36]	; (8002ba0 <HAL_TIM_Base_MspInit+0x3c>)
 8002b7c:	f043 0310 	orr.w	r3, r3, #16
 8002b80:	6413      	str	r3, [r2, #64]	; 0x40
 8002b82:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <HAL_TIM_Base_MspInit+0x3c>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	f003 0310 	and.w	r3, r3, #16
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002b8e:	bf00      	nop
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40001000 	.word	0x40001000
 8002ba0:	40023800 	.word	0x40023800

08002ba4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b0ac      	sub	sp, #176	; 0xb0
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	60da      	str	r2, [r3, #12]
 8002bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bbc:	f107 031c 	add.w	r3, r7, #28
 8002bc0:	2280      	movs	r2, #128	; 0x80
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f009 f805 	bl	800bbd4 <memset>
  if(huart->Instance==USART3)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a43      	ldr	r2, [pc, #268]	; (8002cdc <HAL_UART_MspInit+0x138>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d13d      	bne.n	8002c50 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002bd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bd8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bde:	f107 031c 	add.w	r3, r7, #28
 8002be2:	4618      	mov	r0, r3
 8002be4:	f002 fc32 	bl	800544c <HAL_RCCEx_PeriphCLKConfig>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002bee:	f7ff fded 	bl	80027cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002bf2:	4b3b      	ldr	r3, [pc, #236]	; (8002ce0 <HAL_UART_MspInit+0x13c>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	4a3a      	ldr	r2, [pc, #232]	; (8002ce0 <HAL_UART_MspInit+0x13c>)
 8002bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bfe:	4b38      	ldr	r3, [pc, #224]	; (8002ce0 <HAL_UART_MspInit+0x13c>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c06:	61bb      	str	r3, [r7, #24]
 8002c08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c0a:	4b35      	ldr	r3, [pc, #212]	; (8002ce0 <HAL_UART_MspInit+0x13c>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	4a34      	ldr	r2, [pc, #208]	; (8002ce0 <HAL_UART_MspInit+0x13c>)
 8002c10:	f043 0304 	orr.w	r3, r3, #4
 8002c14:	6313      	str	r3, [r2, #48]	; 0x30
 8002c16:	4b32      	ldr	r3, [pc, #200]	; (8002ce0 <HAL_UART_MspInit+0x13c>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002c22:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002c26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c36:	2303      	movs	r3, #3
 8002c38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c3c:	2307      	movs	r3, #7
 8002c3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c42:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c46:	4619      	mov	r1, r3
 8002c48:	4826      	ldr	r0, [pc, #152]	; (8002ce4 <HAL_UART_MspInit+0x140>)
 8002c4a:	f001 fd07 	bl	800465c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002c4e:	e040      	b.n	8002cd2 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART6)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a24      	ldr	r2, [pc, #144]	; (8002ce8 <HAL_UART_MspInit+0x144>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d13b      	bne.n	8002cd2 <HAL_UART_MspInit+0x12e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002c5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c5e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002c60:	2300      	movs	r3, #0
 8002c62:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c64:	f107 031c 	add.w	r3, r7, #28
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f002 fbef 	bl	800544c <HAL_RCCEx_PeriphCLKConfig>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8002c74:	f7ff fdaa 	bl	80027cc <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002c78:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <HAL_UART_MspInit+0x13c>)
 8002c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7c:	4a18      	ldr	r2, [pc, #96]	; (8002ce0 <HAL_UART_MspInit+0x13c>)
 8002c7e:	f043 0320 	orr.w	r3, r3, #32
 8002c82:	6453      	str	r3, [r2, #68]	; 0x44
 8002c84:	4b16      	ldr	r3, [pc, #88]	; (8002ce0 <HAL_UART_MspInit+0x13c>)
 8002c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c90:	4b13      	ldr	r3, [pc, #76]	; (8002ce0 <HAL_UART_MspInit+0x13c>)
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	4a12      	ldr	r2, [pc, #72]	; (8002ce0 <HAL_UART_MspInit+0x13c>)
 8002c96:	f043 0304 	orr.w	r3, r3, #4
 8002c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9c:	4b10      	ldr	r3, [pc, #64]	; (8002ce0 <HAL_UART_MspInit+0x13c>)
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ca8:	23c0      	movs	r3, #192	; 0xc0
 8002caa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002cc0:	2308      	movs	r3, #8
 8002cc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cc6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4805      	ldr	r0, [pc, #20]	; (8002ce4 <HAL_UART_MspInit+0x140>)
 8002cce:	f001 fcc5 	bl	800465c <HAL_GPIO_Init>
}
 8002cd2:	bf00      	nop
 8002cd4:	37b0      	adds	r7, #176	; 0xb0
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40004800 	.word	0x40004800
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	40020800 	.word	0x40020800
 8002ce8:	40011400 	.word	0x40011400

08002cec <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002cf2:	1d3b      	adds	r3, r7, #4
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	60da      	str	r2, [r3, #12]
 8002cfe:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002d00:	4b23      	ldr	r3, [pc, #140]	; (8002d90 <HAL_FMC_MspInit+0xa4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d13f      	bne.n	8002d88 <HAL_FMC_MspInit+0x9c>
    return;
  }
  FMC_Initialized = 1;
 8002d08:	4b21      	ldr	r3, [pc, #132]	; (8002d90 <HAL_FMC_MspInit+0xa4>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002d0e:	4b21      	ldr	r3, [pc, #132]	; (8002d94 <HAL_FMC_MspInit+0xa8>)
 8002d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d12:	4a20      	ldr	r2, [pc, #128]	; (8002d94 <HAL_FMC_MspInit+0xa8>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	6393      	str	r3, [r2, #56]	; 0x38
 8002d1a:	4b1e      	ldr	r3, [pc, #120]	; (8002d94 <HAL_FMC_MspInit+0xa8>)
 8002d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002d26:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8002d2a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d34:	2303      	movs	r3, #3
 8002d36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d38:	230c      	movs	r3, #12
 8002d3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d3c:	1d3b      	adds	r3, r7, #4
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4815      	ldr	r0, [pc, #84]	; (8002d98 <HAL_FMC_MspInit+0xac>)
 8002d42:	f001 fc8b 	bl	800465c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002d46:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002d4a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d54:	2303      	movs	r3, #3
 8002d56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d58:	230c      	movs	r3, #12
 8002d5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d5c:	1d3b      	adds	r3, r7, #4
 8002d5e:	4619      	mov	r1, r3
 8002d60:	480e      	ldr	r0, [pc, #56]	; (8002d9c <HAL_FMC_MspInit+0xb0>)
 8002d62:	f001 fc7b 	bl	800465c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002d66:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8002d6a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d70:	2300      	movs	r3, #0
 8002d72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d74:	2303      	movs	r3, #3
 8002d76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d78:	230c      	movs	r3, #12
 8002d7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d7c:	1d3b      	adds	r3, r7, #4
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4807      	ldr	r0, [pc, #28]	; (8002da0 <HAL_FMC_MspInit+0xb4>)
 8002d82:	f001 fc6b 	bl	800465c <HAL_GPIO_Init>
 8002d86:	e000      	b.n	8002d8a <HAL_FMC_MspInit+0x9e>
    return;
 8002d88:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	2000042c 	.word	0x2000042c
 8002d94:	40023800 	.word	0x40023800
 8002d98:	40021400 	.word	0x40021400
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	40020c00 	.word	0x40020c00

08002da4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002dac:	f7ff ff9e 	bl	8002cec <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002db0:	bf00      	nop
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dbc:	e7fe      	b.n	8002dbc <NMI_Handler+0x4>

08002dbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dc2:	e7fe      	b.n	8002dc2 <HardFault_Handler+0x4>

08002dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dc8:	e7fe      	b.n	8002dc8 <MemManage_Handler+0x4>

08002dca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dce:	e7fe      	b.n	8002dce <BusFault_Handler+0x4>

08002dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dd4:	e7fe      	b.n	8002dd4 <UsageFault_Handler+0x4>

08002dd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dda:	bf00      	nop
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002de8:	bf00      	nop
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002df2:	b480      	push	{r7}
 8002df4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  if(Timer1 > 0)
 8002e04:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <SysTick_Handler+0x38>)
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <SysTick_Handler+0x18>
	Timer1--;
 8002e0c:	4b0a      	ldr	r3, [pc, #40]	; (8002e38 <SysTick_Handler+0x38>)
 8002e0e:	881b      	ldrh	r3, [r3, #0]
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	4b08      	ldr	r3, [pc, #32]	; (8002e38 <SysTick_Handler+0x38>)
 8002e16:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8002e18:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <SysTick_Handler+0x3c>)
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d005      	beq.n	8002e2c <SysTick_Handler+0x2c>
	Timer2--;
 8002e20:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <SysTick_Handler+0x3c>)
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	3b01      	subs	r3, #1
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	4b04      	ldr	r3, [pc, #16]	; (8002e3c <SysTick_Handler+0x3c>)
 8002e2a:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e2c:	f000 fb1e 	bl	800346c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002e30:	f001 f895 	bl	8003f5e <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e34:	bf00      	nop
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	2000014c 	.word	0x2000014c
 8002e3c:	2000014e 	.word	0x2000014e

08002e40 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e44:	4802      	ldr	r0, [pc, #8]	; (8002e50 <DMA2_Stream0_IRQHandler+0x10>)
 8002e46:	f001 f99f 	bl	8004188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	2000019c 	.word	0x2000019c

08002e54 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	e00a      	b.n	8002e7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e66:	f3af 8000 	nop.w
 8002e6a:	4601      	mov	r1, r0
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	1c5a      	adds	r2, r3, #1
 8002e70:	60ba      	str	r2, [r7, #8]
 8002e72:	b2ca      	uxtb	r2, r1
 8002e74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	dbf0      	blt.n	8002e66 <_read+0x12>
  }

  return len;
 8002e84:	687b      	ldr	r3, [r7, #4]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b086      	sub	sp, #24
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	617b      	str	r3, [r7, #20]
 8002e9e:	e009      	b.n	8002eb4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	60ba      	str	r2, [r7, #8]
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fe fe7d 	bl	8001ba8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	dbf1      	blt.n	8002ea0 <_write+0x12>
  }
  return len;
 8002ebc:	687b      	ldr	r3, [r7, #4]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <_close>:

int _close(int file)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ece:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002eee:	605a      	str	r2, [r3, #4]
  return 0;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <_isatty>:

int _isatty(int file)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f06:	2301      	movs	r3, #1
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
	...

08002f30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f38:	4a14      	ldr	r2, [pc, #80]	; (8002f8c <_sbrk+0x5c>)
 8002f3a:	4b15      	ldr	r3, [pc, #84]	; (8002f90 <_sbrk+0x60>)
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f44:	4b13      	ldr	r3, [pc, #76]	; (8002f94 <_sbrk+0x64>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d102      	bne.n	8002f52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f4c:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <_sbrk+0x64>)
 8002f4e:	4a12      	ldr	r2, [pc, #72]	; (8002f98 <_sbrk+0x68>)
 8002f50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f52:	4b10      	ldr	r3, [pc, #64]	; (8002f94 <_sbrk+0x64>)
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4413      	add	r3, r2
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d207      	bcs.n	8002f70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f60:	f008 fea8 	bl	800bcb4 <__errno>
 8002f64:	4603      	mov	r3, r0
 8002f66:	220c      	movs	r2, #12
 8002f68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6e:	e009      	b.n	8002f84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f70:	4b08      	ldr	r3, [pc, #32]	; (8002f94 <_sbrk+0x64>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f76:	4b07      	ldr	r3, [pc, #28]	; (8002f94 <_sbrk+0x64>)
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	4a05      	ldr	r2, [pc, #20]	; (8002f94 <_sbrk+0x64>)
 8002f80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f82:	68fb      	ldr	r3, [r7, #12]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3718      	adds	r7, #24
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	20040000 	.word	0x20040000
 8002f90:	00008000 	.word	0x00008000
 8002f94:	20000430 	.word	0x20000430
 8002f98:	20001660 	.word	0x20001660

08002f9c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fa0:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <SystemInit+0x20>)
 8002fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa6:	4a05      	ldr	r2, [pc, #20]	; (8002fbc <SystemInit+0x20>)
 8002fa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fb0:	bf00      	nop
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	e000ed00 	.word	0xe000ed00

08002fc0 <repeating_timer_callback>:
 * Functions
 * ----------------------------------------------------------------------------------------------------
 */

static void repeating_timer_callback(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  MilliTimer_Handler();
 8002fc4:	f007 f8a2 	bl	800a10c <MilliTimer_Handler>
}
 8002fc8:	bf00      	nop
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <message_arrived>:


static void message_arrived(MessageData *msg_data)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  MQTTMessage *message = msg_data->message;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	60fb      	str	r3, [r7, #12]

  printf("%.*s receive\n", (uint32_t)message->payloadlen, (uint8_t *)message->payload);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	68d9      	ldr	r1, [r3, #12]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	4868      	ldr	r0, [pc, #416]	; (8003188 <message_arrived+0x1bc>)
 8002fe6:	f008 fc7b 	bl	800b8e0 <iprintf>

  char *command = message->payload;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	60bb      	str	r3, [r7, #8]

  if(strcmp(command, "R1ON") == 0){
 8002ff0:	4966      	ldr	r1, [pc, #408]	; (800318c <message_arrived+0x1c0>)
 8002ff2:	68b8      	ldr	r0, [r7, #8]
 8002ff4:	f7fd f914 	bl	8000220 <strcmp>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d108      	bne.n	8003010 <message_arrived+0x44>
	 printf("relay 1 on\n");
 8002ffe:	4864      	ldr	r0, [pc, #400]	; (8003190 <message_arrived+0x1c4>)
 8003000:	f008 fcd4 	bl	800b9ac <puts>
	 HAL_GPIO_WritePin(RELAY_1_GPIO_Port, RELAY_1_Pin, GPIO_PIN_SET);
 8003004:	2201      	movs	r2, #1
 8003006:	2101      	movs	r1, #1
 8003008:	4862      	ldr	r0, [pc, #392]	; (8003194 <message_arrived+0x1c8>)
 800300a:	f001 fcdb 	bl	80049c4 <HAL_GPIO_WritePin>
	 return;
 800300e:	e0b8      	b.n	8003182 <message_arrived+0x1b6>
  }

  if(strcmp(command, "R1OF") == 0){
 8003010:	4961      	ldr	r1, [pc, #388]	; (8003198 <message_arrived+0x1cc>)
 8003012:	68b8      	ldr	r0, [r7, #8]
 8003014:	f7fd f904 	bl	8000220 <strcmp>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d108      	bne.n	8003030 <message_arrived+0x64>
	 printf("relay 1 off\n");
 800301e:	485f      	ldr	r0, [pc, #380]	; (800319c <message_arrived+0x1d0>)
 8003020:	f008 fcc4 	bl	800b9ac <puts>
  	 HAL_GPIO_WritePin(RELAY_1_GPIO_Port, RELAY_1_Pin, GPIO_PIN_RESET);
 8003024:	2200      	movs	r2, #0
 8003026:	2101      	movs	r1, #1
 8003028:	485a      	ldr	r0, [pc, #360]	; (8003194 <message_arrived+0x1c8>)
 800302a:	f001 fccb 	bl	80049c4 <HAL_GPIO_WritePin>
	 return;
 800302e:	e0a8      	b.n	8003182 <message_arrived+0x1b6>
  }

  if(strcmp(command, "R2ON") == 0){
 8003030:	495b      	ldr	r1, [pc, #364]	; (80031a0 <message_arrived+0x1d4>)
 8003032:	68b8      	ldr	r0, [r7, #8]
 8003034:	f7fd f8f4 	bl	8000220 <strcmp>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d108      	bne.n	8003050 <message_arrived+0x84>
	 printf("relay 2 on\n");
 800303e:	4859      	ldr	r0, [pc, #356]	; (80031a4 <message_arrived+0x1d8>)
 8003040:	f008 fcb4 	bl	800b9ac <puts>
  	 HAL_GPIO_WritePin(RELAY_2_GPIO_Port, RELAY_2_Pin, GPIO_PIN_SET);
 8003044:	2201      	movs	r2, #1
 8003046:	2102      	movs	r1, #2
 8003048:	4852      	ldr	r0, [pc, #328]	; (8003194 <message_arrived+0x1c8>)
 800304a:	f001 fcbb 	bl	80049c4 <HAL_GPIO_WritePin>
	 return;
 800304e:	e098      	b.n	8003182 <message_arrived+0x1b6>
  }

  if(strcmp(command, "R2OF") == 0){
 8003050:	4955      	ldr	r1, [pc, #340]	; (80031a8 <message_arrived+0x1dc>)
 8003052:	68b8      	ldr	r0, [r7, #8]
 8003054:	f7fd f8e4 	bl	8000220 <strcmp>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d108      	bne.n	8003070 <message_arrived+0xa4>
	 printf("relay 2 off\n");
 800305e:	4853      	ldr	r0, [pc, #332]	; (80031ac <message_arrived+0x1e0>)
 8003060:	f008 fca4 	bl	800b9ac <puts>
     HAL_GPIO_WritePin(RELAY_2_GPIO_Port, RELAY_2_Pin, GPIO_PIN_RESET);
 8003064:	2200      	movs	r2, #0
 8003066:	2102      	movs	r1, #2
 8003068:	484a      	ldr	r0, [pc, #296]	; (8003194 <message_arrived+0x1c8>)
 800306a:	f001 fcab 	bl	80049c4 <HAL_GPIO_WritePin>
	 return;
 800306e:	e088      	b.n	8003182 <message_arrived+0x1b6>
  }

  if(strcmp(message->payload, "R3ON") == 0){
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	494e      	ldr	r1, [pc, #312]	; (80031b0 <message_arrived+0x1e4>)
 8003076:	4618      	mov	r0, r3
 8003078:	f7fd f8d2 	bl	8000220 <strcmp>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d108      	bne.n	8003094 <message_arrived+0xc8>
	 printf("relay 3 on\n");
 8003082:	484c      	ldr	r0, [pc, #304]	; (80031b4 <message_arrived+0x1e8>)
 8003084:	f008 fc92 	bl	800b9ac <puts>
  	 HAL_GPIO_WritePin(RELAY_3_GPIO_Port, RELAY_3_Pin, GPIO_PIN_SET);
 8003088:	2201      	movs	r2, #1
 800308a:	2104      	movs	r1, #4
 800308c:	4841      	ldr	r0, [pc, #260]	; (8003194 <message_arrived+0x1c8>)
 800308e:	f001 fc99 	bl	80049c4 <HAL_GPIO_WritePin>
  	 return;
 8003092:	e076      	b.n	8003182 <message_arrived+0x1b6>
  }

  if(strcmp(message->payload, "R3OF") == 0){
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	4947      	ldr	r1, [pc, #284]	; (80031b8 <message_arrived+0x1ec>)
 800309a:	4618      	mov	r0, r3
 800309c:	f7fd f8c0 	bl	8000220 <strcmp>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d108      	bne.n	80030b8 <message_arrived+0xec>
	 printf("relay 3 off\n");
 80030a6:	4845      	ldr	r0, [pc, #276]	; (80031bc <message_arrived+0x1f0>)
 80030a8:	f008 fc80 	bl	800b9ac <puts>
     HAL_GPIO_WritePin(RELAY_3_GPIO_Port, RELAY_3_Pin, GPIO_PIN_RESET);
 80030ac:	2200      	movs	r2, #0
 80030ae:	2104      	movs	r1, #4
 80030b0:	4838      	ldr	r0, [pc, #224]	; (8003194 <message_arrived+0x1c8>)
 80030b2:	f001 fc87 	bl	80049c4 <HAL_GPIO_WritePin>
     return;
 80030b6:	e064      	b.n	8003182 <message_arrived+0x1b6>
  }

  if(strcmp(message->payload, "R4ON") == 0){
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	4940      	ldr	r1, [pc, #256]	; (80031c0 <message_arrived+0x1f4>)
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fd f8ae 	bl	8000220 <strcmp>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d108      	bne.n	80030dc <message_arrived+0x110>
	 printf("relay 4 on\n");
 80030ca:	483e      	ldr	r0, [pc, #248]	; (80031c4 <message_arrived+0x1f8>)
 80030cc:	f008 fc6e 	bl	800b9ac <puts>
  	 HAL_GPIO_WritePin(RELAY_4_GPIO_Port, RELAY_4_Pin, GPIO_PIN_SET);
 80030d0:	2201      	movs	r2, #1
 80030d2:	2108      	movs	r1, #8
 80030d4:	482f      	ldr	r0, [pc, #188]	; (8003194 <message_arrived+0x1c8>)
 80030d6:	f001 fc75 	bl	80049c4 <HAL_GPIO_WritePin>
  	 return;
 80030da:	e052      	b.n	8003182 <message_arrived+0x1b6>
  }

  if(strcmp(message->payload, "R4OF") == 0){
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	4939      	ldr	r1, [pc, #228]	; (80031c8 <message_arrived+0x1fc>)
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fd f89c 	bl	8000220 <strcmp>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d108      	bne.n	8003100 <message_arrived+0x134>
	 printf("relay 4 off\n");
 80030ee:	4837      	ldr	r0, [pc, #220]	; (80031cc <message_arrived+0x200>)
 80030f0:	f008 fc5c 	bl	800b9ac <puts>
     HAL_GPIO_WritePin(RELAY_4_GPIO_Port, RELAY_4_Pin, GPIO_PIN_RESET);
 80030f4:	2200      	movs	r2, #0
 80030f6:	2108      	movs	r1, #8
 80030f8:	4826      	ldr	r0, [pc, #152]	; (8003194 <message_arrived+0x1c8>)
 80030fa:	f001 fc63 	bl	80049c4 <HAL_GPIO_WritePin>
     return;
 80030fe:	e040      	b.n	8003182 <message_arrived+0x1b6>
  }

  if(strcmp(message->payload, "RAON") == 0){
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	4932      	ldr	r1, [pc, #200]	; (80031d0 <message_arrived+0x204>)
 8003106:	4618      	mov	r0, r3
 8003108:	f7fd f88a 	bl	8000220 <strcmp>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d117      	bne.n	8003142 <message_arrived+0x176>
	 printf("relay all on\n");
 8003112:	4830      	ldr	r0, [pc, #192]	; (80031d4 <message_arrived+0x208>)
 8003114:	f008 fc4a 	bl	800b9ac <puts>
  	 HAL_GPIO_WritePin(RELAY_1_GPIO_Port, RELAY_1_Pin, GPIO_PIN_SET);
 8003118:	2201      	movs	r2, #1
 800311a:	2101      	movs	r1, #1
 800311c:	481d      	ldr	r0, [pc, #116]	; (8003194 <message_arrived+0x1c8>)
 800311e:	f001 fc51 	bl	80049c4 <HAL_GPIO_WritePin>
  	 HAL_GPIO_WritePin(RELAY_2_GPIO_Port, RELAY_2_Pin, GPIO_PIN_SET);
 8003122:	2201      	movs	r2, #1
 8003124:	2102      	movs	r1, #2
 8003126:	481b      	ldr	r0, [pc, #108]	; (8003194 <message_arrived+0x1c8>)
 8003128:	f001 fc4c 	bl	80049c4 <HAL_GPIO_WritePin>
  	 HAL_GPIO_WritePin(RELAY_3_GPIO_Port, RELAY_3_Pin, GPIO_PIN_SET);
 800312c:	2201      	movs	r2, #1
 800312e:	2104      	movs	r1, #4
 8003130:	4818      	ldr	r0, [pc, #96]	; (8003194 <message_arrived+0x1c8>)
 8003132:	f001 fc47 	bl	80049c4 <HAL_GPIO_WritePin>
  	 HAL_GPIO_WritePin(RELAY_4_GPIO_Port, RELAY_4_Pin, GPIO_PIN_SET);
 8003136:	2201      	movs	r2, #1
 8003138:	2108      	movs	r1, #8
 800313a:	4816      	ldr	r0, [pc, #88]	; (8003194 <message_arrived+0x1c8>)
 800313c:	f001 fc42 	bl	80049c4 <HAL_GPIO_WritePin>
  	 return;
 8003140:	e01f      	b.n	8003182 <message_arrived+0x1b6>
  }

  if(strcmp(message->payload, "RAOF") == 0){
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	4924      	ldr	r1, [pc, #144]	; (80031d8 <message_arrived+0x20c>)
 8003148:	4618      	mov	r0, r3
 800314a:	f7fd f869 	bl	8000220 <strcmp>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d116      	bne.n	8003182 <message_arrived+0x1b6>
	 printf("relay all off\n");
 8003154:	4821      	ldr	r0, [pc, #132]	; (80031dc <message_arrived+0x210>)
 8003156:	f008 fc29 	bl	800b9ac <puts>
     HAL_GPIO_WritePin(RELAY_1_GPIO_Port, RELAY_1_Pin, GPIO_PIN_RESET);
 800315a:	2200      	movs	r2, #0
 800315c:	2101      	movs	r1, #1
 800315e:	480d      	ldr	r0, [pc, #52]	; (8003194 <message_arrived+0x1c8>)
 8003160:	f001 fc30 	bl	80049c4 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(RELAY_2_GPIO_Port, RELAY_2_Pin, GPIO_PIN_RESET);
 8003164:	2200      	movs	r2, #0
 8003166:	2102      	movs	r1, #2
 8003168:	480a      	ldr	r0, [pc, #40]	; (8003194 <message_arrived+0x1c8>)
 800316a:	f001 fc2b 	bl	80049c4 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(RELAY_3_GPIO_Port, RELAY_3_Pin, GPIO_PIN_RESET);
 800316e:	2200      	movs	r2, #0
 8003170:	2104      	movs	r1, #4
 8003172:	4808      	ldr	r0, [pc, #32]	; (8003194 <message_arrived+0x1c8>)
 8003174:	f001 fc26 	bl	80049c4 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(RELAY_4_GPIO_Port, RELAY_4_Pin, GPIO_PIN_RESET);
 8003178:	2200      	movs	r2, #0
 800317a:	2108      	movs	r1, #8
 800317c:	4805      	ldr	r0, [pc, #20]	; (8003194 <message_arrived+0x1c8>)
 800317e:	f001 fc21 	bl	80049c4 <HAL_GPIO_WritePin>
  }

}
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	0800c954 	.word	0x0800c954
 800318c:	0800c964 	.word	0x0800c964
 8003190:	0800c96c 	.word	0x0800c96c
 8003194:	40020800 	.word	0x40020800
 8003198:	0800c978 	.word	0x0800c978
 800319c:	0800c980 	.word	0x0800c980
 80031a0:	0800c98c 	.word	0x0800c98c
 80031a4:	0800c994 	.word	0x0800c994
 80031a8:	0800c9a0 	.word	0x0800c9a0
 80031ac:	0800c9a8 	.word	0x0800c9a8
 80031b0:	0800c9b4 	.word	0x0800c9b4
 80031b4:	0800c9bc 	.word	0x0800c9bc
 80031b8:	0800c9c8 	.word	0x0800c9c8
 80031bc:	0800c9d0 	.word	0x0800c9d0
 80031c0:	0800c9dc 	.word	0x0800c9dc
 80031c4:	0800c9e4 	.word	0x0800c9e4
 80031c8:	0800c9f0 	.word	0x0800c9f0
 80031cc:	0800c9f8 	.word	0x0800c9f8
 80031d0:	0800ca04 	.word	0x0800ca04
 80031d4:	0800ca0c 	.word	0x0800ca0c
 80031d8:	0800ca1c 	.word	0x0800ca1c
 80031dc:	0800ca24 	.word	0x0800ca24

080031e0 <mqtt_connect>:


uint8_t mqtt_connect(wiz_NetInfo *net_info)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af04      	add	r7, sp, #16
 80031e6:	6078      	str	r0, [r7, #4]
  int retval = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	60fb      	str	r3, [r7, #12]

  wizchip_network_initialize(net_info);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f007 ffd0 	bl	800b192 <wizchip_network_initialize>
  wizchip_network_information(net_info);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f007 ffe0 	bl	800b1b8 <wizchip_network_information>

  NewNetwork(&g_mqtt_network, SOCKET_MQTT);
 80031f8:	2100      	movs	r1, #0
 80031fa:	4825      	ldr	r0, [pc, #148]	; (8003290 <mqtt_connect+0xb0>)
 80031fc:	f006 fffa 	bl	800a1f4 <NewNetwork>

  retval = ConnectNetwork(&g_mqtt_network, g_mqtt_broker_ip, PORT_MQTT);
 8003200:	f240 725b 	movw	r2, #1883	; 0x75b
 8003204:	4923      	ldr	r1, [pc, #140]	; (8003294 <mqtt_connect+0xb4>)
 8003206:	4822      	ldr	r0, [pc, #136]	; (8003290 <mqtt_connect+0xb0>)
 8003208:	f007 f86f 	bl	800a2ea <ConnectNetwork>
 800320c:	60f8      	str	r0, [r7, #12]

  if (retval != 1)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d002      	beq.n	800321a <mqtt_connect+0x3a>
  {
    printf(" Network connect failed\n");
 8003214:	4820      	ldr	r0, [pc, #128]	; (8003298 <mqtt_connect+0xb8>)
 8003216:	f008 fbc9 	bl	800b9ac <puts>

  }

  MQTTClientInit(&g_mqtt_client, &g_mqtt_network, MQTT_TIMEOUT, g_mqtt_send_buf, ETHERNET_BUF_MAX_SIZE, g_mqtt_recv_buf, ETHERNET_BUF_MAX_SIZE);
 800321a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800321e:	9302      	str	r3, [sp, #8]
 8003220:	4b1e      	ldr	r3, [pc, #120]	; (800329c <mqtt_connect+0xbc>)
 8003222:	9301      	str	r3, [sp, #4]
 8003224:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	4b1d      	ldr	r3, [pc, #116]	; (80032a0 <mqtt_connect+0xc0>)
 800322c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003230:	4917      	ldr	r1, [pc, #92]	; (8003290 <mqtt_connect+0xb0>)
 8003232:	481c      	ldr	r0, [pc, #112]	; (80032a4 <mqtt_connect+0xc4>)
 8003234:	f006 fa53 	bl	80096de <MQTTClientInit>

  g_mqtt_packet_connect_data.MQTTVersion = 3;
 8003238:	4b1b      	ldr	r3, [pc, #108]	; (80032a8 <mqtt_connect+0xc8>)
 800323a:	2203      	movs	r2, #3
 800323c:	721a      	strb	r2, [r3, #8]
  g_mqtt_packet_connect_data.cleansession = 1;
 800323e:	4b1a      	ldr	r3, [pc, #104]	; (80032a8 <mqtt_connect+0xc8>)
 8003240:	2201      	movs	r2, #1
 8003242:	769a      	strb	r2, [r3, #26]
  g_mqtt_packet_connect_data.willFlag = 0;
 8003244:	4b18      	ldr	r3, [pc, #96]	; (80032a8 <mqtt_connect+0xc8>)
 8003246:	2200      	movs	r2, #0
 8003248:	76da      	strb	r2, [r3, #27]
  g_mqtt_packet_connect_data.keepAliveInterval = MQTT_KEEP_ALIVE;
 800324a:	4b17      	ldr	r3, [pc, #92]	; (80032a8 <mqtt_connect+0xc8>)
 800324c:	223c      	movs	r2, #60	; 0x3c
 800324e:	831a      	strh	r2, [r3, #24]
  g_mqtt_packet_connect_data.clientID.cstring = MQTT_CLIENT_ID;
 8003250:	4b15      	ldr	r3, [pc, #84]	; (80032a8 <mqtt_connect+0xc8>)
 8003252:	4a16      	ldr	r2, [pc, #88]	; (80032ac <mqtt_connect+0xcc>)
 8003254:	60da      	str	r2, [r3, #12]
  g_mqtt_packet_connect_data.username.cstring = MQTT_USERNAME;
 8003256:	4b14      	ldr	r3, [pc, #80]	; (80032a8 <mqtt_connect+0xc8>)
 8003258:	2200      	movs	r2, #0
 800325a:	641a      	str	r2, [r3, #64]	; 0x40
  g_mqtt_packet_connect_data.password.cstring = MQTT_PASSWORD;
 800325c:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <mqtt_connect+0xc8>)
 800325e:	2200      	movs	r2, #0
 8003260:	64da      	str	r2, [r3, #76]	; 0x4c

  retval = MQTTConnect(&g_mqtt_client, &g_mqtt_packet_connect_data);
 8003262:	4911      	ldr	r1, [pc, #68]	; (80032a8 <mqtt_connect+0xc8>)
 8003264:	480f      	ldr	r0, [pc, #60]	; (80032a4 <mqtt_connect+0xc4>)
 8003266:	f006 fd63 	bl	8009d30 <MQTTConnect>
 800326a:	60f8      	str	r0, [r7, #12]

  if (retval < 0)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	da05      	bge.n	800327e <mqtt_connect+0x9e>
  {
    printf(" MQTT connect failed : %d\n", retval);
 8003272:	68f9      	ldr	r1, [r7, #12]
 8003274:	480e      	ldr	r0, [pc, #56]	; (80032b0 <mqtt_connect+0xd0>)
 8003276:	f008 fb33 	bl	800b8e0 <iprintf>
    return 0;
 800327a:	2300      	movs	r3, #0
 800327c:	e003      	b.n	8003286 <mqtt_connect+0xa6>

  }

  printf(" MQTT connected\n");
 800327e:	480d      	ldr	r0, [pc, #52]	; (80032b4 <mqtt_connect+0xd4>)
 8003280:	f008 fb94 	bl	800b9ac <puts>
  return 1;
 8003284:	2301      	movs	r3, #1

}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	20001434 	.word	0x20001434
 8003294:	2000002c 	.word	0x2000002c
 8003298:	0800ca34 	.word	0x0800ca34
 800329c:	20000c34 	.word	0x20000c34
 80032a0:	20000434 	.word	0x20000434
 80032a4:	20001444 	.word	0x20001444
 80032a8:	20000030 	.word	0x20000030
 80032ac:	0800ca4c 	.word	0x0800ca4c
 80032b0:	0800ca58 	.word	0x0800ca58
 80032b4:	0800ca74 	.word	0x0800ca74

080032b8 <mqtt_publish>:


void mqtt_publish(char *new_message)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  int retval = 0;
 80032c0:	2300      	movs	r3, #0
 80032c2:	60fb      	str	r3, [r7, #12]

  g_mqtt_message.qos = QOS0;
 80032c4:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <mqtt_publish+0x78>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	701a      	strb	r2, [r3, #0]
  g_mqtt_message.retained = 0;
 80032ca:	4b19      	ldr	r3, [pc, #100]	; (8003330 <mqtt_publish+0x78>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	705a      	strb	r2, [r3, #1]
  g_mqtt_message.dup = 0;
 80032d0:	4b17      	ldr	r3, [pc, #92]	; (8003330 <mqtt_publish+0x78>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	709a      	strb	r2, [r3, #2]
  //g_mqtt_message.payload = MQTT_PUBLISH_PAYLOAD;
  g_mqtt_message.payload = new_message;
 80032d6:	4a16      	ldr	r2, [pc, #88]	; (8003330 <mqtt_publish+0x78>)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6093      	str	r3, [r2, #8]
  g_mqtt_message.payloadlen = strlen(g_mqtt_message.payload);
 80032dc:	4b14      	ldr	r3, [pc, #80]	; (8003330 <mqtt_publish+0x78>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fc ffa7 	bl	8000234 <strlen>
 80032e6:	4603      	mov	r3, r0
 80032e8:	4a11      	ldr	r2, [pc, #68]	; (8003330 <mqtt_publish+0x78>)
 80032ea:	60d3      	str	r3, [r2, #12]


  if ((retval = MQTTYield(&g_mqtt_client, g_mqtt_packet_connect_data.keepAliveInterval)) < 0)
 80032ec:	4b11      	ldr	r3, [pc, #68]	; (8003334 <mqtt_publish+0x7c>)
 80032ee:	8b1b      	ldrh	r3, [r3, #24]
 80032f0:	4619      	mov	r1, r3
 80032f2:	4811      	ldr	r0, [pc, #68]	; (8003338 <mqtt_publish+0x80>)
 80032f4:	f006 fcd8 	bl	8009ca8 <MQTTYield>
 80032f8:	60f8      	str	r0, [r7, #12]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	da03      	bge.n	8003308 <mqtt_publish+0x50>
  {
     printf(" Yield error : %d\n", retval);
 8003300:	68f9      	ldr	r1, [r7, #12]
 8003302:	480e      	ldr	r0, [pc, #56]	; (800333c <mqtt_publish+0x84>)
 8003304:	f008 faec 	bl	800b8e0 <iprintf>
  }

  retval = MQTTPublish(&g_mqtt_client, MQTT_PUBLISH_TOPIC, &g_mqtt_message);
 8003308:	4a09      	ldr	r2, [pc, #36]	; (8003330 <mqtt_publish+0x78>)
 800330a:	490d      	ldr	r1, [pc, #52]	; (8003340 <mqtt_publish+0x88>)
 800330c:	480a      	ldr	r0, [pc, #40]	; (8003338 <mqtt_publish+0x80>)
 800330e:	f006 fe3e 	bl	8009f8e <MQTTPublish>
 8003312:	60f8      	str	r0, [r7, #12]

  if (retval < 0)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	da03      	bge.n	8003322 <mqtt_publish+0x6a>
  {
     printf(" Publish failed : %d\n", retval);
 800331a:	68f9      	ldr	r1, [r7, #12]
 800331c:	4809      	ldr	r0, [pc, #36]	; (8003344 <mqtt_publish+0x8c>)
 800331e:	f008 fadf 	bl	800b8e0 <iprintf>
  }

  printf(" Published\n");
 8003322:	4809      	ldr	r0, [pc, #36]	; (8003348 <mqtt_publish+0x90>)
 8003324:	f008 fb42 	bl	800b9ac <puts>
}
 8003328:	bf00      	nop
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	200014a0 	.word	0x200014a0
 8003334:	20000030 	.word	0x20000030
 8003338:	20001444 	.word	0x20001444
 800333c:	0800ca84 	.word	0x0800ca84
 8003340:	0800ca98 	.word	0x0800ca98
 8003344:	0800caac 	.word	0x0800caac
 8003348:	0800cac4 	.word	0x0800cac4

0800334c <mqtt_subscribe>:


void mqtt_subscribe(wiz_NetInfo *net_info)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  int retval = 0;
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]

  wizchip_1msec_timer_initialize(repeating_timer_callback);
 8003358:	480b      	ldr	r0, [pc, #44]	; (8003388 <mqtt_subscribe+0x3c>)
 800335a:	f007 fff5 	bl	800b348 <wizchip_1msec_timer_initialize>

  retval = MQTTSubscribe(&g_mqtt_client, MQTT_SUBSCRIBE_TOPIC, QOS0, message_arrived);
 800335e:	4b0b      	ldr	r3, [pc, #44]	; (800338c <mqtt_subscribe+0x40>)
 8003360:	2200      	movs	r2, #0
 8003362:	490b      	ldr	r1, [pc, #44]	; (8003390 <mqtt_subscribe+0x44>)
 8003364:	480b      	ldr	r0, [pc, #44]	; (8003394 <mqtt_subscribe+0x48>)
 8003366:	f006 fd69 	bl	8009e3c <MQTTSubscribe>
 800336a:	60f8      	str	r0, [r7, #12]

  if (retval < 0)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2b00      	cmp	r3, #0
 8003370:	da03      	bge.n	800337a <mqtt_subscribe+0x2e>
  {
    printf(" Subscribe failed : %d\n", retval);
 8003372:	68f9      	ldr	r1, [r7, #12]
 8003374:	4808      	ldr	r0, [pc, #32]	; (8003398 <mqtt_subscribe+0x4c>)
 8003376:	f008 fab3 	bl	800b8e0 <iprintf>
  }

  printf(" Subscribed\n");
 800337a:	4808      	ldr	r0, [pc, #32]	; (800339c <mqtt_subscribe+0x50>)
 800337c:	f008 fb16 	bl	800b9ac <puts>

}
 8003380:	bf00      	nop
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	08002fc1 	.word	0x08002fc1
 800338c:	08002fcd 	.word	0x08002fcd
 8003390:	0800cad0 	.word	0x0800cad0
 8003394:	20001444 	.word	0x20001444
 8003398:	0800cae4 	.word	0x0800cae4
 800339c:	0800cafc 	.word	0x0800cafc

080033a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80033a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033a4:	480d      	ldr	r0, [pc, #52]	; (80033dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80033a6:	490e      	ldr	r1, [pc, #56]	; (80033e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80033a8:	4a0e      	ldr	r2, [pc, #56]	; (80033e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033ac:	e002      	b.n	80033b4 <LoopCopyDataInit>

080033ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033b2:	3304      	adds	r3, #4

080033b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033b8:	d3f9      	bcc.n	80033ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033ba:	4a0b      	ldr	r2, [pc, #44]	; (80033e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80033bc:	4c0b      	ldr	r4, [pc, #44]	; (80033ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80033be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033c0:	e001      	b.n	80033c6 <LoopFillZerobss>

080033c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033c4:	3204      	adds	r2, #4

080033c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033c8:	d3fb      	bcc.n	80033c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80033ca:	f7ff fde7 	bl	8002f9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033ce:	f008 fc77 	bl	800bcc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033d2:	f7fe fc0b 	bl	8001bec <main>
  bx  lr    
 80033d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80033d8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80033dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033e0:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 80033e4:	0800cdc0 	.word	0x0800cdc0
  ldr r2, =_sbss
 80033e8:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 80033ec:	2000165c 	.word	0x2000165c

080033f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033f0:	e7fe      	b.n	80033f0 <ADC_IRQHandler>

080033f2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033f6:	2003      	movs	r0, #3
 80033f8:	f000 fd70 	bl	8003edc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033fc:	200f      	movs	r0, #15
 80033fe:	f000 f805 	bl	800340c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003402:	f7ff fad3 	bl	80029ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003414:	4b12      	ldr	r3, [pc, #72]	; (8003460 <HAL_InitTick+0x54>)
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	4b12      	ldr	r3, [pc, #72]	; (8003464 <HAL_InitTick+0x58>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	4619      	mov	r1, r3
 800341e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003422:	fbb3 f3f1 	udiv	r3, r3, r1
 8003426:	fbb2 f3f3 	udiv	r3, r2, r3
 800342a:	4618      	mov	r0, r3
 800342c:	f000 fd8b 	bl	8003f46 <HAL_SYSTICK_Config>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e00e      	b.n	8003458 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b0f      	cmp	r3, #15
 800343e:	d80a      	bhi.n	8003456 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003440:	2200      	movs	r2, #0
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	f04f 30ff 	mov.w	r0, #4294967295
 8003448:	f000 fd53 	bl	8003ef2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800344c:	4a06      	ldr	r2, [pc, #24]	; (8003468 <HAL_InitTick+0x5c>)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	e000      	b.n	8003458 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
}
 8003458:	4618      	mov	r0, r3
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	20000028 	.word	0x20000028
 8003464:	2000008c 	.word	0x2000008c
 8003468:	20000088 	.word	0x20000088

0800346c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003470:	4b06      	ldr	r3, [pc, #24]	; (800348c <HAL_IncTick+0x20>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	4b06      	ldr	r3, [pc, #24]	; (8003490 <HAL_IncTick+0x24>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4413      	add	r3, r2
 800347c:	4a04      	ldr	r2, [pc, #16]	; (8003490 <HAL_IncTick+0x24>)
 800347e:	6013      	str	r3, [r2, #0]
}
 8003480:	bf00      	nop
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	2000008c 	.word	0x2000008c
 8003490:	200014b0 	.word	0x200014b0

08003494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  return uwTick;
 8003498:	4b03      	ldr	r3, [pc, #12]	; (80034a8 <HAL_GetTick+0x14>)
 800349a:	681b      	ldr	r3, [r3, #0]
}
 800349c:	4618      	mov	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	200014b0 	.word	0x200014b0

080034ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034b4:	f7ff ffee 	bl	8003494 <HAL_GetTick>
 80034b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c4:	d005      	beq.n	80034d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034c6:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <HAL_Delay+0x44>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	461a      	mov	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4413      	add	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034d2:	bf00      	nop
 80034d4:	f7ff ffde 	bl	8003494 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d8f7      	bhi.n	80034d4 <HAL_Delay+0x28>
  {
  }
}
 80034e4:	bf00      	nop
 80034e6:	bf00      	nop
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	2000008c 	.word	0x2000008c

080034f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e031      	b.n	800356e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	2b00      	cmp	r3, #0
 8003510:	d109      	bne.n	8003526 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7ff fa6e 	bl	80029f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	f003 0310 	and.w	r3, r3, #16
 800352e:	2b00      	cmp	r3, #0
 8003530:	d116      	bne.n	8003560 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003536:	4b10      	ldr	r3, [pc, #64]	; (8003578 <HAL_ADC_Init+0x84>)
 8003538:	4013      	ands	r3, r2
 800353a:	f043 0202 	orr.w	r2, r3, #2
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fa7e 	bl	8003a44 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	f023 0303 	bic.w	r3, r3, #3
 8003556:	f043 0201 	orr.w	r2, r3, #1
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	641a      	str	r2, [r3, #64]	; 0x40
 800355e:	e001      	b.n	8003564 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800356c:	7bfb      	ldrb	r3, [r7, #15]
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	ffffeefd 	.word	0xffffeefd

0800357c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003592:	2b01      	cmp	r3, #1
 8003594:	d101      	bne.n	800359a <HAL_ADC_Start_DMA+0x1e>
 8003596:	2302      	movs	r3, #2
 8003598:	e0d4      	b.n	8003744 <HAL_ADC_Start_DMA+0x1c8>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d018      	beq.n	80035e2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689a      	ldr	r2, [r3, #8]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0201 	orr.w	r2, r2, #1
 80035be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80035c0:	4b62      	ldr	r3, [pc, #392]	; (800374c <HAL_ADC_Start_DMA+0x1d0>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a62      	ldr	r2, [pc, #392]	; (8003750 <HAL_ADC_Start_DMA+0x1d4>)
 80035c6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ca:	0c9a      	lsrs	r2, r3, #18
 80035cc:	4613      	mov	r3, r2
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	4413      	add	r3, r2
 80035d2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80035d4:	e002      	b.n	80035dc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	3b01      	subs	r3, #1
 80035da:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f9      	bne.n	80035d6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	f040 809c 	bne.w	800372a <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035f6:	4b57      	ldr	r3, [pc, #348]	; (8003754 <HAL_ADC_Start_DMA+0x1d8>)
 80035f8:	4013      	ands	r3, r2
 80035fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800360c:	2b00      	cmp	r3, #0
 800360e:	d007      	beq.n	8003620 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003618:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800362c:	d106      	bne.n	800363c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003632:	f023 0206 	bic.w	r2, r3, #6
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	645a      	str	r2, [r3, #68]	; 0x44
 800363a:	e002      	b.n	8003642 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364e:	4a42      	ldr	r2, [pc, #264]	; (8003758 <HAL_ADC_Start_DMA+0x1dc>)
 8003650:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003656:	4a41      	ldr	r2, [pc, #260]	; (800375c <HAL_ADC_Start_DMA+0x1e0>)
 8003658:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	4a40      	ldr	r2, [pc, #256]	; (8003760 <HAL_ADC_Start_DMA+0x1e4>)
 8003660:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800366a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800367a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800368a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	334c      	adds	r3, #76	; 0x4c
 8003696:	4619      	mov	r1, r3
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f000 fd14 	bl	80040c8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80036a0:	4b30      	ldr	r3, [pc, #192]	; (8003764 <HAL_ADC_Start_DMA+0x1e8>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f003 031f 	and.w	r3, r3, #31
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10f      	bne.n	80036cc <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d143      	bne.n	8003742 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036c8:	609a      	str	r2, [r3, #8]
 80036ca:	e03a      	b.n	8003742 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a25      	ldr	r2, [pc, #148]	; (8003768 <HAL_ADC_Start_DMA+0x1ec>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d10e      	bne.n	80036f4 <HAL_ADC_Start_DMA+0x178>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d107      	bne.n	80036f4 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036f2:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80036f4:	4b1b      	ldr	r3, [pc, #108]	; (8003764 <HAL_ADC_Start_DMA+0x1e8>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f003 0310 	and.w	r3, r3, #16
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d120      	bne.n	8003742 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a19      	ldr	r2, [pc, #100]	; (800376c <HAL_ADC_Start_DMA+0x1f0>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d11b      	bne.n	8003742 <HAL_ADC_Start_DMA+0x1c6>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d114      	bne.n	8003742 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003726:	609a      	str	r2, [r3, #8]
 8003728:	e00b      	b.n	8003742 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f043 0210 	orr.w	r2, r3, #16
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	f043 0201 	orr.w	r2, r3, #1
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	20000028 	.word	0x20000028
 8003750:	431bde83 	.word	0x431bde83
 8003754:	fffff8fe 	.word	0xfffff8fe
 8003758:	08003c39 	.word	0x08003c39
 800375c:	08003cf3 	.word	0x08003cf3
 8003760:	08003d0f 	.word	0x08003d0f
 8003764:	40012300 	.word	0x40012300
 8003768:	40012000 	.word	0x40012000
 800376c:	40012200 	.word	0x40012200

08003770 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80037a2:	2300      	movs	r3, #0
 80037a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_ADC_ConfigChannel+0x1c>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e136      	b.n	8003a22 <HAL_ADC_ConfigChannel+0x28a>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2b09      	cmp	r3, #9
 80037c2:	d93a      	bls.n	800383a <HAL_ADC_ConfigChannel+0xa2>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037cc:	d035      	beq.n	800383a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68d9      	ldr	r1, [r3, #12]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	b29b      	uxth	r3, r3
 80037da:	461a      	mov	r2, r3
 80037dc:	4613      	mov	r3, r2
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	4413      	add	r3, r2
 80037e2:	3b1e      	subs	r3, #30
 80037e4:	2207      	movs	r2, #7
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	43da      	mvns	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	400a      	ands	r2, r1
 80037f2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a8d      	ldr	r2, [pc, #564]	; (8003a30 <HAL_ADC_ConfigChannel+0x298>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d10a      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68d9      	ldr	r1, [r3, #12]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	061a      	lsls	r2, r3, #24
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003812:	e035      	b.n	8003880 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68d9      	ldr	r1, [r3, #12]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	b29b      	uxth	r3, r3
 8003824:	4618      	mov	r0, r3
 8003826:	4603      	mov	r3, r0
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	4403      	add	r3, r0
 800382c:	3b1e      	subs	r3, #30
 800382e:	409a      	lsls	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003838:	e022      	b.n	8003880 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6919      	ldr	r1, [r3, #16]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	b29b      	uxth	r3, r3
 8003846:	461a      	mov	r2, r3
 8003848:	4613      	mov	r3, r2
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	4413      	add	r3, r2
 800384e:	2207      	movs	r2, #7
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	43da      	mvns	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	400a      	ands	r2, r1
 800385c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6919      	ldr	r1, [r3, #16]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	b29b      	uxth	r3, r3
 800386e:	4618      	mov	r0, r3
 8003870:	4603      	mov	r3, r0
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	4403      	add	r3, r0
 8003876:	409a      	lsls	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2b06      	cmp	r3, #6
 8003886:	d824      	bhi.n	80038d2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	4613      	mov	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	3b05      	subs	r3, #5
 800389a:	221f      	movs	r2, #31
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	43da      	mvns	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	400a      	ands	r2, r1
 80038a8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	4618      	mov	r0, r3
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	4613      	mov	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	3b05      	subs	r3, #5
 80038c4:	fa00 f203 	lsl.w	r2, r0, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	635a      	str	r2, [r3, #52]	; 0x34
 80038d0:	e04c      	b.n	800396c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b0c      	cmp	r3, #12
 80038d8:	d824      	bhi.n	8003924 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	4613      	mov	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	3b23      	subs	r3, #35	; 0x23
 80038ec:	221f      	movs	r2, #31
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	43da      	mvns	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	400a      	ands	r2, r1
 80038fa:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	b29b      	uxth	r3, r3
 8003908:	4618      	mov	r0, r3
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	3b23      	subs	r3, #35	; 0x23
 8003916:	fa00 f203 	lsl.w	r2, r0, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	631a      	str	r2, [r3, #48]	; 0x30
 8003922:	e023      	b.n	800396c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	4613      	mov	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	3b41      	subs	r3, #65	; 0x41
 8003936:	221f      	movs	r2, #31
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	43da      	mvns	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	400a      	ands	r2, r1
 8003944:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	b29b      	uxth	r3, r3
 8003952:	4618      	mov	r0, r3
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	4613      	mov	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	3b41      	subs	r3, #65	; 0x41
 8003960:	fa00 f203 	lsl.w	r2, r0, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a30      	ldr	r2, [pc, #192]	; (8003a34 <HAL_ADC_ConfigChannel+0x29c>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d10a      	bne.n	800398c <HAL_ADC_ConfigChannel+0x1f4>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800397e:	d105      	bne.n	800398c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003980:	4b2d      	ldr	r3, [pc, #180]	; (8003a38 <HAL_ADC_ConfigChannel+0x2a0>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	4a2c      	ldr	r2, [pc, #176]	; (8003a38 <HAL_ADC_ConfigChannel+0x2a0>)
 8003986:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800398a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a28      	ldr	r2, [pc, #160]	; (8003a34 <HAL_ADC_ConfigChannel+0x29c>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d10f      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x21e>
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b12      	cmp	r3, #18
 800399c:	d10b      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800399e:	4b26      	ldr	r3, [pc, #152]	; (8003a38 <HAL_ADC_ConfigChannel+0x2a0>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	4a25      	ldr	r2, [pc, #148]	; (8003a38 <HAL_ADC_ConfigChannel+0x2a0>)
 80039a4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80039a8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80039aa:	4b23      	ldr	r3, [pc, #140]	; (8003a38 <HAL_ADC_ConfigChannel+0x2a0>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	4a22      	ldr	r2, [pc, #136]	; (8003a38 <HAL_ADC_ConfigChannel+0x2a0>)
 80039b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039b4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a1e      	ldr	r2, [pc, #120]	; (8003a34 <HAL_ADC_ConfigChannel+0x29c>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d12b      	bne.n	8003a18 <HAL_ADC_ConfigChannel+0x280>
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a1a      	ldr	r2, [pc, #104]	; (8003a30 <HAL_ADC_ConfigChannel+0x298>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d003      	beq.n	80039d2 <HAL_ADC_ConfigChannel+0x23a>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b11      	cmp	r3, #17
 80039d0:	d122      	bne.n	8003a18 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80039d2:	4b19      	ldr	r3, [pc, #100]	; (8003a38 <HAL_ADC_ConfigChannel+0x2a0>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	4a18      	ldr	r2, [pc, #96]	; (8003a38 <HAL_ADC_ConfigChannel+0x2a0>)
 80039d8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80039dc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80039de:	4b16      	ldr	r3, [pc, #88]	; (8003a38 <HAL_ADC_ConfigChannel+0x2a0>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	4a15      	ldr	r2, [pc, #84]	; (8003a38 <HAL_ADC_ConfigChannel+0x2a0>)
 80039e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039e8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a10      	ldr	r2, [pc, #64]	; (8003a30 <HAL_ADC_ConfigChannel+0x298>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d111      	bne.n	8003a18 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80039f4:	4b11      	ldr	r3, [pc, #68]	; (8003a3c <HAL_ADC_ConfigChannel+0x2a4>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a11      	ldr	r2, [pc, #68]	; (8003a40 <HAL_ADC_ConfigChannel+0x2a8>)
 80039fa:	fba2 2303 	umull	r2, r3, r2, r3
 80039fe:	0c9a      	lsrs	r2, r3, #18
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003a0a:	e002      	b.n	8003a12 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1f9      	bne.n	8003a0c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	10000012 	.word	0x10000012
 8003a34:	40012000 	.word	0x40012000
 8003a38:	40012300 	.word	0x40012300
 8003a3c:	20000028 	.word	0x20000028
 8003a40:	431bde83 	.word	0x431bde83

08003a44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003a4c:	4b78      	ldr	r3, [pc, #480]	; (8003c30 <ADC_Init+0x1ec>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	4a77      	ldr	r2, [pc, #476]	; (8003c30 <ADC_Init+0x1ec>)
 8003a52:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003a56:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003a58:	4b75      	ldr	r3, [pc, #468]	; (8003c30 <ADC_Init+0x1ec>)
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	4973      	ldr	r1, [pc, #460]	; (8003c30 <ADC_Init+0x1ec>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6859      	ldr	r1, [r3, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	021a      	lsls	r2, r3, #8
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6859      	ldr	r1, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6899      	ldr	r1, [r3, #8]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad2:	4a58      	ldr	r2, [pc, #352]	; (8003c34 <ADC_Init+0x1f0>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d022      	beq.n	8003b1e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ae6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6899      	ldr	r1, [r3, #8]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6899      	ldr	r1, [r3, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	609a      	str	r2, [r3, #8]
 8003b1c:	e00f      	b.n	8003b3e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b3c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0202 	bic.w	r2, r2, #2
 8003b4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6899      	ldr	r1, [r3, #8]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	005a      	lsls	r2, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d01b      	beq.n	8003ba4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b7a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b8a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6859      	ldr	r1, [r3, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	3b01      	subs	r3, #1
 8003b98:	035a      	lsls	r2, r3, #13
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	605a      	str	r2, [r3, #4]
 8003ba2:	e007      	b.n	8003bb4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bb2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	051a      	lsls	r2, r3, #20
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003be8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6899      	ldr	r1, [r3, #8]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003bf6:	025a      	lsls	r2, r3, #9
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6899      	ldr	r1, [r3, #8]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	029a      	lsls	r2, r3, #10
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	609a      	str	r2, [r3, #8]
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	40012300 	.word	0x40012300
 8003c34:	0f000001 	.word	0x0f000001

08003c38 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c44:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d13c      	bne.n	8003ccc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d12b      	bne.n	8003cc4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d127      	bne.n	8003cc4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d006      	beq.n	8003c90 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d119      	bne.n	8003cc4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0220 	bic.w	r2, r2, #32
 8003c9e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d105      	bne.n	8003cc4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	f043 0201 	orr.w	r2, r3, #1
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f7fd ff81 	bl	8001bcc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003cca:	e00e      	b.n	8003cea <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	f003 0310 	and.w	r3, r3, #16
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d003      	beq.n	8003ce0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f7ff fd53 	bl	8003784 <HAL_ADC_ErrorCallback>
}
 8003cde:	e004      	b.n	8003cea <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	4798      	blx	r3
}
 8003cea:	bf00      	nop
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b084      	sub	sp, #16
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfe:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f7ff fd35 	bl	8003770 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d06:	bf00      	nop
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b084      	sub	sp, #16
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2240      	movs	r2, #64	; 0x40
 8003d20:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d26:	f043 0204 	orr.w	r2, r3, #4
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f7ff fd28 	bl	8003784 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d34:	bf00      	nop
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d4c:	4b0b      	ldr	r3, [pc, #44]	; (8003d7c <__NVIC_SetPriorityGrouping+0x40>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d58:	4013      	ands	r3, r2
 8003d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003d64:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <__NVIC_SetPriorityGrouping+0x44>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d6a:	4a04      	ldr	r2, [pc, #16]	; (8003d7c <__NVIC_SetPriorityGrouping+0x40>)
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	60d3      	str	r3, [r2, #12]
}
 8003d70:	bf00      	nop
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	e000ed00 	.word	0xe000ed00
 8003d80:	05fa0000 	.word	0x05fa0000

08003d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d88:	4b04      	ldr	r3, [pc, #16]	; (8003d9c <__NVIC_GetPriorityGrouping+0x18>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	0a1b      	lsrs	r3, r3, #8
 8003d8e:	f003 0307 	and.w	r3, r3, #7
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	e000ed00 	.word	0xe000ed00

08003da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	4603      	mov	r3, r0
 8003da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	db0b      	blt.n	8003dca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003db2:	79fb      	ldrb	r3, [r7, #7]
 8003db4:	f003 021f 	and.w	r2, r3, #31
 8003db8:	4907      	ldr	r1, [pc, #28]	; (8003dd8 <__NVIC_EnableIRQ+0x38>)
 8003dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dbe:	095b      	lsrs	r3, r3, #5
 8003dc0:	2001      	movs	r0, #1
 8003dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8003dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	e000e100 	.word	0xe000e100

08003ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	6039      	str	r1, [r7, #0]
 8003de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	db0a      	blt.n	8003e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	490c      	ldr	r1, [pc, #48]	; (8003e28 <__NVIC_SetPriority+0x4c>)
 8003df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfa:	0112      	lsls	r2, r2, #4
 8003dfc:	b2d2      	uxtb	r2, r2
 8003dfe:	440b      	add	r3, r1
 8003e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e04:	e00a      	b.n	8003e1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	4908      	ldr	r1, [pc, #32]	; (8003e2c <__NVIC_SetPriority+0x50>)
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	3b04      	subs	r3, #4
 8003e14:	0112      	lsls	r2, r2, #4
 8003e16:	b2d2      	uxtb	r2, r2
 8003e18:	440b      	add	r3, r1
 8003e1a:	761a      	strb	r2, [r3, #24]
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	e000e100 	.word	0xe000e100
 8003e2c:	e000ed00 	.word	0xe000ed00

08003e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b089      	sub	sp, #36	; 0x24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	f1c3 0307 	rsb	r3, r3, #7
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	bf28      	it	cs
 8003e4e:	2304      	movcs	r3, #4
 8003e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	3304      	adds	r3, #4
 8003e56:	2b06      	cmp	r3, #6
 8003e58:	d902      	bls.n	8003e60 <NVIC_EncodePriority+0x30>
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	3b03      	subs	r3, #3
 8003e5e:	e000      	b.n	8003e62 <NVIC_EncodePriority+0x32>
 8003e60:	2300      	movs	r3, #0
 8003e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e64:	f04f 32ff 	mov.w	r2, #4294967295
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	43da      	mvns	r2, r3
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	401a      	ands	r2, r3
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e78:	f04f 31ff 	mov.w	r1, #4294967295
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e82:	43d9      	mvns	r1, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e88:	4313      	orrs	r3, r2
         );
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3724      	adds	r7, #36	; 0x24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
	...

08003e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ea8:	d301      	bcc.n	8003eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e00f      	b.n	8003ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eae:	4a0a      	ldr	r2, [pc, #40]	; (8003ed8 <SysTick_Config+0x40>)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003eb6:	210f      	movs	r1, #15
 8003eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ebc:	f7ff ff8e 	bl	8003ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ec0:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <SysTick_Config+0x40>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ec6:	4b04      	ldr	r3, [pc, #16]	; (8003ed8 <SysTick_Config+0x40>)
 8003ec8:	2207      	movs	r2, #7
 8003eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	e000e010 	.word	0xe000e010

08003edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7ff ff29 	bl	8003d3c <__NVIC_SetPriorityGrouping>
}
 8003eea:	bf00      	nop
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b086      	sub	sp, #24
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	4603      	mov	r3, r0
 8003efa:	60b9      	str	r1, [r7, #8]
 8003efc:	607a      	str	r2, [r7, #4]
 8003efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f00:	2300      	movs	r3, #0
 8003f02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f04:	f7ff ff3e 	bl	8003d84 <__NVIC_GetPriorityGrouping>
 8003f08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	68b9      	ldr	r1, [r7, #8]
 8003f0e:	6978      	ldr	r0, [r7, #20]
 8003f10:	f7ff ff8e 	bl	8003e30 <NVIC_EncodePriority>
 8003f14:	4602      	mov	r2, r0
 8003f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f1a:	4611      	mov	r1, r2
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff ff5d 	bl	8003ddc <__NVIC_SetPriority>
}
 8003f22:	bf00      	nop
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b082      	sub	sp, #8
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	4603      	mov	r3, r0
 8003f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff ff31 	bl	8003da0 <__NVIC_EnableIRQ>
}
 8003f3e:	bf00      	nop
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b082      	sub	sp, #8
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7ff ffa2 	bl	8003e98 <SysTick_Config>
 8003f54:	4603      	mov	r3, r0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8003f62:	f007 f9c5 	bl	800b2f0 <HAL_SYSTICK_Callback>
}
 8003f66:	bf00      	nop
 8003f68:	bd80      	pop	{r7, pc}
	...

08003f6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f78:	f7ff fa8c 	bl	8003494 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e099      	b.n	80040bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0201 	bic.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fa8:	e00f      	b.n	8003fca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003faa:	f7ff fa73 	bl	8003494 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b05      	cmp	r3, #5
 8003fb6:	d908      	bls.n	8003fca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2203      	movs	r2, #3
 8003fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e078      	b.n	80040bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1e8      	bne.n	8003faa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	4b38      	ldr	r3, [pc, #224]	; (80040c4 <HAL_DMA_Init+0x158>)
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ff6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004002:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800400e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	4313      	orrs	r3, r2
 800401a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	2b04      	cmp	r3, #4
 8004022:	d107      	bne.n	8004034 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402c:	4313      	orrs	r3, r2
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	4313      	orrs	r3, r2
 8004032:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f023 0307 	bic.w	r3, r3, #7
 800404a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	4313      	orrs	r3, r2
 8004054:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	2b04      	cmp	r3, #4
 800405c:	d117      	bne.n	800408e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	4313      	orrs	r3, r2
 8004066:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00e      	beq.n	800408e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 fa77 	bl	8004564 <DMA_CheckFifoParam>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d008      	beq.n	800408e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2240      	movs	r2, #64	; 0x40
 8004080:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800408a:	2301      	movs	r3, #1
 800408c:	e016      	b.n	80040bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 fa2e 	bl	80044f8 <DMA_CalcBaseAndBitshift>
 800409c:	4603      	mov	r3, r0
 800409e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a4:	223f      	movs	r2, #63	; 0x3f
 80040a6:	409a      	lsls	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	e010803f 	.word	0xe010803f

080040c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d101      	bne.n	80040ee <HAL_DMA_Start_IT+0x26>
 80040ea:	2302      	movs	r3, #2
 80040ec:	e048      	b.n	8004180 <HAL_DMA_Start_IT+0xb8>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d137      	bne.n	8004172 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2202      	movs	r2, #2
 8004106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	68b9      	ldr	r1, [r7, #8]
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 f9c0 	bl	800449c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004120:	223f      	movs	r2, #63	; 0x3f
 8004122:	409a      	lsls	r2, r3
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 0216 	orr.w	r2, r2, #22
 8004136:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	695a      	ldr	r2, [r3, #20]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004146:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	2b00      	cmp	r3, #0
 800414e:	d007      	beq.n	8004160 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0208 	orr.w	r2, r2, #8
 800415e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0201 	orr.w	r2, r2, #1
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	e005      	b.n	800417e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800417a:	2302      	movs	r3, #2
 800417c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800417e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004180:	4618      	mov	r0, r3
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004190:	2300      	movs	r3, #0
 8004192:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004194:	4b8e      	ldr	r3, [pc, #568]	; (80043d0 <HAL_DMA_IRQHandler+0x248>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a8e      	ldr	r2, [pc, #568]	; (80043d4 <HAL_DMA_IRQHandler+0x24c>)
 800419a:	fba2 2303 	umull	r2, r3, r2, r3
 800419e:	0a9b      	lsrs	r3, r3, #10
 80041a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b2:	2208      	movs	r2, #8
 80041b4:	409a      	lsls	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	4013      	ands	r3, r2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d01a      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d013      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0204 	bic.w	r2, r2, #4
 80041da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e0:	2208      	movs	r2, #8
 80041e2:	409a      	lsls	r2, r3
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ec:	f043 0201 	orr.w	r2, r3, #1
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f8:	2201      	movs	r2, #1
 80041fa:	409a      	lsls	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4013      	ands	r3, r2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d012      	beq.n	800422a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00b      	beq.n	800422a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004216:	2201      	movs	r2, #1
 8004218:	409a      	lsls	r2, r3
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004222:	f043 0202 	orr.w	r2, r3, #2
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422e:	2204      	movs	r2, #4
 8004230:	409a      	lsls	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	4013      	ands	r3, r2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d012      	beq.n	8004260 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00b      	beq.n	8004260 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424c:	2204      	movs	r2, #4
 800424e:	409a      	lsls	r2, r3
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004258:	f043 0204 	orr.w	r2, r3, #4
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004264:	2210      	movs	r2, #16
 8004266:	409a      	lsls	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4013      	ands	r3, r2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d043      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d03c      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004282:	2210      	movs	r2, #16
 8004284:	409a      	lsls	r2, r3
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d018      	beq.n	80042ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d108      	bne.n	80042b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d024      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	4798      	blx	r3
 80042b6:	e01f      	b.n	80042f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d01b      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	4798      	blx	r3
 80042c8:	e016      	b.n	80042f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d107      	bne.n	80042e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0208 	bic.w	r2, r2, #8
 80042e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fc:	2220      	movs	r2, #32
 80042fe:	409a      	lsls	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4013      	ands	r3, r2
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 808f 	beq.w	8004428 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0310 	and.w	r3, r3, #16
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 8087 	beq.w	8004428 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800431e:	2220      	movs	r2, #32
 8004320:	409a      	lsls	r2, r3
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b05      	cmp	r3, #5
 8004330:	d136      	bne.n	80043a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 0216 	bic.w	r2, r2, #22
 8004340:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695a      	ldr	r2, [r3, #20]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004350:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	2b00      	cmp	r3, #0
 8004358:	d103      	bne.n	8004362 <HAL_DMA_IRQHandler+0x1da>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800435e:	2b00      	cmp	r3, #0
 8004360:	d007      	beq.n	8004372 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0208 	bic.w	r2, r2, #8
 8004370:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004376:	223f      	movs	r2, #63	; 0x3f
 8004378:	409a      	lsls	r2, r3
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004392:	2b00      	cmp	r3, #0
 8004394:	d07e      	beq.n	8004494 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	4798      	blx	r3
        }
        return;
 800439e:	e079      	b.n	8004494 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d01d      	beq.n	80043ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10d      	bne.n	80043d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d031      	beq.n	8004428 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	4798      	blx	r3
 80043cc:	e02c      	b.n	8004428 <HAL_DMA_IRQHandler+0x2a0>
 80043ce:	bf00      	nop
 80043d0:	20000028 	.word	0x20000028
 80043d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d023      	beq.n	8004428 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	4798      	blx	r3
 80043e8:	e01e      	b.n	8004428 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10f      	bne.n	8004418 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0210 	bic.w	r2, r2, #16
 8004406:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441c:	2b00      	cmp	r3, #0
 800441e:	d003      	beq.n	8004428 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442c:	2b00      	cmp	r3, #0
 800442e:	d032      	beq.n	8004496 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d022      	beq.n	8004482 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2205      	movs	r2, #5
 8004440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 0201 	bic.w	r2, r2, #1
 8004452:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	3301      	adds	r3, #1
 8004458:	60bb      	str	r3, [r7, #8]
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	429a      	cmp	r2, r3
 800445e:	d307      	bcc.n	8004470 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1f2      	bne.n	8004454 <HAL_DMA_IRQHandler+0x2cc>
 800446e:	e000      	b.n	8004472 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004470:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004486:	2b00      	cmp	r3, #0
 8004488:	d005      	beq.n	8004496 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	4798      	blx	r3
 8004492:	e000      	b.n	8004496 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004494:	bf00      	nop
    }
  }
}
 8004496:	3718      	adds	r7, #24
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	2b40      	cmp	r3, #64	; 0x40
 80044c8:	d108      	bne.n	80044dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044da:	e007      	b.n	80044ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	60da      	str	r2, [r3, #12]
}
 80044ec:	bf00      	nop
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	3b10      	subs	r3, #16
 8004508:	4a13      	ldr	r2, [pc, #76]	; (8004558 <DMA_CalcBaseAndBitshift+0x60>)
 800450a:	fba2 2303 	umull	r2, r3, r2, r3
 800450e:	091b      	lsrs	r3, r3, #4
 8004510:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004512:	4a12      	ldr	r2, [pc, #72]	; (800455c <DMA_CalcBaseAndBitshift+0x64>)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4413      	add	r3, r2
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	461a      	mov	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b03      	cmp	r3, #3
 8004524:	d908      	bls.n	8004538 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	4b0c      	ldr	r3, [pc, #48]	; (8004560 <DMA_CalcBaseAndBitshift+0x68>)
 800452e:	4013      	ands	r3, r2
 8004530:	1d1a      	adds	r2, r3, #4
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	659a      	str	r2, [r3, #88]	; 0x58
 8004536:	e006      	b.n	8004546 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	461a      	mov	r2, r3
 800453e:	4b08      	ldr	r3, [pc, #32]	; (8004560 <DMA_CalcBaseAndBitshift+0x68>)
 8004540:	4013      	ands	r3, r2
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800454a:	4618      	mov	r0, r3
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	aaaaaaab 	.word	0xaaaaaaab
 800455c:	0800cd74 	.word	0x0800cd74
 8004560:	fffffc00 	.word	0xfffffc00

08004564 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800456c:	2300      	movs	r3, #0
 800456e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004574:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d11f      	bne.n	80045be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b03      	cmp	r3, #3
 8004582:	d856      	bhi.n	8004632 <DMA_CheckFifoParam+0xce>
 8004584:	a201      	add	r2, pc, #4	; (adr r2, 800458c <DMA_CheckFifoParam+0x28>)
 8004586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458a:	bf00      	nop
 800458c:	0800459d 	.word	0x0800459d
 8004590:	080045af 	.word	0x080045af
 8004594:	0800459d 	.word	0x0800459d
 8004598:	08004633 	.word	0x08004633
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d046      	beq.n	8004636 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045ac:	e043      	b.n	8004636 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045b6:	d140      	bne.n	800463a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045bc:	e03d      	b.n	800463a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045c6:	d121      	bne.n	800460c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2b03      	cmp	r3, #3
 80045cc:	d837      	bhi.n	800463e <DMA_CheckFifoParam+0xda>
 80045ce:	a201      	add	r2, pc, #4	; (adr r2, 80045d4 <DMA_CheckFifoParam+0x70>)
 80045d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d4:	080045e5 	.word	0x080045e5
 80045d8:	080045eb 	.word	0x080045eb
 80045dc:	080045e5 	.word	0x080045e5
 80045e0:	080045fd 	.word	0x080045fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	73fb      	strb	r3, [r7, #15]
      break;
 80045e8:	e030      	b.n	800464c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d025      	beq.n	8004642 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045fa:	e022      	b.n	8004642 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004604:	d11f      	bne.n	8004646 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800460a:	e01c      	b.n	8004646 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2b02      	cmp	r3, #2
 8004610:	d903      	bls.n	800461a <DMA_CheckFifoParam+0xb6>
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2b03      	cmp	r3, #3
 8004616:	d003      	beq.n	8004620 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004618:	e018      	b.n	800464c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	73fb      	strb	r3, [r7, #15]
      break;
 800461e:	e015      	b.n	800464c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00e      	beq.n	800464a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	73fb      	strb	r3, [r7, #15]
      break;
 8004630:	e00b      	b.n	800464a <DMA_CheckFifoParam+0xe6>
      break;
 8004632:	bf00      	nop
 8004634:	e00a      	b.n	800464c <DMA_CheckFifoParam+0xe8>
      break;
 8004636:	bf00      	nop
 8004638:	e008      	b.n	800464c <DMA_CheckFifoParam+0xe8>
      break;
 800463a:	bf00      	nop
 800463c:	e006      	b.n	800464c <DMA_CheckFifoParam+0xe8>
      break;
 800463e:	bf00      	nop
 8004640:	e004      	b.n	800464c <DMA_CheckFifoParam+0xe8>
      break;
 8004642:	bf00      	nop
 8004644:	e002      	b.n	800464c <DMA_CheckFifoParam+0xe8>
      break;   
 8004646:	bf00      	nop
 8004648:	e000      	b.n	800464c <DMA_CheckFifoParam+0xe8>
      break;
 800464a:	bf00      	nop
    }
  } 
  
  return status; 
 800464c:	7bfb      	ldrb	r3, [r7, #15]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop

0800465c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800465c:	b480      	push	{r7}
 800465e:	b089      	sub	sp, #36	; 0x24
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004666:	2300      	movs	r3, #0
 8004668:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800466a:	2300      	movs	r3, #0
 800466c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800466e:	2300      	movs	r3, #0
 8004670:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004672:	2300      	movs	r3, #0
 8004674:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004676:	2300      	movs	r3, #0
 8004678:	61fb      	str	r3, [r7, #28]
 800467a:	e169      	b.n	8004950 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800467c:	2201      	movs	r2, #1
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	fa02 f303 	lsl.w	r3, r2, r3
 8004684:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	4013      	ands	r3, r2
 800468e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	429a      	cmp	r2, r3
 8004696:	f040 8158 	bne.w	800494a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f003 0303 	and.w	r3, r3, #3
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d005      	beq.n	80046b2 <HAL_GPIO_Init+0x56>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d130      	bne.n	8004714 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	2203      	movs	r2, #3
 80046be:	fa02 f303 	lsl.w	r3, r2, r3
 80046c2:	43db      	mvns	r3, r3
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	4013      	ands	r3, r2
 80046c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	fa02 f303 	lsl.w	r3, r2, r3
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	4313      	orrs	r3, r2
 80046da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046e8:	2201      	movs	r2, #1
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	43db      	mvns	r3, r3
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	4013      	ands	r3, r2
 80046f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	091b      	lsrs	r3, r3, #4
 80046fe:	f003 0201 	and.w	r2, r3, #1
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	4313      	orrs	r3, r2
 800470c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f003 0303 	and.w	r3, r3, #3
 800471c:	2b03      	cmp	r3, #3
 800471e:	d017      	beq.n	8004750 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	2203      	movs	r2, #3
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	43db      	mvns	r3, r3
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	4013      	ands	r3, r2
 8004736:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	fa02 f303 	lsl.w	r3, r2, r3
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	4313      	orrs	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f003 0303 	and.w	r3, r3, #3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d123      	bne.n	80047a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	08da      	lsrs	r2, r3, #3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3208      	adds	r2, #8
 8004764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	220f      	movs	r2, #15
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	43db      	mvns	r3, r3
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	4013      	ands	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	691a      	ldr	r2, [r3, #16]
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	f003 0307 	and.w	r3, r3, #7
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	4313      	orrs	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	08da      	lsrs	r2, r3, #3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	3208      	adds	r2, #8
 800479e:	69b9      	ldr	r1, [r7, #24]
 80047a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	2203      	movs	r2, #3
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	43db      	mvns	r3, r3
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	4013      	ands	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f003 0203 	and.w	r2, r3, #3
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	fa02 f303 	lsl.w	r3, r2, r3
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 80b2 	beq.w	800494a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047e6:	4b60      	ldr	r3, [pc, #384]	; (8004968 <HAL_GPIO_Init+0x30c>)
 80047e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ea:	4a5f      	ldr	r2, [pc, #380]	; (8004968 <HAL_GPIO_Init+0x30c>)
 80047ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047f0:	6453      	str	r3, [r2, #68]	; 0x44
 80047f2:	4b5d      	ldr	r3, [pc, #372]	; (8004968 <HAL_GPIO_Init+0x30c>)
 80047f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047fa:	60fb      	str	r3, [r7, #12]
 80047fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80047fe:	4a5b      	ldr	r2, [pc, #364]	; (800496c <HAL_GPIO_Init+0x310>)
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	089b      	lsrs	r3, r3, #2
 8004804:	3302      	adds	r3, #2
 8004806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800480a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	220f      	movs	r2, #15
 8004816:	fa02 f303 	lsl.w	r3, r2, r3
 800481a:	43db      	mvns	r3, r3
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	4013      	ands	r3, r2
 8004820:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a52      	ldr	r2, [pc, #328]	; (8004970 <HAL_GPIO_Init+0x314>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d02b      	beq.n	8004882 <HAL_GPIO_Init+0x226>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a51      	ldr	r2, [pc, #324]	; (8004974 <HAL_GPIO_Init+0x318>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d025      	beq.n	800487e <HAL_GPIO_Init+0x222>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a50      	ldr	r2, [pc, #320]	; (8004978 <HAL_GPIO_Init+0x31c>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d01f      	beq.n	800487a <HAL_GPIO_Init+0x21e>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a4f      	ldr	r2, [pc, #316]	; (800497c <HAL_GPIO_Init+0x320>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d019      	beq.n	8004876 <HAL_GPIO_Init+0x21a>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a4e      	ldr	r2, [pc, #312]	; (8004980 <HAL_GPIO_Init+0x324>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d013      	beq.n	8004872 <HAL_GPIO_Init+0x216>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a4d      	ldr	r2, [pc, #308]	; (8004984 <HAL_GPIO_Init+0x328>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00d      	beq.n	800486e <HAL_GPIO_Init+0x212>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a4c      	ldr	r2, [pc, #304]	; (8004988 <HAL_GPIO_Init+0x32c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d007      	beq.n	800486a <HAL_GPIO_Init+0x20e>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a4b      	ldr	r2, [pc, #300]	; (800498c <HAL_GPIO_Init+0x330>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d101      	bne.n	8004866 <HAL_GPIO_Init+0x20a>
 8004862:	2307      	movs	r3, #7
 8004864:	e00e      	b.n	8004884 <HAL_GPIO_Init+0x228>
 8004866:	2308      	movs	r3, #8
 8004868:	e00c      	b.n	8004884 <HAL_GPIO_Init+0x228>
 800486a:	2306      	movs	r3, #6
 800486c:	e00a      	b.n	8004884 <HAL_GPIO_Init+0x228>
 800486e:	2305      	movs	r3, #5
 8004870:	e008      	b.n	8004884 <HAL_GPIO_Init+0x228>
 8004872:	2304      	movs	r3, #4
 8004874:	e006      	b.n	8004884 <HAL_GPIO_Init+0x228>
 8004876:	2303      	movs	r3, #3
 8004878:	e004      	b.n	8004884 <HAL_GPIO_Init+0x228>
 800487a:	2302      	movs	r3, #2
 800487c:	e002      	b.n	8004884 <HAL_GPIO_Init+0x228>
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <HAL_GPIO_Init+0x228>
 8004882:	2300      	movs	r3, #0
 8004884:	69fa      	ldr	r2, [r7, #28]
 8004886:	f002 0203 	and.w	r2, r2, #3
 800488a:	0092      	lsls	r2, r2, #2
 800488c:	4093      	lsls	r3, r2
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	4313      	orrs	r3, r2
 8004892:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004894:	4935      	ldr	r1, [pc, #212]	; (800496c <HAL_GPIO_Init+0x310>)
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	089b      	lsrs	r3, r3, #2
 800489a:	3302      	adds	r3, #2
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048a2:	4b3b      	ldr	r3, [pc, #236]	; (8004990 <HAL_GPIO_Init+0x334>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	43db      	mvns	r3, r3
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	4013      	ands	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048c6:	4a32      	ldr	r2, [pc, #200]	; (8004990 <HAL_GPIO_Init+0x334>)
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048cc:	4b30      	ldr	r3, [pc, #192]	; (8004990 <HAL_GPIO_Init+0x334>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	43db      	mvns	r3, r3
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	4013      	ands	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048f0:	4a27      	ldr	r2, [pc, #156]	; (8004990 <HAL_GPIO_Init+0x334>)
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048f6:	4b26      	ldr	r3, [pc, #152]	; (8004990 <HAL_GPIO_Init+0x334>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	43db      	mvns	r3, r3
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	4013      	ands	r3, r2
 8004904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	4313      	orrs	r3, r2
 8004918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800491a:	4a1d      	ldr	r2, [pc, #116]	; (8004990 <HAL_GPIO_Init+0x334>)
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004920:	4b1b      	ldr	r3, [pc, #108]	; (8004990 <HAL_GPIO_Init+0x334>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	43db      	mvns	r3, r3
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	4013      	ands	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	4313      	orrs	r3, r2
 8004942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004944:	4a12      	ldr	r2, [pc, #72]	; (8004990 <HAL_GPIO_Init+0x334>)
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	3301      	adds	r3, #1
 800494e:	61fb      	str	r3, [r7, #28]
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	2b0f      	cmp	r3, #15
 8004954:	f67f ae92 	bls.w	800467c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004958:	bf00      	nop
 800495a:	bf00      	nop
 800495c:	3724      	adds	r7, #36	; 0x24
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	40023800 	.word	0x40023800
 800496c:	40013800 	.word	0x40013800
 8004970:	40020000 	.word	0x40020000
 8004974:	40020400 	.word	0x40020400
 8004978:	40020800 	.word	0x40020800
 800497c:	40020c00 	.word	0x40020c00
 8004980:	40021000 	.word	0x40021000
 8004984:	40021400 	.word	0x40021400
 8004988:	40021800 	.word	0x40021800
 800498c:	40021c00 	.word	0x40021c00
 8004990:	40013c00 	.word	0x40013c00

08004994 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	460b      	mov	r3, r1
 800499e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	887b      	ldrh	r3, [r7, #2]
 80049a6:	4013      	ands	r3, r2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049ac:	2301      	movs	r3, #1
 80049ae:	73fb      	strb	r3, [r7, #15]
 80049b0:	e001      	b.n	80049b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049b2:	2300      	movs	r3, #0
 80049b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	807b      	strh	r3, [r7, #2]
 80049d0:	4613      	mov	r3, r2
 80049d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049d4:	787b      	ldrb	r3, [r7, #1]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049da:	887a      	ldrh	r2, [r7, #2]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80049e0:	e003      	b.n	80049ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80049e2:	887b      	ldrh	r3, [r7, #2]
 80049e4:	041a      	lsls	r2, r3, #16
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	619a      	str	r2, [r3, #24]
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
	...

080049f8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049fc:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a04      	ldr	r2, [pc, #16]	; (8004a14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a06:	6013      	str	r3, [r2, #0]
}
 8004a08:	bf00      	nop
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	40007000 	.word	0x40007000

08004a18 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a22:	4b23      	ldr	r3, [pc, #140]	; (8004ab0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	4a22      	ldr	r2, [pc, #136]	; (8004ab0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a2e:	4b20      	ldr	r3, [pc, #128]	; (8004ab0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a36:	603b      	str	r3, [r7, #0]
 8004a38:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a3a:	4b1e      	ldr	r3, [pc, #120]	; (8004ab4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a1d      	ldr	r2, [pc, #116]	; (8004ab4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a44:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a46:	f7fe fd25 	bl	8003494 <HAL_GetTick>
 8004a4a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a4c:	e009      	b.n	8004a62 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a4e:	f7fe fd21 	bl	8003494 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a5c:	d901      	bls.n	8004a62 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e022      	b.n	8004aa8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a62:	4b14      	ldr	r3, [pc, #80]	; (8004ab4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a6e:	d1ee      	bne.n	8004a4e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004a70:	4b10      	ldr	r3, [pc, #64]	; (8004ab4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a0f      	ldr	r2, [pc, #60]	; (8004ab4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a7a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a7c:	f7fe fd0a 	bl	8003494 <HAL_GetTick>
 8004a80:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a82:	e009      	b.n	8004a98 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a84:	f7fe fd06 	bl	8003494 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a92:	d901      	bls.n	8004a98 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e007      	b.n	8004aa8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a98:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004aa4:	d1ee      	bne.n	8004a84 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	40007000 	.word	0x40007000

08004ab8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e291      	b.n	8004ff2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 8087 	beq.w	8004bea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004adc:	4b96      	ldr	r3, [pc, #600]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f003 030c 	and.w	r3, r3, #12
 8004ae4:	2b04      	cmp	r3, #4
 8004ae6:	d00c      	beq.n	8004b02 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ae8:	4b93      	ldr	r3, [pc, #588]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f003 030c 	and.w	r3, r3, #12
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d112      	bne.n	8004b1a <HAL_RCC_OscConfig+0x62>
 8004af4:	4b90      	ldr	r3, [pc, #576]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004afc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b00:	d10b      	bne.n	8004b1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b02:	4b8d      	ldr	r3, [pc, #564]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d06c      	beq.n	8004be8 <HAL_RCC_OscConfig+0x130>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d168      	bne.n	8004be8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e26b      	b.n	8004ff2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b22:	d106      	bne.n	8004b32 <HAL_RCC_OscConfig+0x7a>
 8004b24:	4b84      	ldr	r3, [pc, #528]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a83      	ldr	r2, [pc, #524]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b2e:	6013      	str	r3, [r2, #0]
 8004b30:	e02e      	b.n	8004b90 <HAL_RCC_OscConfig+0xd8>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10c      	bne.n	8004b54 <HAL_RCC_OscConfig+0x9c>
 8004b3a:	4b7f      	ldr	r3, [pc, #508]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a7e      	ldr	r2, [pc, #504]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	4b7c      	ldr	r3, [pc, #496]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a7b      	ldr	r2, [pc, #492]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004b4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	e01d      	b.n	8004b90 <HAL_RCC_OscConfig+0xd8>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b5c:	d10c      	bne.n	8004b78 <HAL_RCC_OscConfig+0xc0>
 8004b5e:	4b76      	ldr	r3, [pc, #472]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a75      	ldr	r2, [pc, #468]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	4b73      	ldr	r3, [pc, #460]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a72      	ldr	r2, [pc, #456]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b74:	6013      	str	r3, [r2, #0]
 8004b76:	e00b      	b.n	8004b90 <HAL_RCC_OscConfig+0xd8>
 8004b78:	4b6f      	ldr	r3, [pc, #444]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a6e      	ldr	r2, [pc, #440]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b82:	6013      	str	r3, [r2, #0]
 8004b84:	4b6c      	ldr	r3, [pc, #432]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a6b      	ldr	r2, [pc, #428]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d013      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b98:	f7fe fc7c 	bl	8003494 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ba0:	f7fe fc78 	bl	8003494 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b64      	cmp	r3, #100	; 0x64
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e21f      	b.n	8004ff2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bb2:	4b61      	ldr	r3, [pc, #388]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0f0      	beq.n	8004ba0 <HAL_RCC_OscConfig+0xe8>
 8004bbe:	e014      	b.n	8004bea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc0:	f7fe fc68 	bl	8003494 <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bc8:	f7fe fc64 	bl	8003494 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b64      	cmp	r3, #100	; 0x64
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e20b      	b.n	8004ff2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bda:	4b57      	ldr	r3, [pc, #348]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1f0      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x110>
 8004be6:	e000      	b.n	8004bea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d069      	beq.n	8004cca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bf6:	4b50      	ldr	r3, [pc, #320]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 030c 	and.w	r3, r3, #12
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00b      	beq.n	8004c1a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c02:	4b4d      	ldr	r3, [pc, #308]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 030c 	and.w	r3, r3, #12
 8004c0a:	2b08      	cmp	r3, #8
 8004c0c:	d11c      	bne.n	8004c48 <HAL_RCC_OscConfig+0x190>
 8004c0e:	4b4a      	ldr	r3, [pc, #296]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d116      	bne.n	8004c48 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c1a:	4b47      	ldr	r3, [pc, #284]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d005      	beq.n	8004c32 <HAL_RCC_OscConfig+0x17a>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d001      	beq.n	8004c32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e1df      	b.n	8004ff2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c32:	4b41      	ldr	r3, [pc, #260]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	493d      	ldr	r1, [pc, #244]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c46:	e040      	b.n	8004cca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d023      	beq.n	8004c98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c50:	4b39      	ldr	r3, [pc, #228]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a38      	ldr	r2, [pc, #224]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004c56:	f043 0301 	orr.w	r3, r3, #1
 8004c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5c:	f7fe fc1a 	bl	8003494 <HAL_GetTick>
 8004c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c62:	e008      	b.n	8004c76 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c64:	f7fe fc16 	bl	8003494 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e1bd      	b.n	8004ff2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c76:	4b30      	ldr	r3, [pc, #192]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0f0      	beq.n	8004c64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c82:	4b2d      	ldr	r3, [pc, #180]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	4929      	ldr	r1, [pc, #164]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	600b      	str	r3, [r1, #0]
 8004c96:	e018      	b.n	8004cca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c98:	4b27      	ldr	r3, [pc, #156]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a26      	ldr	r2, [pc, #152]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004c9e:	f023 0301 	bic.w	r3, r3, #1
 8004ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca4:	f7fe fbf6 	bl	8003494 <HAL_GetTick>
 8004ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cac:	f7fe fbf2 	bl	8003494 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e199      	b.n	8004ff2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cbe:	4b1e      	ldr	r3, [pc, #120]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1f0      	bne.n	8004cac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0308 	and.w	r3, r3, #8
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d038      	beq.n	8004d48 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d019      	beq.n	8004d12 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cde:	4b16      	ldr	r3, [pc, #88]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ce2:	4a15      	ldr	r2, [pc, #84]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004ce4:	f043 0301 	orr.w	r3, r3, #1
 8004ce8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cea:	f7fe fbd3 	bl	8003494 <HAL_GetTick>
 8004cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cf0:	e008      	b.n	8004d04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cf2:	f7fe fbcf 	bl	8003494 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e176      	b.n	8004ff2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d04:	4b0c      	ldr	r3, [pc, #48]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d0f0      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x23a>
 8004d10:	e01a      	b.n	8004d48 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d12:	4b09      	ldr	r3, [pc, #36]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d16:	4a08      	ldr	r2, [pc, #32]	; (8004d38 <HAL_RCC_OscConfig+0x280>)
 8004d18:	f023 0301 	bic.w	r3, r3, #1
 8004d1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d1e:	f7fe fbb9 	bl	8003494 <HAL_GetTick>
 8004d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d24:	e00a      	b.n	8004d3c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d26:	f7fe fbb5 	bl	8003494 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d903      	bls.n	8004d3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e15c      	b.n	8004ff2 <HAL_RCC_OscConfig+0x53a>
 8004d38:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d3c:	4b91      	ldr	r3, [pc, #580]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1ee      	bne.n	8004d26 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0304 	and.w	r3, r3, #4
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f000 80a4 	beq.w	8004e9e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d56:	4b8b      	ldr	r3, [pc, #556]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10d      	bne.n	8004d7e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d62:	4b88      	ldr	r3, [pc, #544]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	4a87      	ldr	r2, [pc, #540]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d6e:	4b85      	ldr	r3, [pc, #532]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d76:	60bb      	str	r3, [r7, #8]
 8004d78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d7e:	4b82      	ldr	r3, [pc, #520]	; (8004f88 <HAL_RCC_OscConfig+0x4d0>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d118      	bne.n	8004dbc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004d8a:	4b7f      	ldr	r3, [pc, #508]	; (8004f88 <HAL_RCC_OscConfig+0x4d0>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a7e      	ldr	r2, [pc, #504]	; (8004f88 <HAL_RCC_OscConfig+0x4d0>)
 8004d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d96:	f7fe fb7d 	bl	8003494 <HAL_GetTick>
 8004d9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d9c:	e008      	b.n	8004db0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d9e:	f7fe fb79 	bl	8003494 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b64      	cmp	r3, #100	; 0x64
 8004daa:	d901      	bls.n	8004db0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e120      	b.n	8004ff2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004db0:	4b75      	ldr	r3, [pc, #468]	; (8004f88 <HAL_RCC_OscConfig+0x4d0>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d0f0      	beq.n	8004d9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d106      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x31a>
 8004dc4:	4b6f      	ldr	r3, [pc, #444]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc8:	4a6e      	ldr	r2, [pc, #440]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004dca:	f043 0301 	orr.w	r3, r3, #1
 8004dce:	6713      	str	r3, [r2, #112]	; 0x70
 8004dd0:	e02d      	b.n	8004e2e <HAL_RCC_OscConfig+0x376>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10c      	bne.n	8004df4 <HAL_RCC_OscConfig+0x33c>
 8004dda:	4b6a      	ldr	r3, [pc, #424]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dde:	4a69      	ldr	r2, [pc, #420]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004de0:	f023 0301 	bic.w	r3, r3, #1
 8004de4:	6713      	str	r3, [r2, #112]	; 0x70
 8004de6:	4b67      	ldr	r3, [pc, #412]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dea:	4a66      	ldr	r2, [pc, #408]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004dec:	f023 0304 	bic.w	r3, r3, #4
 8004df0:	6713      	str	r3, [r2, #112]	; 0x70
 8004df2:	e01c      	b.n	8004e2e <HAL_RCC_OscConfig+0x376>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	2b05      	cmp	r3, #5
 8004dfa:	d10c      	bne.n	8004e16 <HAL_RCC_OscConfig+0x35e>
 8004dfc:	4b61      	ldr	r3, [pc, #388]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e00:	4a60      	ldr	r2, [pc, #384]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004e02:	f043 0304 	orr.w	r3, r3, #4
 8004e06:	6713      	str	r3, [r2, #112]	; 0x70
 8004e08:	4b5e      	ldr	r3, [pc, #376]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0c:	4a5d      	ldr	r2, [pc, #372]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004e0e:	f043 0301 	orr.w	r3, r3, #1
 8004e12:	6713      	str	r3, [r2, #112]	; 0x70
 8004e14:	e00b      	b.n	8004e2e <HAL_RCC_OscConfig+0x376>
 8004e16:	4b5b      	ldr	r3, [pc, #364]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1a:	4a5a      	ldr	r2, [pc, #360]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004e1c:	f023 0301 	bic.w	r3, r3, #1
 8004e20:	6713      	str	r3, [r2, #112]	; 0x70
 8004e22:	4b58      	ldr	r3, [pc, #352]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e26:	4a57      	ldr	r2, [pc, #348]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004e28:	f023 0304 	bic.w	r3, r3, #4
 8004e2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d015      	beq.n	8004e62 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e36:	f7fe fb2d 	bl	8003494 <HAL_GetTick>
 8004e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e3c:	e00a      	b.n	8004e54 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e3e:	f7fe fb29 	bl	8003494 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e0ce      	b.n	8004ff2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e54:	4b4b      	ldr	r3, [pc, #300]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0ee      	beq.n	8004e3e <HAL_RCC_OscConfig+0x386>
 8004e60:	e014      	b.n	8004e8c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e62:	f7fe fb17 	bl	8003494 <HAL_GetTick>
 8004e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e68:	e00a      	b.n	8004e80 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e6a:	f7fe fb13 	bl	8003494 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e0b8      	b.n	8004ff2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e80:	4b40      	ldr	r3, [pc, #256]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1ee      	bne.n	8004e6a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e8c:	7dfb      	ldrb	r3, [r7, #23]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d105      	bne.n	8004e9e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e92:	4b3c      	ldr	r3, [pc, #240]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	4a3b      	ldr	r2, [pc, #236]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 80a4 	beq.w	8004ff0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ea8:	4b36      	ldr	r3, [pc, #216]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f003 030c 	and.w	r3, r3, #12
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d06b      	beq.n	8004f8c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d149      	bne.n	8004f50 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ebc:	4b31      	ldr	r3, [pc, #196]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a30      	ldr	r2, [pc, #192]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec8:	f7fe fae4 	bl	8003494 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ed0:	f7fe fae0 	bl	8003494 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e087      	b.n	8004ff2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ee2:	4b28      	ldr	r3, [pc, #160]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1f0      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	69da      	ldr	r2, [r3, #28]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	019b      	lsls	r3, r3, #6
 8004efe:	431a      	orrs	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f04:	085b      	lsrs	r3, r3, #1
 8004f06:	3b01      	subs	r3, #1
 8004f08:	041b      	lsls	r3, r3, #16
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f10:	061b      	lsls	r3, r3, #24
 8004f12:	4313      	orrs	r3, r2
 8004f14:	4a1b      	ldr	r2, [pc, #108]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004f16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f1a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f1c:	4b19      	ldr	r3, [pc, #100]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a18      	ldr	r2, [pc, #96]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004f22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f28:	f7fe fab4 	bl	8003494 <HAL_GetTick>
 8004f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f30:	f7fe fab0 	bl	8003494 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e057      	b.n	8004ff2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f42:	4b10      	ldr	r3, [pc, #64]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d0f0      	beq.n	8004f30 <HAL_RCC_OscConfig+0x478>
 8004f4e:	e04f      	b.n	8004ff0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f50:	4b0c      	ldr	r3, [pc, #48]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a0b      	ldr	r2, [pc, #44]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004f56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5c:	f7fe fa9a 	bl	8003494 <HAL_GetTick>
 8004f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f62:	e008      	b.n	8004f76 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f64:	f7fe fa96 	bl	8003494 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e03d      	b.n	8004ff2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f76:	4b03      	ldr	r3, [pc, #12]	; (8004f84 <HAL_RCC_OscConfig+0x4cc>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1f0      	bne.n	8004f64 <HAL_RCC_OscConfig+0x4ac>
 8004f82:	e035      	b.n	8004ff0 <HAL_RCC_OscConfig+0x538>
 8004f84:	40023800 	.word	0x40023800
 8004f88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004f8c:	4b1b      	ldr	r3, [pc, #108]	; (8004ffc <HAL_RCC_OscConfig+0x544>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d028      	beq.n	8004fec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d121      	bne.n	8004fec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d11a      	bne.n	8004fec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fc2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d111      	bne.n	8004fec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd2:	085b      	lsrs	r3, r3, #1
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d107      	bne.n	8004fec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d001      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e000      	b.n	8004ff2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3718      	adds	r7, #24
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	40023800 	.word	0x40023800

08005000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800500a:	2300      	movs	r3, #0
 800500c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e0d0      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005018:	4b6a      	ldr	r3, [pc, #424]	; (80051c4 <HAL_RCC_ClockConfig+0x1c4>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 030f 	and.w	r3, r3, #15
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	429a      	cmp	r2, r3
 8005024:	d910      	bls.n	8005048 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005026:	4b67      	ldr	r3, [pc, #412]	; (80051c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f023 020f 	bic.w	r2, r3, #15
 800502e:	4965      	ldr	r1, [pc, #404]	; (80051c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	4313      	orrs	r3, r2
 8005034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005036:	4b63      	ldr	r3, [pc, #396]	; (80051c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 030f 	and.w	r3, r3, #15
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	429a      	cmp	r2, r3
 8005042:	d001      	beq.n	8005048 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e0b8      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d020      	beq.n	8005096 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005060:	4b59      	ldr	r3, [pc, #356]	; (80051c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	4a58      	ldr	r2, [pc, #352]	; (80051c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005066:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800506a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0308 	and.w	r3, r3, #8
 8005074:	2b00      	cmp	r3, #0
 8005076:	d005      	beq.n	8005084 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005078:	4b53      	ldr	r3, [pc, #332]	; (80051c8 <HAL_RCC_ClockConfig+0x1c8>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	4a52      	ldr	r2, [pc, #328]	; (80051c8 <HAL_RCC_ClockConfig+0x1c8>)
 800507e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005082:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005084:	4b50      	ldr	r3, [pc, #320]	; (80051c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	494d      	ldr	r1, [pc, #308]	; (80051c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005092:	4313      	orrs	r3, r2
 8005094:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d040      	beq.n	8005124 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d107      	bne.n	80050ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050aa:	4b47      	ldr	r3, [pc, #284]	; (80051c8 <HAL_RCC_ClockConfig+0x1c8>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d115      	bne.n	80050e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e07f      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d107      	bne.n	80050d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050c2:	4b41      	ldr	r3, [pc, #260]	; (80051c8 <HAL_RCC_ClockConfig+0x1c8>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d109      	bne.n	80050e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e073      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050d2:	4b3d      	ldr	r3, [pc, #244]	; (80051c8 <HAL_RCC_ClockConfig+0x1c8>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e06b      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050e2:	4b39      	ldr	r3, [pc, #228]	; (80051c8 <HAL_RCC_ClockConfig+0x1c8>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f023 0203 	bic.w	r2, r3, #3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	4936      	ldr	r1, [pc, #216]	; (80051c8 <HAL_RCC_ClockConfig+0x1c8>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050f4:	f7fe f9ce 	bl	8003494 <HAL_GetTick>
 80050f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050fa:	e00a      	b.n	8005112 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050fc:	f7fe f9ca 	bl	8003494 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	f241 3288 	movw	r2, #5000	; 0x1388
 800510a:	4293      	cmp	r3, r2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e053      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005112:	4b2d      	ldr	r3, [pc, #180]	; (80051c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 020c 	and.w	r2, r3, #12
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	429a      	cmp	r2, r3
 8005122:	d1eb      	bne.n	80050fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005124:	4b27      	ldr	r3, [pc, #156]	; (80051c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 030f 	and.w	r3, r3, #15
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	429a      	cmp	r2, r3
 8005130:	d210      	bcs.n	8005154 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005132:	4b24      	ldr	r3, [pc, #144]	; (80051c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f023 020f 	bic.w	r2, r3, #15
 800513a:	4922      	ldr	r1, [pc, #136]	; (80051c4 <HAL_RCC_ClockConfig+0x1c4>)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	4313      	orrs	r3, r2
 8005140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005142:	4b20      	ldr	r3, [pc, #128]	; (80051c4 <HAL_RCC_ClockConfig+0x1c4>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 030f 	and.w	r3, r3, #15
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d001      	beq.n	8005154 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e032      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d008      	beq.n	8005172 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005160:	4b19      	ldr	r3, [pc, #100]	; (80051c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	4916      	ldr	r1, [pc, #88]	; (80051c8 <HAL_RCC_ClockConfig+0x1c8>)
 800516e:	4313      	orrs	r3, r2
 8005170:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	2b00      	cmp	r3, #0
 800517c:	d009      	beq.n	8005192 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800517e:	4b12      	ldr	r3, [pc, #72]	; (80051c8 <HAL_RCC_ClockConfig+0x1c8>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	490e      	ldr	r1, [pc, #56]	; (80051c8 <HAL_RCC_ClockConfig+0x1c8>)
 800518e:	4313      	orrs	r3, r2
 8005190:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005192:	f000 f821 	bl	80051d8 <HAL_RCC_GetSysClockFreq>
 8005196:	4602      	mov	r2, r0
 8005198:	4b0b      	ldr	r3, [pc, #44]	; (80051c8 <HAL_RCC_ClockConfig+0x1c8>)
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	091b      	lsrs	r3, r3, #4
 800519e:	f003 030f 	and.w	r3, r3, #15
 80051a2:	490a      	ldr	r1, [pc, #40]	; (80051cc <HAL_RCC_ClockConfig+0x1cc>)
 80051a4:	5ccb      	ldrb	r3, [r1, r3]
 80051a6:	fa22 f303 	lsr.w	r3, r2, r3
 80051aa:	4a09      	ldr	r2, [pc, #36]	; (80051d0 <HAL_RCC_ClockConfig+0x1d0>)
 80051ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051ae:	4b09      	ldr	r3, [pc, #36]	; (80051d4 <HAL_RCC_ClockConfig+0x1d4>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fe f92a 	bl	800340c <HAL_InitTick>

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	40023c00 	.word	0x40023c00
 80051c8:	40023800 	.word	0x40023800
 80051cc:	0800cd5c 	.word	0x0800cd5c
 80051d0:	20000028 	.word	0x20000028
 80051d4:	20000088 	.word	0x20000088

080051d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051dc:	b094      	sub	sp, #80	; 0x50
 80051de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80051e0:	2300      	movs	r3, #0
 80051e2:	647b      	str	r3, [r7, #68]	; 0x44
 80051e4:	2300      	movs	r3, #0
 80051e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051e8:	2300      	movs	r3, #0
 80051ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80051ec:	2300      	movs	r3, #0
 80051ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051f0:	4b79      	ldr	r3, [pc, #484]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f003 030c 	and.w	r3, r3, #12
 80051f8:	2b08      	cmp	r3, #8
 80051fa:	d00d      	beq.n	8005218 <HAL_RCC_GetSysClockFreq+0x40>
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	f200 80e1 	bhi.w	80053c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <HAL_RCC_GetSysClockFreq+0x34>
 8005206:	2b04      	cmp	r3, #4
 8005208:	d003      	beq.n	8005212 <HAL_RCC_GetSysClockFreq+0x3a>
 800520a:	e0db      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800520c:	4b73      	ldr	r3, [pc, #460]	; (80053dc <HAL_RCC_GetSysClockFreq+0x204>)
 800520e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005210:	e0db      	b.n	80053ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005212:	4b73      	ldr	r3, [pc, #460]	; (80053e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005214:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005216:	e0d8      	b.n	80053ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005218:	4b6f      	ldr	r3, [pc, #444]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005220:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005222:	4b6d      	ldr	r3, [pc, #436]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d063      	beq.n	80052f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800522e:	4b6a      	ldr	r3, [pc, #424]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	099b      	lsrs	r3, r3, #6
 8005234:	2200      	movs	r2, #0
 8005236:	63bb      	str	r3, [r7, #56]	; 0x38
 8005238:	63fa      	str	r2, [r7, #60]	; 0x3c
 800523a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005240:	633b      	str	r3, [r7, #48]	; 0x30
 8005242:	2300      	movs	r3, #0
 8005244:	637b      	str	r3, [r7, #52]	; 0x34
 8005246:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800524a:	4622      	mov	r2, r4
 800524c:	462b      	mov	r3, r5
 800524e:	f04f 0000 	mov.w	r0, #0
 8005252:	f04f 0100 	mov.w	r1, #0
 8005256:	0159      	lsls	r1, r3, #5
 8005258:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800525c:	0150      	lsls	r0, r2, #5
 800525e:	4602      	mov	r2, r0
 8005260:	460b      	mov	r3, r1
 8005262:	4621      	mov	r1, r4
 8005264:	1a51      	subs	r1, r2, r1
 8005266:	6139      	str	r1, [r7, #16]
 8005268:	4629      	mov	r1, r5
 800526a:	eb63 0301 	sbc.w	r3, r3, r1
 800526e:	617b      	str	r3, [r7, #20]
 8005270:	f04f 0200 	mov.w	r2, #0
 8005274:	f04f 0300 	mov.w	r3, #0
 8005278:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800527c:	4659      	mov	r1, fp
 800527e:	018b      	lsls	r3, r1, #6
 8005280:	4651      	mov	r1, sl
 8005282:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005286:	4651      	mov	r1, sl
 8005288:	018a      	lsls	r2, r1, #6
 800528a:	4651      	mov	r1, sl
 800528c:	ebb2 0801 	subs.w	r8, r2, r1
 8005290:	4659      	mov	r1, fp
 8005292:	eb63 0901 	sbc.w	r9, r3, r1
 8005296:	f04f 0200 	mov.w	r2, #0
 800529a:	f04f 0300 	mov.w	r3, #0
 800529e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052aa:	4690      	mov	r8, r2
 80052ac:	4699      	mov	r9, r3
 80052ae:	4623      	mov	r3, r4
 80052b0:	eb18 0303 	adds.w	r3, r8, r3
 80052b4:	60bb      	str	r3, [r7, #8]
 80052b6:	462b      	mov	r3, r5
 80052b8:	eb49 0303 	adc.w	r3, r9, r3
 80052bc:	60fb      	str	r3, [r7, #12]
 80052be:	f04f 0200 	mov.w	r2, #0
 80052c2:	f04f 0300 	mov.w	r3, #0
 80052c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052ca:	4629      	mov	r1, r5
 80052cc:	024b      	lsls	r3, r1, #9
 80052ce:	4621      	mov	r1, r4
 80052d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80052d4:	4621      	mov	r1, r4
 80052d6:	024a      	lsls	r2, r1, #9
 80052d8:	4610      	mov	r0, r2
 80052da:	4619      	mov	r1, r3
 80052dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052de:	2200      	movs	r2, #0
 80052e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80052e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052e8:	f7fb fc48 	bl	8000b7c <__aeabi_uldivmod>
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4613      	mov	r3, r2
 80052f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052f4:	e058      	b.n	80053a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052f6:	4b38      	ldr	r3, [pc, #224]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	099b      	lsrs	r3, r3, #6
 80052fc:	2200      	movs	r2, #0
 80052fe:	4618      	mov	r0, r3
 8005300:	4611      	mov	r1, r2
 8005302:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005306:	623b      	str	r3, [r7, #32]
 8005308:	2300      	movs	r3, #0
 800530a:	627b      	str	r3, [r7, #36]	; 0x24
 800530c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005310:	4642      	mov	r2, r8
 8005312:	464b      	mov	r3, r9
 8005314:	f04f 0000 	mov.w	r0, #0
 8005318:	f04f 0100 	mov.w	r1, #0
 800531c:	0159      	lsls	r1, r3, #5
 800531e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005322:	0150      	lsls	r0, r2, #5
 8005324:	4602      	mov	r2, r0
 8005326:	460b      	mov	r3, r1
 8005328:	4641      	mov	r1, r8
 800532a:	ebb2 0a01 	subs.w	sl, r2, r1
 800532e:	4649      	mov	r1, r9
 8005330:	eb63 0b01 	sbc.w	fp, r3, r1
 8005334:	f04f 0200 	mov.w	r2, #0
 8005338:	f04f 0300 	mov.w	r3, #0
 800533c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005340:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005344:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005348:	ebb2 040a 	subs.w	r4, r2, sl
 800534c:	eb63 050b 	sbc.w	r5, r3, fp
 8005350:	f04f 0200 	mov.w	r2, #0
 8005354:	f04f 0300 	mov.w	r3, #0
 8005358:	00eb      	lsls	r3, r5, #3
 800535a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800535e:	00e2      	lsls	r2, r4, #3
 8005360:	4614      	mov	r4, r2
 8005362:	461d      	mov	r5, r3
 8005364:	4643      	mov	r3, r8
 8005366:	18e3      	adds	r3, r4, r3
 8005368:	603b      	str	r3, [r7, #0]
 800536a:	464b      	mov	r3, r9
 800536c:	eb45 0303 	adc.w	r3, r5, r3
 8005370:	607b      	str	r3, [r7, #4]
 8005372:	f04f 0200 	mov.w	r2, #0
 8005376:	f04f 0300 	mov.w	r3, #0
 800537a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800537e:	4629      	mov	r1, r5
 8005380:	028b      	lsls	r3, r1, #10
 8005382:	4621      	mov	r1, r4
 8005384:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005388:	4621      	mov	r1, r4
 800538a:	028a      	lsls	r2, r1, #10
 800538c:	4610      	mov	r0, r2
 800538e:	4619      	mov	r1, r3
 8005390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005392:	2200      	movs	r2, #0
 8005394:	61bb      	str	r3, [r7, #24]
 8005396:	61fa      	str	r2, [r7, #28]
 8005398:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800539c:	f7fb fbee 	bl	8000b7c <__aeabi_uldivmod>
 80053a0:	4602      	mov	r2, r0
 80053a2:	460b      	mov	r3, r1
 80053a4:	4613      	mov	r3, r2
 80053a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80053a8:	4b0b      	ldr	r3, [pc, #44]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	0c1b      	lsrs	r3, r3, #16
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	3301      	adds	r3, #1
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80053b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053c2:	e002      	b.n	80053ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053c4:	4b05      	ldr	r3, [pc, #20]	; (80053dc <HAL_RCC_GetSysClockFreq+0x204>)
 80053c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3750      	adds	r7, #80	; 0x50
 80053d0:	46bd      	mov	sp, r7
 80053d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053d6:	bf00      	nop
 80053d8:	40023800 	.word	0x40023800
 80053dc:	00f42400 	.word	0x00f42400
 80053e0:	007a1200 	.word	0x007a1200

080053e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053e4:	b480      	push	{r7}
 80053e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053e8:	4b03      	ldr	r3, [pc, #12]	; (80053f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80053ea:	681b      	ldr	r3, [r3, #0]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	20000028 	.word	0x20000028

080053fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005400:	f7ff fff0 	bl	80053e4 <HAL_RCC_GetHCLKFreq>
 8005404:	4602      	mov	r2, r0
 8005406:	4b05      	ldr	r3, [pc, #20]	; (800541c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	0a9b      	lsrs	r3, r3, #10
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	4903      	ldr	r1, [pc, #12]	; (8005420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005412:	5ccb      	ldrb	r3, [r1, r3]
 8005414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005418:	4618      	mov	r0, r3
 800541a:	bd80      	pop	{r7, pc}
 800541c:	40023800 	.word	0x40023800
 8005420:	0800cd6c 	.word	0x0800cd6c

08005424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005428:	f7ff ffdc 	bl	80053e4 <HAL_RCC_GetHCLKFreq>
 800542c:	4602      	mov	r2, r0
 800542e:	4b05      	ldr	r3, [pc, #20]	; (8005444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	0b5b      	lsrs	r3, r3, #13
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	4903      	ldr	r1, [pc, #12]	; (8005448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800543a:	5ccb      	ldrb	r3, [r1, r3]
 800543c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005440:	4618      	mov	r0, r3
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40023800 	.word	0x40023800
 8005448:	0800cd6c 	.word	0x0800cd6c

0800544c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b088      	sub	sp, #32
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005454:	2300      	movs	r3, #0
 8005456:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005458:	2300      	movs	r3, #0
 800545a:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 800545c:	2300      	movs	r3, #0
 800545e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005460:	2300      	movs	r3, #0
 8005462:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	2b00      	cmp	r3, #0
 800546e:	d012      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005470:	4b65      	ldr	r3, [pc, #404]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	4a64      	ldr	r2, [pc, #400]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005476:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800547a:	6093      	str	r3, [r2, #8]
 800547c:	4b62      	ldr	r3, [pc, #392]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005484:	4960      	ldr	r1, [pc, #384]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005486:	4313      	orrs	r3, r2
 8005488:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8005492:	2301      	movs	r3, #1
 8005494:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d017      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054a2:	4b59      	ldr	r3, [pc, #356]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80054a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b0:	4955      	ldr	r1, [pc, #340]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054c0:	d101      	bne.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80054c2:	2301      	movs	r3, #1
 80054c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80054ce:	2301      	movs	r3, #1
 80054d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d017      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80054de:	4b4a      	ldr	r3, [pc, #296]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80054e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ec:	4946      	ldr	r1, [pc, #280]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054fc:	d101      	bne.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80054fe:	2301      	movs	r3, #1
 8005500:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800550a:	2301      	movs	r3, #1
 800550c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0320 	and.w	r3, r3, #32
 8005516:	2b00      	cmp	r3, #0
 8005518:	f000 808b 	beq.w	8005632 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800551c:	4b3a      	ldr	r3, [pc, #232]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800551e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005520:	4a39      	ldr	r2, [pc, #228]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005526:	6413      	str	r3, [r2, #64]	; 0x40
 8005528:	4b37      	ldr	r3, [pc, #220]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800552a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005530:	60fb      	str	r3, [r7, #12]
 8005532:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005534:	4b35      	ldr	r3, [pc, #212]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a34      	ldr	r2, [pc, #208]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800553a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800553e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005540:	f7fd ffa8 	bl	8003494 <HAL_GetTick>
 8005544:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005546:	e008      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005548:	f7fd ffa4 	bl	8003494 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b64      	cmp	r3, #100	; 0x64
 8005554:	d901      	bls.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e2bc      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800555a:	4b2c      	ldr	r3, [pc, #176]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005562:	2b00      	cmp	r3, #0
 8005564:	d0f0      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005566:	4b28      	ldr	r3, [pc, #160]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800556e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d035      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	429a      	cmp	r2, r3
 8005582:	d02e      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005584:	4b20      	ldr	r3, [pc, #128]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800558c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800558e:	4b1e      	ldr	r3, [pc, #120]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005592:	4a1d      	ldr	r2, [pc, #116]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005598:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800559a:	4b1b      	ldr	r3, [pc, #108]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800559c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559e:	4a1a      	ldr	r2, [pc, #104]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80055a6:	4a18      	ldr	r2, [pc, #96]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80055ac:	4b16      	ldr	r3, [pc, #88]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d114      	bne.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b8:	f7fd ff6c 	bl	8003494 <HAL_GetTick>
 80055bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055be:	e00a      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055c0:	f7fd ff68 	bl	8003494 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e27e      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055d6:	4b0c      	ldr	r3, [pc, #48]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d0ee      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055ee:	d111      	bne.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80055f0:	4b05      	ldr	r3, [pc, #20]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80055fc:	4b04      	ldr	r3, [pc, #16]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80055fe:	400b      	ands	r3, r1
 8005600:	4901      	ldr	r1, [pc, #4]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005602:	4313      	orrs	r3, r2
 8005604:	608b      	str	r3, [r1, #8]
 8005606:	e00b      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005608:	40023800 	.word	0x40023800
 800560c:	40007000 	.word	0x40007000
 8005610:	0ffffcff 	.word	0x0ffffcff
 8005614:	4ba4      	ldr	r3, [pc, #656]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	4aa3      	ldr	r2, [pc, #652]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800561a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800561e:	6093      	str	r3, [r2, #8]
 8005620:	4ba1      	ldr	r3, [pc, #644]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005622:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800562c:	499e      	ldr	r1, [pc, #632]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800562e:	4313      	orrs	r3, r2
 8005630:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0310 	and.w	r3, r3, #16
 800563a:	2b00      	cmp	r3, #0
 800563c:	d010      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800563e:	4b9a      	ldr	r3, [pc, #616]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005644:	4a98      	ldr	r2, [pc, #608]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800564a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800564e:	4b96      	ldr	r3, [pc, #600]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005650:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005658:	4993      	ldr	r1, [pc, #588]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800565a:	4313      	orrs	r3, r2
 800565c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00a      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800566c:	4b8e      	ldr	r3, [pc, #568]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800566e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005672:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800567a:	498b      	ldr	r1, [pc, #556]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800567c:	4313      	orrs	r3, r2
 800567e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00a      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800568e:	4b86      	ldr	r3, [pc, #536]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005694:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800569c:	4982      	ldr	r1, [pc, #520]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00a      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056b0:	4b7d      	ldr	r3, [pc, #500]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80056b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056be:	497a      	ldr	r1, [pc, #488]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00a      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056d2:	4b75      	ldr	r3, [pc, #468]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80056d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d8:	f023 0203 	bic.w	r2, r3, #3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e0:	4971      	ldr	r1, [pc, #452]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00a      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056f4:	4b6c      	ldr	r3, [pc, #432]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80056f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056fa:	f023 020c 	bic.w	r2, r3, #12
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005702:	4969      	ldr	r1, [pc, #420]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005704:	4313      	orrs	r3, r2
 8005706:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00a      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005716:	4b64      	ldr	r3, [pc, #400]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005724:	4960      	ldr	r1, [pc, #384]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005726:	4313      	orrs	r3, r2
 8005728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00a      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005738:	4b5b      	ldr	r3, [pc, #364]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800573a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800573e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005746:	4958      	ldr	r1, [pc, #352]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005748:	4313      	orrs	r3, r2
 800574a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00a      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800575a:	4b53      	ldr	r3, [pc, #332]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800575c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005760:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005768:	494f      	ldr	r1, [pc, #316]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800576a:	4313      	orrs	r3, r2
 800576c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00a      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800577c:	4b4a      	ldr	r3, [pc, #296]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800577e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005782:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800578a:	4947      	ldr	r1, [pc, #284]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800578c:	4313      	orrs	r3, r2
 800578e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00a      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800579e:	4b42      	ldr	r3, [pc, #264]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80057a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ac:	493e      	ldr	r1, [pc, #248]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00a      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80057c0:	4b39      	ldr	r3, [pc, #228]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80057c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ce:	4936      	ldr	r1, [pc, #216]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d011      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80057e2:	4b31      	ldr	r3, [pc, #196]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80057e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057f0:	492d      	ldr	r1, [pc, #180]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005800:	d101      	bne.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8005802:	2301      	movs	r3, #1
 8005804:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00a      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005812:	4b25      	ldr	r3, [pc, #148]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005818:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005820:	4921      	ldr	r1, [pc, #132]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005822:	4313      	orrs	r3, r2
 8005824:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00a      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005834:	4b1c      	ldr	r3, [pc, #112]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800583a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005842:	4919      	ldr	r1, [pc, #100]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005844:	4313      	orrs	r3, r2
 8005846:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005856:	4b14      	ldr	r3, [pc, #80]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800585c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005864:	4910      	ldr	r1, [pc, #64]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005866:	4313      	orrs	r3, r2
 8005868:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d006      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800587a:	2b00      	cmp	r3, #0
 800587c:	f000 809d 	beq.w	80059ba <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005880:	4b09      	ldr	r3, [pc, #36]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a08      	ldr	r2, [pc, #32]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005886:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800588a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800588c:	f7fd fe02 	bl	8003494 <HAL_GetTick>
 8005890:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005892:	e00b      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005894:	f7fd fdfe 	bl	8003494 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b64      	cmp	r3, #100	; 0x64
 80058a0:	d904      	bls.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e116      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80058a6:	bf00      	nop
 80058a8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058ac:	4b8b      	ldr	r3, [pc, #556]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1ed      	bne.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0301 	and.w	r3, r3, #1
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d017      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d113      	bne.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80058cc:	4b83      	ldr	r3, [pc, #524]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80058ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058d2:	0e1b      	lsrs	r3, r3, #24
 80058d4:	f003 030f 	and.w	r3, r3, #15
 80058d8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	019a      	lsls	r2, r3, #6
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	061b      	lsls	r3, r3, #24
 80058e4:	431a      	orrs	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	071b      	lsls	r3, r3, #28
 80058ec:	497b      	ldr	r1, [pc, #492]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d004      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005904:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005908:	d00a      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005912:	2b00      	cmp	r3, #0
 8005914:	d024      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800591e:	d11f      	bne.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005920:	4b6e      	ldr	r3, [pc, #440]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005926:	0f1b      	lsrs	r3, r3, #28
 8005928:	f003 0307 	and.w	r3, r3, #7
 800592c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	019a      	lsls	r2, r3, #6
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	061b      	lsls	r3, r3, #24
 800593a:	431a      	orrs	r2, r3
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	071b      	lsls	r3, r3, #28
 8005940:	4966      	ldr	r1, [pc, #408]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005942:	4313      	orrs	r3, r2
 8005944:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005948:	4b64      	ldr	r3, [pc, #400]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800594a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800594e:	f023 021f 	bic.w	r2, r3, #31
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	3b01      	subs	r3, #1
 8005958:	4960      	ldr	r1, [pc, #384]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800595a:	4313      	orrs	r3, r2
 800595c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00d      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	019a      	lsls	r2, r3, #6
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	061b      	lsls	r3, r3, #24
 8005978:	431a      	orrs	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	071b      	lsls	r3, r3, #28
 8005980:	4956      	ldr	r1, [pc, #344]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005982:	4313      	orrs	r3, r2
 8005984:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005988:	4b54      	ldr	r3, [pc, #336]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a53      	ldr	r2, [pc, #332]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800598e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005992:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005994:	f7fd fd7e 	bl	8003494 <HAL_GetTick>
 8005998:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800599a:	e008      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800599c:	f7fd fd7a 	bl	8003494 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2b64      	cmp	r3, #100	; 0x64
 80059a8:	d901      	bls.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e092      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059ae:	4b4b      	ldr	r3, [pc, #300]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d0f0      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	f040 8088 	bne.w	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80059c2:	4b46      	ldr	r3, [pc, #280]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a45      	ldr	r2, [pc, #276]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80059c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059ce:	f7fd fd61 	bl	8003494 <HAL_GetTick>
 80059d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80059d4:	e008      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80059d6:	f7fd fd5d 	bl	8003494 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b64      	cmp	r3, #100	; 0x64
 80059e2:	d901      	bls.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e075      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80059e8:	4b3c      	ldr	r3, [pc, #240]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059f4:	d0ef      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d009      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d024      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d120      	bne.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005a1e:	4b2f      	ldr	r3, [pc, #188]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a24:	0c1b      	lsrs	r3, r3, #16
 8005a26:	f003 0303 	and.w	r3, r3, #3
 8005a2a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	019a      	lsls	r2, r3, #6
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	041b      	lsls	r3, r3, #16
 8005a36:	431a      	orrs	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	061b      	lsls	r3, r3, #24
 8005a3e:	4927      	ldr	r1, [pc, #156]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005a46:	4b25      	ldr	r3, [pc, #148]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a4c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	3b01      	subs	r3, #1
 8005a56:	021b      	lsls	r3, r3, #8
 8005a58:	4920      	ldr	r1, [pc, #128]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d018      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x652>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a74:	d113      	bne.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a76:	4b19      	ldr	r3, [pc, #100]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7c:	0e1b      	lsrs	r3, r3, #24
 8005a7e:	f003 030f 	and.w	r3, r3, #15
 8005a82:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	019a      	lsls	r2, r3, #6
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	041b      	lsls	r3, r3, #16
 8005a90:	431a      	orrs	r2, r3
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	061b      	lsls	r3, r3, #24
 8005a96:	4911      	ldr	r1, [pc, #68]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005a9e:	4b0f      	ldr	r3, [pc, #60]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a0e      	ldr	r2, [pc, #56]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aaa:	f7fd fcf3 	bl	8003494 <HAL_GetTick>
 8005aae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ab0:	e008      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ab2:	f7fd fcef 	bl	8003494 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	2b64      	cmp	r3, #100	; 0x64
 8005abe:	d901      	bls.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e007      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ac4:	4b05      	ldr	r3, [pc, #20]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005acc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ad0:	d1ef      	bne.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3720      	adds	r7, #32
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	40023800 	.word	0x40023800

08005ae0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e09d      	b.n	8005c2e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d108      	bne.n	8005b0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b02:	d009      	beq.n	8005b18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	61da      	str	r2, [r3, #28]
 8005b0a:	e005      	b.n	8005b18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d106      	bne.n	8005b38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7fc ffd2 	bl	8002adc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b4e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b58:	d902      	bls.n	8005b60 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	60fb      	str	r3, [r7, #12]
 8005b5e:	e002      	b.n	8005b66 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b64:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005b6e:	d007      	beq.n	8005b80 <HAL_SPI_Init+0xa0>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b78:	d002      	beq.n	8005b80 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b90:	431a      	orrs	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc2:	ea42 0103 	orr.w	r1, r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	0c1b      	lsrs	r3, r3, #16
 8005bdc:	f003 0204 	and.w	r2, r3, #4
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be4:	f003 0310 	and.w	r3, r3, #16
 8005be8:	431a      	orrs	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bee:	f003 0308 	and.w	r3, r3, #8
 8005bf2:	431a      	orrs	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005bfc:	ea42 0103 	orr.w	r1, r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	69da      	ldr	r2, [r3, #28]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b088      	sub	sp, #32
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	60f8      	str	r0, [r7, #12]
 8005c3e:	60b9      	str	r1, [r7, #8]
 8005c40:	603b      	str	r3, [r7, #0]
 8005c42:	4613      	mov	r3, r2
 8005c44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c46:	2300      	movs	r3, #0
 8005c48:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d101      	bne.n	8005c58 <HAL_SPI_Transmit+0x22>
 8005c54:	2302      	movs	r3, #2
 8005c56:	e158      	b.n	8005f0a <HAL_SPI_Transmit+0x2d4>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c60:	f7fd fc18 	bl	8003494 <HAL_GetTick>
 8005c64:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005c66:	88fb      	ldrh	r3, [r7, #6]
 8005c68:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d002      	beq.n	8005c7c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005c76:	2302      	movs	r3, #2
 8005c78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c7a:	e13d      	b.n	8005ef8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d002      	beq.n	8005c88 <HAL_SPI_Transmit+0x52>
 8005c82:	88fb      	ldrh	r3, [r7, #6]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d102      	bne.n	8005c8e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c8c:	e134      	b.n	8005ef8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2203      	movs	r2, #3
 8005c92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	88fa      	ldrh	r2, [r7, #6]
 8005ca6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	88fa      	ldrh	r2, [r7, #6]
 8005cac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cd8:	d10f      	bne.n	8005cfa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ce8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cf8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d04:	2b40      	cmp	r3, #64	; 0x40
 8005d06:	d007      	beq.n	8005d18 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d20:	d94b      	bls.n	8005dba <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d002      	beq.n	8005d30 <HAL_SPI_Transmit+0xfa>
 8005d2a:	8afb      	ldrh	r3, [r7, #22]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d13e      	bne.n	8005dae <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d34:	881a      	ldrh	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d40:	1c9a      	adds	r2, r3, #2
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d54:	e02b      	b.n	8005dae <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d112      	bne.n	8005d8a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d68:	881a      	ldrh	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d74:	1c9a      	adds	r2, r3, #2
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	3b01      	subs	r3, #1
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d88:	e011      	b.n	8005dae <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d8a:	f7fd fb83 	bl	8003494 <HAL_GetTick>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	683a      	ldr	r2, [r7, #0]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d803      	bhi.n	8005da2 <HAL_SPI_Transmit+0x16c>
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da0:	d102      	bne.n	8005da8 <HAL_SPI_Transmit+0x172>
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d102      	bne.n	8005dae <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005dac:	e0a4      	b.n	8005ef8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1ce      	bne.n	8005d56 <HAL_SPI_Transmit+0x120>
 8005db8:	e07c      	b.n	8005eb4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d002      	beq.n	8005dc8 <HAL_SPI_Transmit+0x192>
 8005dc2:	8afb      	ldrh	r3, [r7, #22]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d170      	bne.n	8005eaa <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d912      	bls.n	8005df8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd6:	881a      	ldrh	r2, [r3, #0]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de2:	1c9a      	adds	r2, r3, #2
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	3b02      	subs	r3, #2
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005df6:	e058      	b.n	8005eaa <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	330c      	adds	r3, #12
 8005e02:	7812      	ldrb	r2, [r2, #0]
 8005e04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0a:	1c5a      	adds	r2, r3, #1
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	3b01      	subs	r3, #1
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005e1e:	e044      	b.n	8005eaa <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d12b      	bne.n	8005e86 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d912      	bls.n	8005e5e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3c:	881a      	ldrh	r2, [r3, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e48:	1c9a      	adds	r2, r3, #2
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	3b02      	subs	r3, #2
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e5c:	e025      	b.n	8005eaa <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	330c      	adds	r3, #12
 8005e68:	7812      	ldrb	r2, [r2, #0]
 8005e6a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e70:	1c5a      	adds	r2, r3, #1
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e84:	e011      	b.n	8005eaa <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e86:	f7fd fb05 	bl	8003494 <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d803      	bhi.n	8005e9e <HAL_SPI_Transmit+0x268>
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9c:	d102      	bne.n	8005ea4 <HAL_SPI_Transmit+0x26e>
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d102      	bne.n	8005eaa <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ea8:	e026      	b.n	8005ef8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1b5      	bne.n	8005e20 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	6839      	ldr	r1, [r7, #0]
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f000 fb5b 	bl	8006574 <SPI_EndRxTxTransaction>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d002      	beq.n	8005eca <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10a      	bne.n	8005ee8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	613b      	str	r3, [r7, #16]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	613b      	str	r3, [r7, #16]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	613b      	str	r3, [r7, #16]
 8005ee6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d002      	beq.n	8005ef6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	77fb      	strb	r3, [r7, #31]
 8005ef4:	e000      	b.n	8005ef8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005ef6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005f08:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3720      	adds	r7, #32
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b08a      	sub	sp, #40	; 0x28
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	60f8      	str	r0, [r7, #12]
 8005f1a:	60b9      	str	r1, [r7, #8]
 8005f1c:	607a      	str	r2, [r7, #4]
 8005f1e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f20:	2301      	movs	r3, #1
 8005f22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005f24:	2300      	movs	r3, #0
 8005f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d101      	bne.n	8005f38 <HAL_SPI_TransmitReceive+0x26>
 8005f34:	2302      	movs	r3, #2
 8005f36:	e1fb      	b.n	8006330 <HAL_SPI_TransmitReceive+0x41e>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f40:	f7fd faa8 	bl	8003494 <HAL_GetTick>
 8005f44:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f4c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005f54:	887b      	ldrh	r3, [r7, #2]
 8005f56:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005f58:	887b      	ldrh	r3, [r7, #2]
 8005f5a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f5c:	7efb      	ldrb	r3, [r7, #27]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d00e      	beq.n	8005f80 <HAL_SPI_TransmitReceive+0x6e>
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f68:	d106      	bne.n	8005f78 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d102      	bne.n	8005f78 <HAL_SPI_TransmitReceive+0x66>
 8005f72:	7efb      	ldrb	r3, [r7, #27]
 8005f74:	2b04      	cmp	r3, #4
 8005f76:	d003      	beq.n	8005f80 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005f78:	2302      	movs	r3, #2
 8005f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005f7e:	e1cd      	b.n	800631c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d005      	beq.n	8005f92 <HAL_SPI_TransmitReceive+0x80>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d002      	beq.n	8005f92 <HAL_SPI_TransmitReceive+0x80>
 8005f8c:	887b      	ldrh	r3, [r7, #2]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d103      	bne.n	8005f9a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005f98:	e1c0      	b.n	800631c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b04      	cmp	r3, #4
 8005fa4:	d003      	beq.n	8005fae <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2205      	movs	r2, #5
 8005faa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	887a      	ldrh	r2, [r7, #2]
 8005fbe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	887a      	ldrh	r2, [r7, #2]
 8005fc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	887a      	ldrh	r2, [r7, #2]
 8005fd4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	887a      	ldrh	r2, [r7, #2]
 8005fda:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ff0:	d802      	bhi.n	8005ff8 <HAL_SPI_TransmitReceive+0xe6>
 8005ff2:	8a3b      	ldrh	r3, [r7, #16]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d908      	bls.n	800600a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006006:	605a      	str	r2, [r3, #4]
 8006008:	e007      	b.n	800601a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006018:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006024:	2b40      	cmp	r3, #64	; 0x40
 8006026:	d007      	beq.n	8006038 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006036:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006040:	d97c      	bls.n	800613c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <HAL_SPI_TransmitReceive+0x13e>
 800604a:	8a7b      	ldrh	r3, [r7, #18]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d169      	bne.n	8006124 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006054:	881a      	ldrh	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006060:	1c9a      	adds	r2, r3, #2
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800606a:	b29b      	uxth	r3, r3
 800606c:	3b01      	subs	r3, #1
 800606e:	b29a      	uxth	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006074:	e056      	b.n	8006124 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f003 0302 	and.w	r3, r3, #2
 8006080:	2b02      	cmp	r3, #2
 8006082:	d11b      	bne.n	80060bc <HAL_SPI_TransmitReceive+0x1aa>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006088:	b29b      	uxth	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d016      	beq.n	80060bc <HAL_SPI_TransmitReceive+0x1aa>
 800608e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006090:	2b01      	cmp	r3, #1
 8006092:	d113      	bne.n	80060bc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006098:	881a      	ldrh	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a4:	1c9a      	adds	r2, r3, #2
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	3b01      	subs	r3, #1
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060b8:	2300      	movs	r3, #0
 80060ba:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d11c      	bne.n	8006104 <HAL_SPI_TransmitReceive+0x1f2>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d016      	beq.n	8006104 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68da      	ldr	r2, [r3, #12]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e0:	b292      	uxth	r2, r2
 80060e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e8:	1c9a      	adds	r2, r3, #2
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	3b01      	subs	r3, #1
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006100:	2301      	movs	r3, #1
 8006102:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006104:	f7fd f9c6 	bl	8003494 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006110:	429a      	cmp	r2, r3
 8006112:	d807      	bhi.n	8006124 <HAL_SPI_TransmitReceive+0x212>
 8006114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611a:	d003      	beq.n	8006124 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006122:	e0fb      	b.n	800631c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006128:	b29b      	uxth	r3, r3
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1a3      	bne.n	8006076 <HAL_SPI_TransmitReceive+0x164>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006134:	b29b      	uxth	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d19d      	bne.n	8006076 <HAL_SPI_TransmitReceive+0x164>
 800613a:	e0df      	b.n	80062fc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d003      	beq.n	800614c <HAL_SPI_TransmitReceive+0x23a>
 8006144:	8a7b      	ldrh	r3, [r7, #18]
 8006146:	2b01      	cmp	r3, #1
 8006148:	f040 80cb 	bne.w	80062e2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006150:	b29b      	uxth	r3, r3
 8006152:	2b01      	cmp	r3, #1
 8006154:	d912      	bls.n	800617c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615a:	881a      	ldrh	r2, [r3, #0]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006166:	1c9a      	adds	r2, r3, #2
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006170:	b29b      	uxth	r3, r3
 8006172:	3b02      	subs	r3, #2
 8006174:	b29a      	uxth	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	87da      	strh	r2, [r3, #62]	; 0x3e
 800617a:	e0b2      	b.n	80062e2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	330c      	adds	r3, #12
 8006186:	7812      	ldrb	r2, [r2, #0]
 8006188:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618e:	1c5a      	adds	r2, r3, #1
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006198:	b29b      	uxth	r3, r3
 800619a:	3b01      	subs	r3, #1
 800619c:	b29a      	uxth	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061a2:	e09e      	b.n	80062e2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d134      	bne.n	800621c <HAL_SPI_TransmitReceive+0x30a>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d02f      	beq.n	800621c <HAL_SPI_TransmitReceive+0x30a>
 80061bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d12c      	bne.n	800621c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d912      	bls.n	80061f2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d0:	881a      	ldrh	r2, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061dc:	1c9a      	adds	r2, r3, #2
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	3b02      	subs	r3, #2
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061f0:	e012      	b.n	8006218 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	330c      	adds	r3, #12
 80061fc:	7812      	ldrb	r2, [r2, #0]
 80061fe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006204:	1c5a      	adds	r2, r3, #1
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800620e:	b29b      	uxth	r3, r3
 8006210:	3b01      	subs	r3, #1
 8006212:	b29a      	uxth	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b01      	cmp	r3, #1
 8006228:	d148      	bne.n	80062bc <HAL_SPI_TransmitReceive+0x3aa>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006230:	b29b      	uxth	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d042      	beq.n	80062bc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800623c:	b29b      	uxth	r3, r3
 800623e:	2b01      	cmp	r3, #1
 8006240:	d923      	bls.n	800628a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68da      	ldr	r2, [r3, #12]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624c:	b292      	uxth	r2, r2
 800624e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006254:	1c9a      	adds	r2, r3, #2
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006260:	b29b      	uxth	r3, r3
 8006262:	3b02      	subs	r3, #2
 8006264:	b29a      	uxth	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006272:	b29b      	uxth	r3, r3
 8006274:	2b01      	cmp	r3, #1
 8006276:	d81f      	bhi.n	80062b8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006286:	605a      	str	r2, [r3, #4]
 8006288:	e016      	b.n	80062b8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f103 020c 	add.w	r2, r3, #12
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006296:	7812      	ldrb	r2, [r2, #0]
 8006298:	b2d2      	uxtb	r2, r2
 800629a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a0:	1c5a      	adds	r2, r3, #1
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	3b01      	subs	r3, #1
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062b8:	2301      	movs	r3, #1
 80062ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80062bc:	f7fd f8ea 	bl	8003494 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d803      	bhi.n	80062d4 <HAL_SPI_TransmitReceive+0x3c2>
 80062cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d2:	d102      	bne.n	80062da <HAL_SPI_TransmitReceive+0x3c8>
 80062d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d103      	bne.n	80062e2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80062e0:	e01c      	b.n	800631c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f47f af5b 	bne.w	80061a4 <HAL_SPI_TransmitReceive+0x292>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f47f af54 	bne.w	80061a4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062fc:	69fa      	ldr	r2, [r7, #28]
 80062fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 f937 	bl	8006574 <SPI_EndRxTxTransaction>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d006      	beq.n	800631a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2220      	movs	r2, #32
 8006316:	661a      	str	r2, [r3, #96]	; 0x60
 8006318:	e000      	b.n	800631c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800631a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800632c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006330:	4618      	mov	r0, r3
 8006332:	3728      	adds	r7, #40	; 0x28
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b088      	sub	sp, #32
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	603b      	str	r3, [r7, #0]
 8006344:	4613      	mov	r3, r2
 8006346:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006348:	f7fd f8a4 	bl	8003494 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006350:	1a9b      	subs	r3, r3, r2
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	4413      	add	r3, r2
 8006356:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006358:	f7fd f89c 	bl	8003494 <HAL_GetTick>
 800635c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800635e:	4b39      	ldr	r3, [pc, #228]	; (8006444 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	015b      	lsls	r3, r3, #5
 8006364:	0d1b      	lsrs	r3, r3, #20
 8006366:	69fa      	ldr	r2, [r7, #28]
 8006368:	fb02 f303 	mul.w	r3, r2, r3
 800636c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800636e:	e054      	b.n	800641a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006376:	d050      	beq.n	800641a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006378:	f7fd f88c 	bl	8003494 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	69fa      	ldr	r2, [r7, #28]
 8006384:	429a      	cmp	r2, r3
 8006386:	d902      	bls.n	800638e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d13d      	bne.n	800640a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800639c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063a6:	d111      	bne.n	80063cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063b0:	d004      	beq.n	80063bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063ba:	d107      	bne.n	80063cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063d4:	d10f      	bne.n	80063f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063e4:	601a      	str	r2, [r3, #0]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e017      	b.n	800643a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d101      	bne.n	8006414 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006410:	2300      	movs	r3, #0
 8006412:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	3b01      	subs	r3, #1
 8006418:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689a      	ldr	r2, [r3, #8]
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	4013      	ands	r3, r2
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	429a      	cmp	r2, r3
 8006428:	bf0c      	ite	eq
 800642a:	2301      	moveq	r3, #1
 800642c:	2300      	movne	r3, #0
 800642e:	b2db      	uxtb	r3, r3
 8006430:	461a      	mov	r2, r3
 8006432:	79fb      	ldrb	r3, [r7, #7]
 8006434:	429a      	cmp	r2, r3
 8006436:	d19b      	bne.n	8006370 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3720      	adds	r7, #32
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	20000028 	.word	0x20000028

08006448 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b08a      	sub	sp, #40	; 0x28
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
 8006454:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006456:	2300      	movs	r3, #0
 8006458:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800645a:	f7fd f81b 	bl	8003494 <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006462:	1a9b      	subs	r3, r3, r2
 8006464:	683a      	ldr	r2, [r7, #0]
 8006466:	4413      	add	r3, r2
 8006468:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800646a:	f7fd f813 	bl	8003494 <HAL_GetTick>
 800646e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	330c      	adds	r3, #12
 8006476:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006478:	4b3d      	ldr	r3, [pc, #244]	; (8006570 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	4613      	mov	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	00da      	lsls	r2, r3, #3
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	0d1b      	lsrs	r3, r3, #20
 8006488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800648a:	fb02 f303 	mul.w	r3, r2, r3
 800648e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006490:	e060      	b.n	8006554 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006498:	d107      	bne.n	80064aa <SPI_WaitFifoStateUntilTimeout+0x62>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d104      	bne.n	80064aa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80064a8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b0:	d050      	beq.n	8006554 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064b2:	f7fc ffef 	bl	8003494 <HAL_GetTick>
 80064b6:	4602      	mov	r2, r0
 80064b8:	6a3b      	ldr	r3, [r7, #32]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064be:	429a      	cmp	r2, r3
 80064c0:	d902      	bls.n	80064c8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d13d      	bne.n	8006544 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685a      	ldr	r2, [r3, #4]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80064d6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064e0:	d111      	bne.n	8006506 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064ea:	d004      	beq.n	80064f6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064f4:	d107      	bne.n	8006506 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006504:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800650e:	d10f      	bne.n	8006530 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800651e:	601a      	str	r2, [r3, #0]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800652e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e010      	b.n	8006566 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800654a:	2300      	movs	r3, #0
 800654c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	3b01      	subs	r3, #1
 8006552:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689a      	ldr	r2, [r3, #8]
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	4013      	ands	r3, r2
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	429a      	cmp	r2, r3
 8006562:	d196      	bne.n	8006492 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3728      	adds	r7, #40	; 0x28
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	20000028 	.word	0x20000028

08006574 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b088      	sub	sp, #32
 8006578:	af02      	add	r7, sp, #8
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	9300      	str	r3, [sp, #0]
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	2200      	movs	r2, #0
 8006588:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f7ff ff5b 	bl	8006448 <SPI_WaitFifoStateUntilTimeout>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d007      	beq.n	80065a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800659c:	f043 0220 	orr.w	r2, r3, #32
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e046      	b.n	8006636 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80065a8:	4b25      	ldr	r3, [pc, #148]	; (8006640 <SPI_EndRxTxTransaction+0xcc>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a25      	ldr	r2, [pc, #148]	; (8006644 <SPI_EndRxTxTransaction+0xd0>)
 80065ae:	fba2 2303 	umull	r2, r3, r2, r3
 80065b2:	0d5b      	lsrs	r3, r3, #21
 80065b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80065b8:	fb02 f303 	mul.w	r3, r2, r3
 80065bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065c6:	d112      	bne.n	80065ee <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	9300      	str	r3, [sp, #0]
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2200      	movs	r2, #0
 80065d0:	2180      	movs	r1, #128	; 0x80
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f7ff feb0 	bl	8006338 <SPI_WaitFlagStateUntilTimeout>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d016      	beq.n	800660c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065e2:	f043 0220 	orr.w	r2, r3, #32
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e023      	b.n	8006636 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00a      	beq.n	800660a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	3b01      	subs	r3, #1
 80065f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006604:	2b80      	cmp	r3, #128	; 0x80
 8006606:	d0f2      	beq.n	80065ee <SPI_EndRxTxTransaction+0x7a>
 8006608:	e000      	b.n	800660c <SPI_EndRxTxTransaction+0x98>
        break;
 800660a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	2200      	movs	r2, #0
 8006614:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f7ff ff15 	bl	8006448 <SPI_WaitFifoStateUntilTimeout>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d007      	beq.n	8006634 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006628:	f043 0220 	orr.w	r2, r3, #32
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e000      	b.n	8006636 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3718      	adds	r7, #24
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	20000028 	.word	0x20000028
 8006644:	165e9f81 	.word	0x165e9f81

08006648 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d101      	bne.n	800665e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e038      	b.n	80066d0 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d106      	bne.n	8006678 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f7fc fb96 	bl	8002da4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	3308      	adds	r3, #8
 8006680:	4619      	mov	r1, r3
 8006682:	4610      	mov	r0, r2
 8006684:	f000 ffe0 	bl	8007648 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6818      	ldr	r0, [r3, #0]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	461a      	mov	r2, r3
 8006692:	68b9      	ldr	r1, [r7, #8]
 8006694:	f001 f868 	bl	8007768 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6858      	ldr	r0, [r3, #4]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	689a      	ldr	r2, [r3, #8]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a4:	6879      	ldr	r1, [r7, #4]
 80066a6:	f001 f8af 	bl	8007808 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	6892      	ldr	r2, [r2, #8]
 80066b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	6892      	ldr	r2, [r2, #8]
 80066be:	f041 0101 	orr.w	r1, r1, #1
 80066c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e049      	b.n	800677e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d106      	bne.n	8006704 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f7fc fa30 	bl	8002b64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2202      	movs	r2, #2
 8006708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	3304      	adds	r3, #4
 8006714:	4619      	mov	r1, r3
 8006716:	4610      	mov	r0, r2
 8006718:	f000 f8ce 	bl	80068b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3708      	adds	r7, #8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
	...

08006788 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b01      	cmp	r3, #1
 800679a:	d001      	beq.n	80067a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e04c      	b.n	800683a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2202      	movs	r2, #2
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a26      	ldr	r2, [pc, #152]	; (8006848 <HAL_TIM_Base_Start+0xc0>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d022      	beq.n	80067f8 <HAL_TIM_Base_Start+0x70>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ba:	d01d      	beq.n	80067f8 <HAL_TIM_Base_Start+0x70>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a22      	ldr	r2, [pc, #136]	; (800684c <HAL_TIM_Base_Start+0xc4>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d018      	beq.n	80067f8 <HAL_TIM_Base_Start+0x70>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a21      	ldr	r2, [pc, #132]	; (8006850 <HAL_TIM_Base_Start+0xc8>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d013      	beq.n	80067f8 <HAL_TIM_Base_Start+0x70>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a1f      	ldr	r2, [pc, #124]	; (8006854 <HAL_TIM_Base_Start+0xcc>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d00e      	beq.n	80067f8 <HAL_TIM_Base_Start+0x70>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a1e      	ldr	r2, [pc, #120]	; (8006858 <HAL_TIM_Base_Start+0xd0>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d009      	beq.n	80067f8 <HAL_TIM_Base_Start+0x70>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a1c      	ldr	r2, [pc, #112]	; (800685c <HAL_TIM_Base_Start+0xd4>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d004      	beq.n	80067f8 <HAL_TIM_Base_Start+0x70>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a1b      	ldr	r2, [pc, #108]	; (8006860 <HAL_TIM_Base_Start+0xd8>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d115      	bne.n	8006824 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689a      	ldr	r2, [r3, #8]
 80067fe:	4b19      	ldr	r3, [pc, #100]	; (8006864 <HAL_TIM_Base_Start+0xdc>)
 8006800:	4013      	ands	r3, r2
 8006802:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2b06      	cmp	r3, #6
 8006808:	d015      	beq.n	8006836 <HAL_TIM_Base_Start+0xae>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006810:	d011      	beq.n	8006836 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f042 0201 	orr.w	r2, r2, #1
 8006820:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006822:	e008      	b.n	8006836 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f042 0201 	orr.w	r2, r2, #1
 8006832:	601a      	str	r2, [r3, #0]
 8006834:	e000      	b.n	8006838 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006836:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3714      	adds	r7, #20
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	40010000 	.word	0x40010000
 800684c:	40000400 	.word	0x40000400
 8006850:	40000800 	.word	0x40000800
 8006854:	40000c00 	.word	0x40000c00
 8006858:	40010400 	.word	0x40010400
 800685c:	40014000 	.word	0x40014000
 8006860:	40001800 	.word	0x40001800
 8006864:	00010007 	.word	0x00010007

08006868 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6a1a      	ldr	r2, [r3, #32]
 8006876:	f241 1311 	movw	r3, #4369	; 0x1111
 800687a:	4013      	ands	r3, r2
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10f      	bne.n	80068a0 <HAL_TIM_Base_Stop+0x38>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6a1a      	ldr	r2, [r3, #32]
 8006886:	f240 4344 	movw	r3, #1092	; 0x444
 800688a:	4013      	ands	r3, r2
 800688c:	2b00      	cmp	r3, #0
 800688e:	d107      	bne.n	80068a0 <HAL_TIM_Base_Stop+0x38>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f022 0201 	bic.w	r2, r2, #1
 800689e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	370c      	adds	r7, #12
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
	...

080068b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a40      	ldr	r2, [pc, #256]	; (80069cc <TIM_Base_SetConfig+0x114>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d013      	beq.n	80068f8 <TIM_Base_SetConfig+0x40>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d6:	d00f      	beq.n	80068f8 <TIM_Base_SetConfig+0x40>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a3d      	ldr	r2, [pc, #244]	; (80069d0 <TIM_Base_SetConfig+0x118>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d00b      	beq.n	80068f8 <TIM_Base_SetConfig+0x40>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a3c      	ldr	r2, [pc, #240]	; (80069d4 <TIM_Base_SetConfig+0x11c>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d007      	beq.n	80068f8 <TIM_Base_SetConfig+0x40>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a3b      	ldr	r2, [pc, #236]	; (80069d8 <TIM_Base_SetConfig+0x120>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d003      	beq.n	80068f8 <TIM_Base_SetConfig+0x40>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a3a      	ldr	r2, [pc, #232]	; (80069dc <TIM_Base_SetConfig+0x124>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d108      	bne.n	800690a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	4313      	orrs	r3, r2
 8006908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a2f      	ldr	r2, [pc, #188]	; (80069cc <TIM_Base_SetConfig+0x114>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d02b      	beq.n	800696a <TIM_Base_SetConfig+0xb2>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006918:	d027      	beq.n	800696a <TIM_Base_SetConfig+0xb2>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a2c      	ldr	r2, [pc, #176]	; (80069d0 <TIM_Base_SetConfig+0x118>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d023      	beq.n	800696a <TIM_Base_SetConfig+0xb2>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a2b      	ldr	r2, [pc, #172]	; (80069d4 <TIM_Base_SetConfig+0x11c>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d01f      	beq.n	800696a <TIM_Base_SetConfig+0xb2>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a2a      	ldr	r2, [pc, #168]	; (80069d8 <TIM_Base_SetConfig+0x120>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d01b      	beq.n	800696a <TIM_Base_SetConfig+0xb2>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a29      	ldr	r2, [pc, #164]	; (80069dc <TIM_Base_SetConfig+0x124>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d017      	beq.n	800696a <TIM_Base_SetConfig+0xb2>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a28      	ldr	r2, [pc, #160]	; (80069e0 <TIM_Base_SetConfig+0x128>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d013      	beq.n	800696a <TIM_Base_SetConfig+0xb2>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a27      	ldr	r2, [pc, #156]	; (80069e4 <TIM_Base_SetConfig+0x12c>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d00f      	beq.n	800696a <TIM_Base_SetConfig+0xb2>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a26      	ldr	r2, [pc, #152]	; (80069e8 <TIM_Base_SetConfig+0x130>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d00b      	beq.n	800696a <TIM_Base_SetConfig+0xb2>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a25      	ldr	r2, [pc, #148]	; (80069ec <TIM_Base_SetConfig+0x134>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d007      	beq.n	800696a <TIM_Base_SetConfig+0xb2>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a24      	ldr	r2, [pc, #144]	; (80069f0 <TIM_Base_SetConfig+0x138>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d003      	beq.n	800696a <TIM_Base_SetConfig+0xb2>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a23      	ldr	r2, [pc, #140]	; (80069f4 <TIM_Base_SetConfig+0x13c>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d108      	bne.n	800697c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	4313      	orrs	r3, r2
 800697a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	4313      	orrs	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	689a      	ldr	r2, [r3, #8]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a0a      	ldr	r2, [pc, #40]	; (80069cc <TIM_Base_SetConfig+0x114>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d003      	beq.n	80069b0 <TIM_Base_SetConfig+0xf8>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a0c      	ldr	r2, [pc, #48]	; (80069dc <TIM_Base_SetConfig+0x124>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d103      	bne.n	80069b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	691a      	ldr	r2, [r3, #16]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	615a      	str	r2, [r3, #20]
}
 80069be:	bf00      	nop
 80069c0:	3714      	adds	r7, #20
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	40010000 	.word	0x40010000
 80069d0:	40000400 	.word	0x40000400
 80069d4:	40000800 	.word	0x40000800
 80069d8:	40000c00 	.word	0x40000c00
 80069dc:	40010400 	.word	0x40010400
 80069e0:	40014000 	.word	0x40014000
 80069e4:	40014400 	.word	0x40014400
 80069e8:	40014800 	.word	0x40014800
 80069ec:	40001800 	.word	0x40001800
 80069f0:	40001c00 	.word	0x40001c00
 80069f4:	40002000 	.word	0x40002000

080069f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d101      	bne.n	8006a10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	e06d      	b.n	8006aec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a30      	ldr	r2, [pc, #192]	; (8006af8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d004      	beq.n	8006a44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a2f      	ldr	r2, [pc, #188]	; (8006afc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d108      	bne.n	8006a56 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a4a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a5c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a20      	ldr	r2, [pc, #128]	; (8006af8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d022      	beq.n	8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a82:	d01d      	beq.n	8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a1d      	ldr	r2, [pc, #116]	; (8006b00 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d018      	beq.n	8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a1c      	ldr	r2, [pc, #112]	; (8006b04 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d013      	beq.n	8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a1a      	ldr	r2, [pc, #104]	; (8006b08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d00e      	beq.n	8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a15      	ldr	r2, [pc, #84]	; (8006afc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d009      	beq.n	8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a16      	ldr	r2, [pc, #88]	; (8006b0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d004      	beq.n	8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a15      	ldr	r2, [pc, #84]	; (8006b10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d10c      	bne.n	8006ada <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ac6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68ba      	ldr	r2, [r7, #8]
 8006ad8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3714      	adds	r7, #20
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	40010000 	.word	0x40010000
 8006afc:	40010400 	.word	0x40010400
 8006b00:	40000400 	.word	0x40000400
 8006b04:	40000800 	.word	0x40000800
 8006b08:	40000c00 	.word	0x40000c00
 8006b0c:	40014000 	.word	0x40014000
 8006b10:	40001800 	.word	0x40001800

08006b14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e040      	b.n	8006ba8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d106      	bne.n	8006b3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f7fc f834 	bl	8002ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2224      	movs	r2, #36	; 0x24
 8006b40:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f022 0201 	bic.w	r2, r2, #1
 8006b50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f974 	bl	8006e40 <UART_SetConfig>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d101      	bne.n	8006b62 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e022      	b.n	8006ba8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d002      	beq.n	8006b70 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fbcc 	bl	8007308 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	685a      	ldr	r2, [r3, #4]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	689a      	ldr	r2, [r3, #8]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f042 0201 	orr.w	r2, r2, #1
 8006b9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fc53 	bl	800744c <UART_CheckIdleState>
 8006ba6:	4603      	mov	r3, r0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3708      	adds	r7, #8
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b08a      	sub	sp, #40	; 0x28
 8006bb4:	af02      	add	r7, sp, #8
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	603b      	str	r3, [r7, #0]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bc4:	2b20      	cmp	r3, #32
 8006bc6:	d171      	bne.n	8006cac <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d002      	beq.n	8006bd4 <HAL_UART_Transmit+0x24>
 8006bce:	88fb      	ldrh	r3, [r7, #6]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d101      	bne.n	8006bd8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e06a      	b.n	8006cae <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2221      	movs	r2, #33	; 0x21
 8006be4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006be6:	f7fc fc55 	bl	8003494 <HAL_GetTick>
 8006bea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	88fa      	ldrh	r2, [r7, #6]
 8006bf0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	88fa      	ldrh	r2, [r7, #6]
 8006bf8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c04:	d108      	bne.n	8006c18 <HAL_UART_Transmit+0x68>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d104      	bne.n	8006c18 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	61bb      	str	r3, [r7, #24]
 8006c16:	e003      	b.n	8006c20 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c20:	e02c      	b.n	8006c7c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	2180      	movs	r1, #128	; 0x80
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f000 fc44 	bl	80074ba <UART_WaitOnFlagUntilTimeout>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d001      	beq.n	8006c3c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e038      	b.n	8006cae <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10b      	bne.n	8006c5a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	881b      	ldrh	r3, [r3, #0]
 8006c46:	461a      	mov	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c50:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	3302      	adds	r3, #2
 8006c56:	61bb      	str	r3, [r7, #24]
 8006c58:	e007      	b.n	8006c6a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	781a      	ldrb	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	3301      	adds	r3, #1
 8006c68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	3b01      	subs	r3, #1
 8006c74:	b29a      	uxth	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1cc      	bne.n	8006c22 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	2140      	movs	r1, #64	; 0x40
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f000 fc11 	bl	80074ba <UART_WaitOnFlagUntilTimeout>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d001      	beq.n	8006ca2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e005      	b.n	8006cae <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	e000      	b.n	8006cae <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006cac:	2302      	movs	r3, #2
  }
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3720      	adds	r7, #32
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b08a      	sub	sp, #40	; 0x28
 8006cba:	af02      	add	r7, sp, #8
 8006cbc:	60f8      	str	r0, [r7, #12]
 8006cbe:	60b9      	str	r1, [r7, #8]
 8006cc0:	603b      	str	r3, [r7, #0]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ccc:	2b20      	cmp	r3, #32
 8006cce:	f040 80b1 	bne.w	8006e34 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d002      	beq.n	8006cde <HAL_UART_Receive+0x28>
 8006cd8:	88fb      	ldrh	r3, [r7, #6]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e0a9      	b.n	8006e36 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2222      	movs	r2, #34	; 0x22
 8006cee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cf8:	f7fc fbcc 	bl	8003494 <HAL_GetTick>
 8006cfc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	88fa      	ldrh	r2, [r7, #6]
 8006d02:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	88fa      	ldrh	r2, [r7, #6]
 8006d0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d16:	d10e      	bne.n	8006d36 <HAL_UART_Receive+0x80>
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d105      	bne.n	8006d2c <HAL_UART_Receive+0x76>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006d26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d2a:	e02d      	b.n	8006d88 <HAL_UART_Receive+0xd2>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	22ff      	movs	r2, #255	; 0xff
 8006d30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d34:	e028      	b.n	8006d88 <HAL_UART_Receive+0xd2>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10d      	bne.n	8006d5a <HAL_UART_Receive+0xa4>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d104      	bne.n	8006d50 <HAL_UART_Receive+0x9a>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	22ff      	movs	r2, #255	; 0xff
 8006d4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d4e:	e01b      	b.n	8006d88 <HAL_UART_Receive+0xd2>
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	227f      	movs	r2, #127	; 0x7f
 8006d54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d58:	e016      	b.n	8006d88 <HAL_UART_Receive+0xd2>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d62:	d10d      	bne.n	8006d80 <HAL_UART_Receive+0xca>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d104      	bne.n	8006d76 <HAL_UART_Receive+0xc0>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	227f      	movs	r2, #127	; 0x7f
 8006d70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d74:	e008      	b.n	8006d88 <HAL_UART_Receive+0xd2>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	223f      	movs	r2, #63	; 0x3f
 8006d7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d7e:	e003      	b.n	8006d88 <HAL_UART_Receive+0xd2>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d8e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d98:	d108      	bne.n	8006dac <HAL_UART_Receive+0xf6>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d104      	bne.n	8006dac <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006da2:	2300      	movs	r3, #0
 8006da4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	61bb      	str	r3, [r7, #24]
 8006daa:	e003      	b.n	8006db4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006db0:	2300      	movs	r3, #0
 8006db2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006db4:	e032      	b.n	8006e1c <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	9300      	str	r3, [sp, #0]
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	2120      	movs	r1, #32
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f000 fb7a 	bl	80074ba <UART_WaitOnFlagUntilTimeout>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d001      	beq.n	8006dd0 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e032      	b.n	8006e36 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10c      	bne.n	8006df0 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	8a7b      	ldrh	r3, [r7, #18]
 8006de0:	4013      	ands	r3, r2
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	3302      	adds	r3, #2
 8006dec:	61bb      	str	r3, [r7, #24]
 8006dee:	e00c      	b.n	8006e0a <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df6:	b2da      	uxtb	r2, r3
 8006df8:	8a7b      	ldrh	r3, [r7, #18]
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	b2da      	uxtb	r2, r3
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	3301      	adds	r3, #1
 8006e08:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	3b01      	subs	r3, #1
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1c6      	bne.n	8006db6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8006e30:	2300      	movs	r3, #0
 8006e32:	e000      	b.n	8006e36 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8006e34:	2302      	movs	r3, #2
  }
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3720      	adds	r7, #32
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
	...

08006e40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b088      	sub	sp, #32
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689a      	ldr	r2, [r3, #8]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	431a      	orrs	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	431a      	orrs	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	69db      	ldr	r3, [r3, #28]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	4ba6      	ldr	r3, [pc, #664]	; (8007104 <UART_SetConfig+0x2c4>)
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	6812      	ldr	r2, [r2, #0]
 8006e72:	6979      	ldr	r1, [r7, #20]
 8006e74:	430b      	orrs	r3, r1
 8006e76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	68da      	ldr	r2, [r3, #12]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	430a      	orrs	r2, r1
 8006e8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a1b      	ldr	r3, [r3, #32]
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a94      	ldr	r2, [pc, #592]	; (8007108 <UART_SetConfig+0x2c8>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d120      	bne.n	8006efe <UART_SetConfig+0xbe>
 8006ebc:	4b93      	ldr	r3, [pc, #588]	; (800710c <UART_SetConfig+0x2cc>)
 8006ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ec2:	f003 0303 	and.w	r3, r3, #3
 8006ec6:	2b03      	cmp	r3, #3
 8006ec8:	d816      	bhi.n	8006ef8 <UART_SetConfig+0xb8>
 8006eca:	a201      	add	r2, pc, #4	; (adr r2, 8006ed0 <UART_SetConfig+0x90>)
 8006ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed0:	08006ee1 	.word	0x08006ee1
 8006ed4:	08006eed 	.word	0x08006eed
 8006ed8:	08006ee7 	.word	0x08006ee7
 8006edc:	08006ef3 	.word	0x08006ef3
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	77fb      	strb	r3, [r7, #31]
 8006ee4:	e150      	b.n	8007188 <UART_SetConfig+0x348>
 8006ee6:	2302      	movs	r3, #2
 8006ee8:	77fb      	strb	r3, [r7, #31]
 8006eea:	e14d      	b.n	8007188 <UART_SetConfig+0x348>
 8006eec:	2304      	movs	r3, #4
 8006eee:	77fb      	strb	r3, [r7, #31]
 8006ef0:	e14a      	b.n	8007188 <UART_SetConfig+0x348>
 8006ef2:	2308      	movs	r3, #8
 8006ef4:	77fb      	strb	r3, [r7, #31]
 8006ef6:	e147      	b.n	8007188 <UART_SetConfig+0x348>
 8006ef8:	2310      	movs	r3, #16
 8006efa:	77fb      	strb	r3, [r7, #31]
 8006efc:	e144      	b.n	8007188 <UART_SetConfig+0x348>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a83      	ldr	r2, [pc, #524]	; (8007110 <UART_SetConfig+0x2d0>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d132      	bne.n	8006f6e <UART_SetConfig+0x12e>
 8006f08:	4b80      	ldr	r3, [pc, #512]	; (800710c <UART_SetConfig+0x2cc>)
 8006f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f0e:	f003 030c 	and.w	r3, r3, #12
 8006f12:	2b0c      	cmp	r3, #12
 8006f14:	d828      	bhi.n	8006f68 <UART_SetConfig+0x128>
 8006f16:	a201      	add	r2, pc, #4	; (adr r2, 8006f1c <UART_SetConfig+0xdc>)
 8006f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1c:	08006f51 	.word	0x08006f51
 8006f20:	08006f69 	.word	0x08006f69
 8006f24:	08006f69 	.word	0x08006f69
 8006f28:	08006f69 	.word	0x08006f69
 8006f2c:	08006f5d 	.word	0x08006f5d
 8006f30:	08006f69 	.word	0x08006f69
 8006f34:	08006f69 	.word	0x08006f69
 8006f38:	08006f69 	.word	0x08006f69
 8006f3c:	08006f57 	.word	0x08006f57
 8006f40:	08006f69 	.word	0x08006f69
 8006f44:	08006f69 	.word	0x08006f69
 8006f48:	08006f69 	.word	0x08006f69
 8006f4c:	08006f63 	.word	0x08006f63
 8006f50:	2300      	movs	r3, #0
 8006f52:	77fb      	strb	r3, [r7, #31]
 8006f54:	e118      	b.n	8007188 <UART_SetConfig+0x348>
 8006f56:	2302      	movs	r3, #2
 8006f58:	77fb      	strb	r3, [r7, #31]
 8006f5a:	e115      	b.n	8007188 <UART_SetConfig+0x348>
 8006f5c:	2304      	movs	r3, #4
 8006f5e:	77fb      	strb	r3, [r7, #31]
 8006f60:	e112      	b.n	8007188 <UART_SetConfig+0x348>
 8006f62:	2308      	movs	r3, #8
 8006f64:	77fb      	strb	r3, [r7, #31]
 8006f66:	e10f      	b.n	8007188 <UART_SetConfig+0x348>
 8006f68:	2310      	movs	r3, #16
 8006f6a:	77fb      	strb	r3, [r7, #31]
 8006f6c:	e10c      	b.n	8007188 <UART_SetConfig+0x348>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a68      	ldr	r2, [pc, #416]	; (8007114 <UART_SetConfig+0x2d4>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d120      	bne.n	8006fba <UART_SetConfig+0x17a>
 8006f78:	4b64      	ldr	r3, [pc, #400]	; (800710c <UART_SetConfig+0x2cc>)
 8006f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f7e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f82:	2b30      	cmp	r3, #48	; 0x30
 8006f84:	d013      	beq.n	8006fae <UART_SetConfig+0x16e>
 8006f86:	2b30      	cmp	r3, #48	; 0x30
 8006f88:	d814      	bhi.n	8006fb4 <UART_SetConfig+0x174>
 8006f8a:	2b20      	cmp	r3, #32
 8006f8c:	d009      	beq.n	8006fa2 <UART_SetConfig+0x162>
 8006f8e:	2b20      	cmp	r3, #32
 8006f90:	d810      	bhi.n	8006fb4 <UART_SetConfig+0x174>
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d002      	beq.n	8006f9c <UART_SetConfig+0x15c>
 8006f96:	2b10      	cmp	r3, #16
 8006f98:	d006      	beq.n	8006fa8 <UART_SetConfig+0x168>
 8006f9a:	e00b      	b.n	8006fb4 <UART_SetConfig+0x174>
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	77fb      	strb	r3, [r7, #31]
 8006fa0:	e0f2      	b.n	8007188 <UART_SetConfig+0x348>
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	77fb      	strb	r3, [r7, #31]
 8006fa6:	e0ef      	b.n	8007188 <UART_SetConfig+0x348>
 8006fa8:	2304      	movs	r3, #4
 8006faa:	77fb      	strb	r3, [r7, #31]
 8006fac:	e0ec      	b.n	8007188 <UART_SetConfig+0x348>
 8006fae:	2308      	movs	r3, #8
 8006fb0:	77fb      	strb	r3, [r7, #31]
 8006fb2:	e0e9      	b.n	8007188 <UART_SetConfig+0x348>
 8006fb4:	2310      	movs	r3, #16
 8006fb6:	77fb      	strb	r3, [r7, #31]
 8006fb8:	e0e6      	b.n	8007188 <UART_SetConfig+0x348>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a56      	ldr	r2, [pc, #344]	; (8007118 <UART_SetConfig+0x2d8>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d120      	bne.n	8007006 <UART_SetConfig+0x1c6>
 8006fc4:	4b51      	ldr	r3, [pc, #324]	; (800710c <UART_SetConfig+0x2cc>)
 8006fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006fce:	2bc0      	cmp	r3, #192	; 0xc0
 8006fd0:	d013      	beq.n	8006ffa <UART_SetConfig+0x1ba>
 8006fd2:	2bc0      	cmp	r3, #192	; 0xc0
 8006fd4:	d814      	bhi.n	8007000 <UART_SetConfig+0x1c0>
 8006fd6:	2b80      	cmp	r3, #128	; 0x80
 8006fd8:	d009      	beq.n	8006fee <UART_SetConfig+0x1ae>
 8006fda:	2b80      	cmp	r3, #128	; 0x80
 8006fdc:	d810      	bhi.n	8007000 <UART_SetConfig+0x1c0>
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d002      	beq.n	8006fe8 <UART_SetConfig+0x1a8>
 8006fe2:	2b40      	cmp	r3, #64	; 0x40
 8006fe4:	d006      	beq.n	8006ff4 <UART_SetConfig+0x1b4>
 8006fe6:	e00b      	b.n	8007000 <UART_SetConfig+0x1c0>
 8006fe8:	2300      	movs	r3, #0
 8006fea:	77fb      	strb	r3, [r7, #31]
 8006fec:	e0cc      	b.n	8007188 <UART_SetConfig+0x348>
 8006fee:	2302      	movs	r3, #2
 8006ff0:	77fb      	strb	r3, [r7, #31]
 8006ff2:	e0c9      	b.n	8007188 <UART_SetConfig+0x348>
 8006ff4:	2304      	movs	r3, #4
 8006ff6:	77fb      	strb	r3, [r7, #31]
 8006ff8:	e0c6      	b.n	8007188 <UART_SetConfig+0x348>
 8006ffa:	2308      	movs	r3, #8
 8006ffc:	77fb      	strb	r3, [r7, #31]
 8006ffe:	e0c3      	b.n	8007188 <UART_SetConfig+0x348>
 8007000:	2310      	movs	r3, #16
 8007002:	77fb      	strb	r3, [r7, #31]
 8007004:	e0c0      	b.n	8007188 <UART_SetConfig+0x348>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a44      	ldr	r2, [pc, #272]	; (800711c <UART_SetConfig+0x2dc>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d125      	bne.n	800705c <UART_SetConfig+0x21c>
 8007010:	4b3e      	ldr	r3, [pc, #248]	; (800710c <UART_SetConfig+0x2cc>)
 8007012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800701a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800701e:	d017      	beq.n	8007050 <UART_SetConfig+0x210>
 8007020:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007024:	d817      	bhi.n	8007056 <UART_SetConfig+0x216>
 8007026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800702a:	d00b      	beq.n	8007044 <UART_SetConfig+0x204>
 800702c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007030:	d811      	bhi.n	8007056 <UART_SetConfig+0x216>
 8007032:	2b00      	cmp	r3, #0
 8007034:	d003      	beq.n	800703e <UART_SetConfig+0x1fe>
 8007036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800703a:	d006      	beq.n	800704a <UART_SetConfig+0x20a>
 800703c:	e00b      	b.n	8007056 <UART_SetConfig+0x216>
 800703e:	2300      	movs	r3, #0
 8007040:	77fb      	strb	r3, [r7, #31]
 8007042:	e0a1      	b.n	8007188 <UART_SetConfig+0x348>
 8007044:	2302      	movs	r3, #2
 8007046:	77fb      	strb	r3, [r7, #31]
 8007048:	e09e      	b.n	8007188 <UART_SetConfig+0x348>
 800704a:	2304      	movs	r3, #4
 800704c:	77fb      	strb	r3, [r7, #31]
 800704e:	e09b      	b.n	8007188 <UART_SetConfig+0x348>
 8007050:	2308      	movs	r3, #8
 8007052:	77fb      	strb	r3, [r7, #31]
 8007054:	e098      	b.n	8007188 <UART_SetConfig+0x348>
 8007056:	2310      	movs	r3, #16
 8007058:	77fb      	strb	r3, [r7, #31]
 800705a:	e095      	b.n	8007188 <UART_SetConfig+0x348>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a2f      	ldr	r2, [pc, #188]	; (8007120 <UART_SetConfig+0x2e0>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d125      	bne.n	80070b2 <UART_SetConfig+0x272>
 8007066:	4b29      	ldr	r3, [pc, #164]	; (800710c <UART_SetConfig+0x2cc>)
 8007068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800706c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007070:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007074:	d017      	beq.n	80070a6 <UART_SetConfig+0x266>
 8007076:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800707a:	d817      	bhi.n	80070ac <UART_SetConfig+0x26c>
 800707c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007080:	d00b      	beq.n	800709a <UART_SetConfig+0x25a>
 8007082:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007086:	d811      	bhi.n	80070ac <UART_SetConfig+0x26c>
 8007088:	2b00      	cmp	r3, #0
 800708a:	d003      	beq.n	8007094 <UART_SetConfig+0x254>
 800708c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007090:	d006      	beq.n	80070a0 <UART_SetConfig+0x260>
 8007092:	e00b      	b.n	80070ac <UART_SetConfig+0x26c>
 8007094:	2301      	movs	r3, #1
 8007096:	77fb      	strb	r3, [r7, #31]
 8007098:	e076      	b.n	8007188 <UART_SetConfig+0x348>
 800709a:	2302      	movs	r3, #2
 800709c:	77fb      	strb	r3, [r7, #31]
 800709e:	e073      	b.n	8007188 <UART_SetConfig+0x348>
 80070a0:	2304      	movs	r3, #4
 80070a2:	77fb      	strb	r3, [r7, #31]
 80070a4:	e070      	b.n	8007188 <UART_SetConfig+0x348>
 80070a6:	2308      	movs	r3, #8
 80070a8:	77fb      	strb	r3, [r7, #31]
 80070aa:	e06d      	b.n	8007188 <UART_SetConfig+0x348>
 80070ac:	2310      	movs	r3, #16
 80070ae:	77fb      	strb	r3, [r7, #31]
 80070b0:	e06a      	b.n	8007188 <UART_SetConfig+0x348>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a1b      	ldr	r2, [pc, #108]	; (8007124 <UART_SetConfig+0x2e4>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d138      	bne.n	800712e <UART_SetConfig+0x2ee>
 80070bc:	4b13      	ldr	r3, [pc, #76]	; (800710c <UART_SetConfig+0x2cc>)
 80070be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070c2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80070c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070ca:	d017      	beq.n	80070fc <UART_SetConfig+0x2bc>
 80070cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070d0:	d82a      	bhi.n	8007128 <UART_SetConfig+0x2e8>
 80070d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070d6:	d00b      	beq.n	80070f0 <UART_SetConfig+0x2b0>
 80070d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070dc:	d824      	bhi.n	8007128 <UART_SetConfig+0x2e8>
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d003      	beq.n	80070ea <UART_SetConfig+0x2aa>
 80070e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070e6:	d006      	beq.n	80070f6 <UART_SetConfig+0x2b6>
 80070e8:	e01e      	b.n	8007128 <UART_SetConfig+0x2e8>
 80070ea:	2300      	movs	r3, #0
 80070ec:	77fb      	strb	r3, [r7, #31]
 80070ee:	e04b      	b.n	8007188 <UART_SetConfig+0x348>
 80070f0:	2302      	movs	r3, #2
 80070f2:	77fb      	strb	r3, [r7, #31]
 80070f4:	e048      	b.n	8007188 <UART_SetConfig+0x348>
 80070f6:	2304      	movs	r3, #4
 80070f8:	77fb      	strb	r3, [r7, #31]
 80070fa:	e045      	b.n	8007188 <UART_SetConfig+0x348>
 80070fc:	2308      	movs	r3, #8
 80070fe:	77fb      	strb	r3, [r7, #31]
 8007100:	e042      	b.n	8007188 <UART_SetConfig+0x348>
 8007102:	bf00      	nop
 8007104:	efff69f3 	.word	0xefff69f3
 8007108:	40011000 	.word	0x40011000
 800710c:	40023800 	.word	0x40023800
 8007110:	40004400 	.word	0x40004400
 8007114:	40004800 	.word	0x40004800
 8007118:	40004c00 	.word	0x40004c00
 800711c:	40005000 	.word	0x40005000
 8007120:	40011400 	.word	0x40011400
 8007124:	40007800 	.word	0x40007800
 8007128:	2310      	movs	r3, #16
 800712a:	77fb      	strb	r3, [r7, #31]
 800712c:	e02c      	b.n	8007188 <UART_SetConfig+0x348>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a72      	ldr	r2, [pc, #456]	; (80072fc <UART_SetConfig+0x4bc>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d125      	bne.n	8007184 <UART_SetConfig+0x344>
 8007138:	4b71      	ldr	r3, [pc, #452]	; (8007300 <UART_SetConfig+0x4c0>)
 800713a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800713e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007142:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007146:	d017      	beq.n	8007178 <UART_SetConfig+0x338>
 8007148:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800714c:	d817      	bhi.n	800717e <UART_SetConfig+0x33e>
 800714e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007152:	d00b      	beq.n	800716c <UART_SetConfig+0x32c>
 8007154:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007158:	d811      	bhi.n	800717e <UART_SetConfig+0x33e>
 800715a:	2b00      	cmp	r3, #0
 800715c:	d003      	beq.n	8007166 <UART_SetConfig+0x326>
 800715e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007162:	d006      	beq.n	8007172 <UART_SetConfig+0x332>
 8007164:	e00b      	b.n	800717e <UART_SetConfig+0x33e>
 8007166:	2300      	movs	r3, #0
 8007168:	77fb      	strb	r3, [r7, #31]
 800716a:	e00d      	b.n	8007188 <UART_SetConfig+0x348>
 800716c:	2302      	movs	r3, #2
 800716e:	77fb      	strb	r3, [r7, #31]
 8007170:	e00a      	b.n	8007188 <UART_SetConfig+0x348>
 8007172:	2304      	movs	r3, #4
 8007174:	77fb      	strb	r3, [r7, #31]
 8007176:	e007      	b.n	8007188 <UART_SetConfig+0x348>
 8007178:	2308      	movs	r3, #8
 800717a:	77fb      	strb	r3, [r7, #31]
 800717c:	e004      	b.n	8007188 <UART_SetConfig+0x348>
 800717e:	2310      	movs	r3, #16
 8007180:	77fb      	strb	r3, [r7, #31]
 8007182:	e001      	b.n	8007188 <UART_SetConfig+0x348>
 8007184:	2310      	movs	r3, #16
 8007186:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	69db      	ldr	r3, [r3, #28]
 800718c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007190:	d15b      	bne.n	800724a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007192:	7ffb      	ldrb	r3, [r7, #31]
 8007194:	2b08      	cmp	r3, #8
 8007196:	d828      	bhi.n	80071ea <UART_SetConfig+0x3aa>
 8007198:	a201      	add	r2, pc, #4	; (adr r2, 80071a0 <UART_SetConfig+0x360>)
 800719a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719e:	bf00      	nop
 80071a0:	080071c5 	.word	0x080071c5
 80071a4:	080071cd 	.word	0x080071cd
 80071a8:	080071d5 	.word	0x080071d5
 80071ac:	080071eb 	.word	0x080071eb
 80071b0:	080071db 	.word	0x080071db
 80071b4:	080071eb 	.word	0x080071eb
 80071b8:	080071eb 	.word	0x080071eb
 80071bc:	080071eb 	.word	0x080071eb
 80071c0:	080071e3 	.word	0x080071e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071c4:	f7fe f91a 	bl	80053fc <HAL_RCC_GetPCLK1Freq>
 80071c8:	61b8      	str	r0, [r7, #24]
        break;
 80071ca:	e013      	b.n	80071f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071cc:	f7fe f92a 	bl	8005424 <HAL_RCC_GetPCLK2Freq>
 80071d0:	61b8      	str	r0, [r7, #24]
        break;
 80071d2:	e00f      	b.n	80071f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071d4:	4b4b      	ldr	r3, [pc, #300]	; (8007304 <UART_SetConfig+0x4c4>)
 80071d6:	61bb      	str	r3, [r7, #24]
        break;
 80071d8:	e00c      	b.n	80071f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071da:	f7fd fffd 	bl	80051d8 <HAL_RCC_GetSysClockFreq>
 80071de:	61b8      	str	r0, [r7, #24]
        break;
 80071e0:	e008      	b.n	80071f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071e6:	61bb      	str	r3, [r7, #24]
        break;
 80071e8:	e004      	b.n	80071f4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80071ea:	2300      	movs	r3, #0
 80071ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	77bb      	strb	r3, [r7, #30]
        break;
 80071f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d074      	beq.n	80072e4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	005a      	lsls	r2, r3, #1
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	085b      	lsrs	r3, r3, #1
 8007204:	441a      	add	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	fbb2 f3f3 	udiv	r3, r2, r3
 800720e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	2b0f      	cmp	r3, #15
 8007214:	d916      	bls.n	8007244 <UART_SetConfig+0x404>
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800721c:	d212      	bcs.n	8007244 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	b29b      	uxth	r3, r3
 8007222:	f023 030f 	bic.w	r3, r3, #15
 8007226:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	085b      	lsrs	r3, r3, #1
 800722c:	b29b      	uxth	r3, r3
 800722e:	f003 0307 	and.w	r3, r3, #7
 8007232:	b29a      	uxth	r2, r3
 8007234:	89fb      	ldrh	r3, [r7, #14]
 8007236:	4313      	orrs	r3, r2
 8007238:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	89fa      	ldrh	r2, [r7, #14]
 8007240:	60da      	str	r2, [r3, #12]
 8007242:	e04f      	b.n	80072e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	77bb      	strb	r3, [r7, #30]
 8007248:	e04c      	b.n	80072e4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800724a:	7ffb      	ldrb	r3, [r7, #31]
 800724c:	2b08      	cmp	r3, #8
 800724e:	d828      	bhi.n	80072a2 <UART_SetConfig+0x462>
 8007250:	a201      	add	r2, pc, #4	; (adr r2, 8007258 <UART_SetConfig+0x418>)
 8007252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007256:	bf00      	nop
 8007258:	0800727d 	.word	0x0800727d
 800725c:	08007285 	.word	0x08007285
 8007260:	0800728d 	.word	0x0800728d
 8007264:	080072a3 	.word	0x080072a3
 8007268:	08007293 	.word	0x08007293
 800726c:	080072a3 	.word	0x080072a3
 8007270:	080072a3 	.word	0x080072a3
 8007274:	080072a3 	.word	0x080072a3
 8007278:	0800729b 	.word	0x0800729b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800727c:	f7fe f8be 	bl	80053fc <HAL_RCC_GetPCLK1Freq>
 8007280:	61b8      	str	r0, [r7, #24]
        break;
 8007282:	e013      	b.n	80072ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007284:	f7fe f8ce 	bl	8005424 <HAL_RCC_GetPCLK2Freq>
 8007288:	61b8      	str	r0, [r7, #24]
        break;
 800728a:	e00f      	b.n	80072ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800728c:	4b1d      	ldr	r3, [pc, #116]	; (8007304 <UART_SetConfig+0x4c4>)
 800728e:	61bb      	str	r3, [r7, #24]
        break;
 8007290:	e00c      	b.n	80072ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007292:	f7fd ffa1 	bl	80051d8 <HAL_RCC_GetSysClockFreq>
 8007296:	61b8      	str	r0, [r7, #24]
        break;
 8007298:	e008      	b.n	80072ac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800729a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800729e:	61bb      	str	r3, [r7, #24]
        break;
 80072a0:	e004      	b.n	80072ac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80072a2:	2300      	movs	r3, #0
 80072a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	77bb      	strb	r3, [r7, #30]
        break;
 80072aa:	bf00      	nop
    }

    if (pclk != 0U)
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d018      	beq.n	80072e4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	085a      	lsrs	r2, r3, #1
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	441a      	add	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	2b0f      	cmp	r3, #15
 80072ca:	d909      	bls.n	80072e0 <UART_SetConfig+0x4a0>
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072d2:	d205      	bcs.n	80072e0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	60da      	str	r2, [r3, #12]
 80072de:	e001      	b.n	80072e4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80072f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3720      	adds	r7, #32
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	40007c00 	.word	0x40007c00
 8007300:	40023800 	.word	0x40023800
 8007304:	00f42400 	.word	0x00f42400

08007308 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007314:	f003 0301 	and.w	r3, r3, #1
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00a      	beq.n	8007332 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	430a      	orrs	r2, r1
 8007330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007336:	f003 0302 	and.w	r3, r3, #2
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00a      	beq.n	8007354 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	430a      	orrs	r2, r1
 8007352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007358:	f003 0304 	and.w	r3, r3, #4
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00a      	beq.n	8007376 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	430a      	orrs	r2, r1
 8007374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737a:	f003 0308 	and.w	r3, r3, #8
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00a      	beq.n	8007398 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	430a      	orrs	r2, r1
 8007396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739c:	f003 0310 	and.w	r3, r3, #16
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00a      	beq.n	80073ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	430a      	orrs	r2, r1
 80073b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073be:	f003 0320 	and.w	r3, r3, #32
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00a      	beq.n	80073dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	430a      	orrs	r2, r1
 80073da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d01a      	beq.n	800741e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	430a      	orrs	r2, r1
 80073fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007402:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007406:	d10a      	bne.n	800741e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	430a      	orrs	r2, r1
 800741c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00a      	beq.n	8007440 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	430a      	orrs	r2, r1
 800743e:	605a      	str	r2, [r3, #4]
  }
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b086      	sub	sp, #24
 8007450:	af02      	add	r7, sp, #8
 8007452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800745c:	f7fc f81a 	bl	8003494 <HAL_GetTick>
 8007460:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0308 	and.w	r3, r3, #8
 800746c:	2b08      	cmp	r3, #8
 800746e:	d10e      	bne.n	800748e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007470:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f81b 	bl	80074ba <UART_WaitOnFlagUntilTimeout>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d001      	beq.n	800748e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e011      	b.n	80074b2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2220      	movs	r2, #32
 8007492:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2220      	movs	r2, #32
 8007498:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b09c      	sub	sp, #112	; 0x70
 80074be:	af00      	add	r7, sp, #0
 80074c0:	60f8      	str	r0, [r7, #12]
 80074c2:	60b9      	str	r1, [r7, #8]
 80074c4:	603b      	str	r3, [r7, #0]
 80074c6:	4613      	mov	r3, r2
 80074c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074ca:	e0a7      	b.n	800761c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d2:	f000 80a3 	beq.w	800761c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074d6:	f7fb ffdd 	bl	8003494 <HAL_GetTick>
 80074da:	4602      	mov	r2, r0
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d302      	bcc.n	80074ec <UART_WaitOnFlagUntilTimeout+0x32>
 80074e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d13f      	bne.n	800756c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074f4:	e853 3f00 	ldrex	r3, [r3]
 80074f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80074fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007500:	667b      	str	r3, [r7, #100]	; 0x64
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	461a      	mov	r2, r3
 8007508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800750a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800750c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007510:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007512:	e841 2300 	strex	r3, r2, [r1]
 8007516:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1e6      	bne.n	80074ec <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	3308      	adds	r3, #8
 8007524:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007528:	e853 3f00 	ldrex	r3, [r3]
 800752c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800752e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007530:	f023 0301 	bic.w	r3, r3, #1
 8007534:	663b      	str	r3, [r7, #96]	; 0x60
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	3308      	adds	r3, #8
 800753c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800753e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007540:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007542:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007544:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007546:	e841 2300 	strex	r3, r2, [r1]
 800754a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800754c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1e5      	bne.n	800751e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2220      	movs	r2, #32
 8007556:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2220      	movs	r2, #32
 800755c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007568:	2303      	movs	r3, #3
 800756a:	e068      	b.n	800763e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0304 	and.w	r3, r3, #4
 8007576:	2b00      	cmp	r3, #0
 8007578:	d050      	beq.n	800761c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	69db      	ldr	r3, [r3, #28]
 8007580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007584:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007588:	d148      	bne.n	800761c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007592:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759c:	e853 3f00 	ldrex	r3, [r3]
 80075a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80075a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075b2:	637b      	str	r3, [r7, #52]	; 0x34
 80075b4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075ba:	e841 2300 	strex	r3, r2, [r1]
 80075be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80075c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1e6      	bne.n	8007594 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	3308      	adds	r3, #8
 80075cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	e853 3f00 	ldrex	r3, [r3]
 80075d4:	613b      	str	r3, [r7, #16]
   return(result);
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	f023 0301 	bic.w	r3, r3, #1
 80075dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	3308      	adds	r3, #8
 80075e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80075e6:	623a      	str	r2, [r7, #32]
 80075e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ea:	69f9      	ldr	r1, [r7, #28]
 80075ec:	6a3a      	ldr	r2, [r7, #32]
 80075ee:	e841 2300 	strex	r3, r2, [r1]
 80075f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1e5      	bne.n	80075c6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2220      	movs	r2, #32
 80075fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2220      	movs	r2, #32
 8007604:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2220      	movs	r2, #32
 800760c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007618:	2303      	movs	r3, #3
 800761a:	e010      	b.n	800763e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	69da      	ldr	r2, [r3, #28]
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	4013      	ands	r3, r2
 8007626:	68ba      	ldr	r2, [r7, #8]
 8007628:	429a      	cmp	r2, r3
 800762a:	bf0c      	ite	eq
 800762c:	2301      	moveq	r3, #1
 800762e:	2300      	movne	r3, #0
 8007630:	b2db      	uxtb	r3, r3
 8007632:	461a      	mov	r2, r3
 8007634:	79fb      	ldrb	r3, [r7, #7]
 8007636:	429a      	cmp	r2, r3
 8007638:	f43f af48 	beq.w	80074cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3770      	adds	r7, #112	; 0x70
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
	...

08007648 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8007648:	b480      	push	{r7}
 800764a:	b087      	sub	sp, #28
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765c:	683a      	ldr	r2, [r7, #0]
 800765e:	6812      	ldr	r2, [r2, #0]
 8007660:	f023 0101 	bic.w	r1, r3, #1
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	2b08      	cmp	r3, #8
 8007670:	d102      	bne.n	8007678 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007672:	2340      	movs	r3, #64	; 0x40
 8007674:	617b      	str	r3, [r7, #20]
 8007676:	e001      	b.n	800767c <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8007678:	2300      	movs	r3, #0
 800767a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8007688:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800768e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8007694:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800769a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 80076a0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80076a6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80076ac:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 80076b2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80076b8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80076be:	4313      	orrs	r3, r2
 80076c0:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c6:	693a      	ldr	r2, [r7, #16]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076d0:	693a      	ldr	r2, [r7, #16]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	4313      	orrs	r3, r2
 80076de:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 80076e0:	4b20      	ldr	r3, [pc, #128]	; (8007764 <FMC_NORSRAM_Init+0x11c>)
 80076e2:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076ea:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076f2:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80076fa:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	43db      	mvns	r3, r3
 800770a:	ea02 0103 	and.w	r1, r2, r3
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	4319      	orrs	r1, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007720:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007724:	d10c      	bne.n	8007740 <FMC_NORSRAM_Init+0xf8>
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d008      	beq.n	8007740 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773a:	431a      	orrs	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d006      	beq.n	8007756 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007750:	431a      	orrs	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	371c      	adds	r7, #28
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr
 8007764:	0008fb7f 	.word	0x0008fb7f

08007768 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007768:	b480      	push	{r7}
 800776a:	b087      	sub	sp, #28
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	1c5a      	adds	r2, r3, #1
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800777e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	011b      	lsls	r3, r3, #4
 800778c:	431a      	orrs	r2, r3
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	021b      	lsls	r3, r3, #8
 8007794:	431a      	orrs	r2, r3
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	041b      	lsls	r3, r3, #16
 800779c:	431a      	orrs	r2, r3
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	3b01      	subs	r3, #1
 80077a4:	051b      	lsls	r3, r3, #20
 80077a6:	431a      	orrs	r2, r3
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	695b      	ldr	r3, [r3, #20]
 80077ac:	3b02      	subs	r3, #2
 80077ae:	061b      	lsls	r3, r3, #24
 80077b0:	431a      	orrs	r2, r3
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	3201      	adds	r2, #1
 80077bc:	4319      	orrs	r1, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077d0:	d113      	bne.n	80077fa <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80077da:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	3b01      	subs	r3, #1
 80077e2:	051b      	lsls	r3, r3, #20
 80077e4:	697a      	ldr	r2, [r7, #20]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	431a      	orrs	r2, r3
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	371c      	adds	r7, #28
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
 8007814:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800781c:	d11d      	bne.n	800785a <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007826:	4b13      	ldr	r3, [pc, #76]	; (8007874 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8007828:	4013      	ands	r3, r2
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	6811      	ldr	r1, [r2, #0]
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	6852      	ldr	r2, [r2, #4]
 8007832:	0112      	lsls	r2, r2, #4
 8007834:	4311      	orrs	r1, r2
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	6892      	ldr	r2, [r2, #8]
 800783a:	0212      	lsls	r2, r2, #8
 800783c:	4311      	orrs	r1, r2
 800783e:	68ba      	ldr	r2, [r7, #8]
 8007840:	6992      	ldr	r2, [r2, #24]
 8007842:	4311      	orrs	r1, r2
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	68d2      	ldr	r2, [r2, #12]
 8007848:	0412      	lsls	r2, r2, #16
 800784a:	430a      	orrs	r2, r1
 800784c:	ea43 0102 	orr.w	r1, r3, r2
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007858:	e005      	b.n	8007866 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007862:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3714      	adds	r7, #20
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr
 8007874:	cff00000 	.word	0xcff00000

08007878 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800787c:	4904      	ldr	r1, [pc, #16]	; (8007890 <MX_FATFS_Init+0x18>)
 800787e:	4805      	ldr	r0, [pc, #20]	; (8007894 <MX_FATFS_Init+0x1c>)
 8007880:	f003 fdda 	bl	800b438 <FATFS_LinkDriver>
 8007884:	4603      	mov	r3, r0
 8007886:	461a      	mov	r2, r3
 8007888:	4b03      	ldr	r3, [pc, #12]	; (8007898 <MX_FATFS_Init+0x20>)
 800788a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800788c:	bf00      	nop
 800788e:	bd80      	pop	{r7, pc}
 8007890:	200014b8 	.word	0x200014b8
 8007894:	20000090 	.word	0x20000090
 8007898:	200014b4 	.word	0x200014b4

0800789c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	4603      	mov	r3, r0
 80078a4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	SD_disk_initialize (pdrv);
 80078a6:	79fb      	ldrb	r3, [r7, #7]
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7f9 fe67 	bl	800157c <SD_disk_initialize>
  /* USER CODE END INIT */
}
 80078ae:	bf00      	nop
 80078b0:	4618      	mov	r0, r3
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	4603      	mov	r3, r0
 80078c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
	SD_disk_status (pdrv);
 80078c2:	79fb      	ldrb	r3, [r7, #7]
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7f9 ff3f 	bl	8001748 <SD_disk_status>
  /* USER CODE END STATUS */
}
 80078ca:	bf00      	nop
 80078cc:	4618      	mov	r0, r3
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60b9      	str	r1, [r7, #8]
 80078dc:	607a      	str	r2, [r7, #4]
 80078de:	603b      	str	r3, [r7, #0]
 80078e0:	4603      	mov	r3, r0
 80078e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	SD_disk_read (pdrv, buff, sector, count);
 80078e4:	7bf8      	ldrb	r0, [r7, #15]
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	68b9      	ldr	r1, [r7, #8]
 80078ec:	f7f9 ff42 	bl	8001774 <SD_disk_read>
  /* USER CODE END READ */
}
 80078f0:	bf00      	nop
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b084      	sub	sp, #16
 80078fe:	af00      	add	r7, sp, #0
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
 8007904:	603b      	str	r3, [r7, #0]
 8007906:	4603      	mov	r3, r0
 8007908:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	SD_disk_write (pdrv, buff, sector, count);
 800790a:	7bf8      	ldrb	r0, [r7, #15]
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	68b9      	ldr	r1, [r7, #8]
 8007912:	f7f9 ff99 	bl	8001848 <SD_disk_write>
  /* USER CODE END WRITE */
}
 8007916:	bf00      	nop
 8007918:	4618      	mov	r0, r3
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	4603      	mov	r3, r0
 8007928:	603a      	str	r2, [r7, #0]
 800792a:	71fb      	strb	r3, [r7, #7]
 800792c:	460b      	mov	r3, r1
 800792e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	SD_disk_ioctl (pdrv, cmd, buff);
 8007930:	79fb      	ldrb	r3, [r7, #7]
 8007932:	79b9      	ldrb	r1, [r7, #6]
 8007934:	683a      	ldr	r2, [r7, #0]
 8007936:	4618      	mov	r0, r3
 8007938:	f7fa f80a 	bl	8001950 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 800793c:	bf00      	nop
 800793e:	4618      	mov	r0, r3
 8007940:	3708      	adds	r7, #8
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
	...

08007948 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8007948:	b590      	push	{r4, r7, lr}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
 800794e:	4604      	mov	r4, r0
 8007950:	4608      	mov	r0, r1
 8007952:	4611      	mov	r1, r2
 8007954:	461a      	mov	r2, r3
 8007956:	4623      	mov	r3, r4
 8007958:	71fb      	strb	r3, [r7, #7]
 800795a:	4603      	mov	r3, r0
 800795c:	71bb      	strb	r3, [r7, #6]
 800795e:	460b      	mov	r3, r1
 8007960:	80bb      	strh	r3, [r7, #4]
 8007962:	4613      	mov	r3, r2
 8007964:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8007966:	79fb      	ldrb	r3, [r7, #7]
 8007968:	2b08      	cmp	r3, #8
 800796a:	d902      	bls.n	8007972 <socket+0x2a>
 800796c:	f04f 33ff 	mov.w	r3, #4294967295
 8007970:	e0f6      	b.n	8007b60 <socket+0x218>
	switch(protocol)
 8007972:	79bb      	ldrb	r3, [r7, #6]
 8007974:	2b01      	cmp	r3, #1
 8007976:	d005      	beq.n	8007984 <socket+0x3c>
 8007978:	2b00      	cmp	r3, #0
 800797a:	dd32      	ble.n	80079e2 <socket+0x9a>
 800797c:	3b02      	subs	r3, #2
 800797e:	2b02      	cmp	r3, #2
 8007980:	d82f      	bhi.n	80079e2 <socket+0x9a>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8007982:	e032      	b.n	80079ea <socket+0xa2>
            getSIPR((uint8_t*)&taddr);
 8007984:	2018      	movs	r0, #24
 8007986:	f000 ff89 	bl	800889c <WIZCHIP_READ>
 800798a:	4603      	mov	r3, r0
 800798c:	0a1b      	lsrs	r3, r3, #8
 800798e:	b29a      	uxth	r2, r3
 8007990:	f107 030c 	add.w	r3, r7, #12
 8007994:	b2d2      	uxtb	r2, r2
 8007996:	701a      	strb	r2, [r3, #0]
 8007998:	2018      	movs	r0, #24
 800799a:	f000 ff7f 	bl	800889c <WIZCHIP_READ>
 800799e:	4603      	mov	r3, r0
 80079a0:	461a      	mov	r2, r3
 80079a2:	f107 030c 	add.w	r3, r7, #12
 80079a6:	3301      	adds	r3, #1
 80079a8:	b2d2      	uxtb	r2, r2
 80079aa:	701a      	strb	r2, [r3, #0]
 80079ac:	201a      	movs	r0, #26
 80079ae:	f000 ff75 	bl	800889c <WIZCHIP_READ>
 80079b2:	4603      	mov	r3, r0
 80079b4:	0a1b      	lsrs	r3, r3, #8
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	f107 030c 	add.w	r3, r7, #12
 80079bc:	3302      	adds	r3, #2
 80079be:	b2d2      	uxtb	r2, r2
 80079c0:	701a      	strb	r2, [r3, #0]
 80079c2:	201a      	movs	r0, #26
 80079c4:	f000 ff6a 	bl	800889c <WIZCHIP_READ>
 80079c8:	4603      	mov	r3, r0
 80079ca:	461a      	mov	r2, r3
 80079cc:	f107 030c 	add.w	r3, r7, #12
 80079d0:	3303      	adds	r3, #3
 80079d2:	b2d2      	uxtb	r2, r2
 80079d4:	701a      	strb	r2, [r3, #0]
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d105      	bne.n	80079e8 <socket+0xa0>
 80079dc:	f06f 0302 	mvn.w	r3, #2
 80079e0:	e0be      	b.n	8007b60 <socket+0x218>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80079e2:	f06f 0304 	mvn.w	r3, #4
 80079e6:	e0bb      	b.n	8007b60 <socket+0x218>
	    break;
 80079e8:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80079ea:	78fb      	ldrb	r3, [r7, #3]
 80079ec:	f003 0304 	and.w	r3, r3, #4
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d002      	beq.n	80079fa <socket+0xb2>
 80079f4:	f06f 0305 	mvn.w	r3, #5
 80079f8:	e0b2      	b.n	8007b60 <socket+0x218>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80079fa:	78fb      	ldrb	r3, [r7, #3]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d01c      	beq.n	8007a3a <socket+0xf2>
	{
   	switch(protocol)
 8007a00:	79bb      	ldrb	r3, [r7, #6]
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d002      	beq.n	8007a0c <socket+0xc4>
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d008      	beq.n	8007a1c <socket+0xd4>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8007a0a:	e016      	b.n	8007a3a <socket+0xf2>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK|SF_TCP_ALIGN))==0) return SOCKERR_SOCKFLAG;
 8007a0c:	78fb      	ldrb	r3, [r7, #3]
 8007a0e:	f003 0323 	and.w	r3, r3, #35	; 0x23
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d10e      	bne.n	8007a34 <socket+0xec>
 8007a16:	f06f 0305 	mvn.w	r3, #5
 8007a1a:	e0a1      	b.n	8007b60 <socket+0x218>
   	      if(flag & SF_IGMP_VER2)
 8007a1c:	78fb      	ldrb	r3, [r7, #3]
 8007a1e:	f003 0320 	and.w	r3, r3, #32
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d008      	beq.n	8007a38 <socket+0xf0>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8007a26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	db04      	blt.n	8007a38 <socket+0xf0>
 8007a2e:	f06f 0305 	mvn.w	r3, #5
 8007a32:	e095      	b.n	8007b60 <socket+0x218>
   	      break;
 8007a34:	bf00      	nop
 8007a36:	e000      	b.n	8007a3a <socket+0xf2>
   	      break;
 8007a38:	bf00      	nop
   	}
   }
	close(sn);
 8007a3a:	79fb      	ldrb	r3, [r7, #7]
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f000 f89d 	bl	8007b7c <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
 8007a42:	79fb      	ldrb	r3, [r7, #7]
 8007a44:	3308      	adds	r3, #8
 8007a46:	019b      	lsls	r3, r3, #6
 8007a48:	4618      	mov	r0, r3
 8007a4a:	79bb      	ldrb	r3, [r7, #6]
 8007a4c:	b21a      	sxth	r2, r3
 8007a4e:	78fb      	ldrb	r3, [r7, #3]
 8007a50:	b21b      	sxth	r3, r3
 8007a52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a56:	b21b      	sxth	r3, r3
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	b21a      	sxth	r2, r3
 8007a5c:	78fb      	ldrb	r3, [r7, #3]
 8007a5e:	01db      	lsls	r3, r3, #7
 8007a60:	b21b      	sxth	r3, r3
 8007a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a66:	b21b      	sxth	r3, r3
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	b21b      	sxth	r3, r3
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	4619      	mov	r1, r3
 8007a70:	f000 fef6 	bl	8008860 <WIZCHIP_WRITE>
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
    #endif
	if(!port)
 8007a74:	88bb      	ldrh	r3, [r7, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d110      	bne.n	8007a9c <socket+0x154>
	{
	   port = sock_any_port++;
 8007a7a:	4b3b      	ldr	r3, [pc, #236]	; (8007b68 <socket+0x220>)
 8007a7c:	881b      	ldrh	r3, [r3, #0]
 8007a7e:	1c5a      	adds	r2, r3, #1
 8007a80:	b291      	uxth	r1, r2
 8007a82:	4a39      	ldr	r2, [pc, #228]	; (8007b68 <socket+0x220>)
 8007a84:	8011      	strh	r1, [r2, #0]
 8007a86:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8007a88:	4b37      	ldr	r3, [pc, #220]	; (8007b68 <socket+0x220>)
 8007a8a:	881b      	ldrh	r3, [r3, #0]
 8007a8c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d103      	bne.n	8007a9c <socket+0x154>
 8007a94:	4b34      	ldr	r3, [pc, #208]	; (8007b68 <socket+0x220>)
 8007a96:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8007a9a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8007a9c:	79fb      	ldrb	r3, [r7, #7]
 8007a9e:	3308      	adds	r3, #8
 8007aa0:	019b      	lsls	r3, r3, #6
 8007aa2:	330a      	adds	r3, #10
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	88bb      	ldrh	r3, [r7, #4]
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	4610      	mov	r0, r2
 8007aac:	f000 fed8 	bl	8008860 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8007ab0:	79fb      	ldrb	r3, [r7, #7]
 8007ab2:	3308      	adds	r3, #8
 8007ab4:	019b      	lsls	r3, r3, #6
 8007ab6:	3302      	adds	r3, #2
 8007ab8:	2101      	movs	r1, #1
 8007aba:	4618      	mov	r0, r3
 8007abc:	f000 fed0 	bl	8008860 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8007ac0:	bf00      	nop
 8007ac2:	79fb      	ldrb	r3, [r7, #7]
 8007ac4:	3308      	adds	r3, #8
 8007ac6:	019b      	lsls	r3, r3, #6
 8007ac8:	3302      	adds	r3, #2
 8007aca:	4618      	mov	r0, r3
 8007acc:	f000 fee6 	bl	800889c <WIZCHIP_READ>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1f4      	bne.n	8007ac2 <socket+0x17a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8007ad8:	79fb      	ldrb	r3, [r7, #7]
 8007ada:	2201      	movs	r2, #1
 8007adc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae0:	b21b      	sxth	r3, r3
 8007ae2:	43db      	mvns	r3, r3
 8007ae4:	b21a      	sxth	r2, r3
 8007ae6:	4b21      	ldr	r3, [pc, #132]	; (8007b6c <socket+0x224>)
 8007ae8:	881b      	ldrh	r3, [r3, #0]
 8007aea:	b21b      	sxth	r3, r3
 8007aec:	4013      	ands	r3, r2
 8007aee:	b21b      	sxth	r3, r3
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	4b1e      	ldr	r3, [pc, #120]	; (8007b6c <socket+0x224>)
 8007af4:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8007af6:	78fb      	ldrb	r3, [r7, #3]
 8007af8:	f003 0201 	and.w	r2, r3, #1
 8007afc:	79fb      	ldrb	r3, [r7, #7]
 8007afe:	fa02 f303 	lsl.w	r3, r2, r3
 8007b02:	b21a      	sxth	r2, r3
 8007b04:	4b19      	ldr	r3, [pc, #100]	; (8007b6c <socket+0x224>)
 8007b06:	881b      	ldrh	r3, [r3, #0]
 8007b08:	b21b      	sxth	r3, r3
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	b21b      	sxth	r3, r3
 8007b0e:	b29a      	uxth	r2, r3
 8007b10:	4b16      	ldr	r3, [pc, #88]	; (8007b6c <socket+0x224>)
 8007b12:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8007b14:	79fb      	ldrb	r3, [r7, #7]
 8007b16:	2201      	movs	r2, #1
 8007b18:	fa02 f303 	lsl.w	r3, r2, r3
 8007b1c:	b21b      	sxth	r3, r3
 8007b1e:	43db      	mvns	r3, r3
 8007b20:	b21a      	sxth	r2, r3
 8007b22:	4b13      	ldr	r3, [pc, #76]	; (8007b70 <socket+0x228>)
 8007b24:	881b      	ldrh	r3, [r3, #0]
 8007b26:	b21b      	sxth	r3, r3
 8007b28:	4013      	ands	r3, r2
 8007b2a:	b21b      	sxth	r3, r3
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	4b10      	ldr	r3, [pc, #64]	; (8007b70 <socket+0x228>)
 8007b30:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8007b32:	79fb      	ldrb	r3, [r7, #7]
 8007b34:	4a0f      	ldr	r2, [pc, #60]	; (8007b74 <socket+0x22c>)
 8007b36:	2100      	movs	r1, #0
 8007b38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8007b3c:	79fb      	ldrb	r3, [r7, #7]
 8007b3e:	4a0e      	ldr	r2, [pc, #56]	; (8007b78 <socket+0x230>)
 8007b40:	2100      	movs	r1, #0
 8007b42:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8007b44:	bf00      	nop
 8007b46:	79fb      	ldrb	r3, [r7, #7]
 8007b48:	3308      	adds	r3, #8
 8007b4a:	019b      	lsls	r3, r3, #6
 8007b4c:	3308      	adds	r3, #8
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f000 fea4 	bl	800889c <WIZCHIP_READ>
 8007b54:	4603      	mov	r3, r0
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d0f4      	beq.n	8007b46 <socket+0x1fe>
   return (int8_t)sn;
 8007b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8007b60:	4618      	mov	r0, r3
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd90      	pop	{r4, r7, pc}
 8007b68:	200000a4 	.word	0x200000a4
 8007b6c:	200014bc 	.word	0x200014bc
 8007b70:	200014be 	.word	0x200014be
 8007b74:	200014c0 	.word	0x200014c0
 8007b78:	200014d0 	.word	0x200014d0

08007b7c <close>:

int8_t close(uint8_t sn)
{
 8007b7c:	b590      	push	{r4, r7, lr}
 8007b7e:	b087      	sub	sp, #28
 8007b80:	af02      	add	r7, sp, #8
 8007b82:	4603      	mov	r3, r0
 8007b84:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8007b86:	79fb      	ldrb	r3, [r7, #7]
 8007b88:	2b08      	cmp	r3, #8
 8007b8a:	d902      	bls.n	8007b92 <close+0x16>
 8007b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b90:	e0a5      	b.n	8007cde <close+0x162>
//A20160426 : Applied the erratum 1 of W5300
#if   (_WIZCHIP_ == 5300) 
   //M20160503 : Wrong socket parameter. s -> sn 
   //if( ((getSn_MR(s)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(s) != getSn_TxMAX(s)) ) 
   if( ((getSn_MR(sn)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(sn) != getSn_TxMAX(sn)) ) 
 8007b92:	79fb      	ldrb	r3, [r7, #7]
 8007b94:	3308      	adds	r3, #8
 8007b96:	019b      	lsls	r3, r3, #6
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f000 fe7f 	bl	800889c <WIZCHIP_READ>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	f003 030f 	and.w	r3, r3, #15
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d14a      	bne.n	8007c3e <close+0xc2>
 8007ba8:	79fb      	ldrb	r3, [r7, #7]
 8007baa:	4618      	mov	r0, r3
 8007bac:	f000 ff4c 	bl	8008a48 <getSn_TX_FSR>
 8007bb0:	4604      	mov	r4, r0
 8007bb2:	79fb      	ldrb	r3, [r7, #7]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f000 fec8 	bl	800894a <getTMSR>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	029b      	lsls	r3, r3, #10
 8007bbe:	429c      	cmp	r4, r3
 8007bc0:	d03d      	beq.n	8007c3e <close+0xc2>
   { 
      uint8_t destip[4] = {0, 0, 0, 1};
 8007bc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007bc6:	60fb      	str	r3, [r7, #12]
      //     if (getSn_TX_FSR(s) == getSn_TxMAX(s)) continue;
      // 
      //M20160503 : The socket() of close() calls close() itself again. It occures a infinite loop - close()->socket()->close()->socket()-> ~
      //socket(s,Sn_MR_UDP,0x3000,0);
      //sendto(s,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
      setSn_MR(sn,Sn_MR_UDP);
 8007bc8:	79fb      	ldrb	r3, [r7, #7]
 8007bca:	3308      	adds	r3, #8
 8007bcc:	019b      	lsls	r3, r3, #6
 8007bce:	2102      	movs	r1, #2
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f000 fe45 	bl	8008860 <WIZCHIP_WRITE>
      setSn_PORTR(sn, 0x3000);
 8007bd6:	79fb      	ldrb	r3, [r7, #7]
 8007bd8:	3308      	adds	r3, #8
 8007bda:	019b      	lsls	r3, r3, #6
 8007bdc:	330a      	adds	r3, #10
 8007bde:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8007be2:	4618      	mov	r0, r3
 8007be4:	f000 fe3c 	bl	8008860 <WIZCHIP_WRITE>
      setSn_CR(sn,Sn_CR_OPEN);
 8007be8:	79fb      	ldrb	r3, [r7, #7]
 8007bea:	3308      	adds	r3, #8
 8007bec:	019b      	lsls	r3, r3, #6
 8007bee:	3302      	adds	r3, #2
 8007bf0:	2101      	movs	r1, #1
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f000 fe34 	bl	8008860 <WIZCHIP_WRITE>
      while(getSn_CR(sn) != 0);
 8007bf8:	bf00      	nop
 8007bfa:	79fb      	ldrb	r3, [r7, #7]
 8007bfc:	3308      	adds	r3, #8
 8007bfe:	019b      	lsls	r3, r3, #6
 8007c00:	3302      	adds	r3, #2
 8007c02:	4618      	mov	r0, r3
 8007c04:	f000 fe4a 	bl	800889c <WIZCHIP_READ>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1f4      	bne.n	8007bfa <close+0x7e>
      while(getSn_SR(sn) != SOCK_UDP);
 8007c10:	bf00      	nop
 8007c12:	79fb      	ldrb	r3, [r7, #7]
 8007c14:	3308      	adds	r3, #8
 8007c16:	019b      	lsls	r3, r3, #6
 8007c18:	3308      	adds	r3, #8
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f000 fe3e 	bl	800889c <WIZCHIP_READ>
 8007c20:	4603      	mov	r3, r0
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	2b22      	cmp	r3, #34	; 0x22
 8007c26:	d1f4      	bne.n	8007c12 <close+0x96>
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
 8007c28:	f107 030c 	add.w	r3, r7, #12
 8007c2c:	f107 010c 	add.w	r1, r7, #12
 8007c30:	79f8      	ldrb	r0, [r7, #7]
 8007c32:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8007c36:	9200      	str	r2, [sp, #0]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f000 fc09 	bl	8008450 <sendto>
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8007c3e:	79fb      	ldrb	r3, [r7, #7]
 8007c40:	3308      	adds	r3, #8
 8007c42:	019b      	lsls	r3, r3, #6
 8007c44:	3302      	adds	r3, #2
 8007c46:	2110      	movs	r1, #16
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f000 fe09 	bl	8008860 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8007c4e:	bf00      	nop
 8007c50:	79fb      	ldrb	r3, [r7, #7]
 8007c52:	3308      	adds	r3, #8
 8007c54:	019b      	lsls	r3, r3, #6
 8007c56:	3302      	adds	r3, #2
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f000 fe1f 	bl	800889c <WIZCHIP_READ>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d1f4      	bne.n	8007c50 <close+0xd4>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8007c66:	79fb      	ldrb	r3, [r7, #7]
 8007c68:	3308      	adds	r3, #8
 8007c6a:	019b      	lsls	r3, r3, #6
 8007c6c:	3306      	adds	r3, #6
 8007c6e:	21ff      	movs	r1, #255	; 0xff
 8007c70:	4618      	mov	r0, r3
 8007c72:	f000 fdf5 	bl	8008860 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8007c76:	79fb      	ldrb	r3, [r7, #7]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c7e:	b21b      	sxth	r3, r3
 8007c80:	43db      	mvns	r3, r3
 8007c82:	b21a      	sxth	r2, r3
 8007c84:	4b18      	ldr	r3, [pc, #96]	; (8007ce8 <close+0x16c>)
 8007c86:	881b      	ldrh	r3, [r3, #0]
 8007c88:	b21b      	sxth	r3, r3
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	b21b      	sxth	r3, r3
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	4b15      	ldr	r3, [pc, #84]	; (8007ce8 <close+0x16c>)
 8007c92:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8007c94:	79fb      	ldrb	r3, [r7, #7]
 8007c96:	2201      	movs	r2, #1
 8007c98:	fa02 f303 	lsl.w	r3, r2, r3
 8007c9c:	b21b      	sxth	r3, r3
 8007c9e:	43db      	mvns	r3, r3
 8007ca0:	b21a      	sxth	r2, r3
 8007ca2:	4b12      	ldr	r3, [pc, #72]	; (8007cec <close+0x170>)
 8007ca4:	881b      	ldrh	r3, [r3, #0]
 8007ca6:	b21b      	sxth	r3, r3
 8007ca8:	4013      	ands	r3, r2
 8007caa:	b21b      	sxth	r3, r3
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	4b0f      	ldr	r3, [pc, #60]	; (8007cec <close+0x170>)
 8007cb0:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8007cb2:	79fb      	ldrb	r3, [r7, #7]
 8007cb4:	4a0e      	ldr	r2, [pc, #56]	; (8007cf0 <close+0x174>)
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8007cbc:	79fb      	ldrb	r3, [r7, #7]
 8007cbe:	4a0d      	ldr	r2, [pc, #52]	; (8007cf4 <close+0x178>)
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8007cc4:	bf00      	nop
 8007cc6:	79fb      	ldrb	r3, [r7, #7]
 8007cc8:	3308      	adds	r3, #8
 8007cca:	019b      	lsls	r3, r3, #6
 8007ccc:	3308      	adds	r3, #8
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f000 fde4 	bl	800889c <WIZCHIP_READ>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1f4      	bne.n	8007cc6 <close+0x14a>
	return SOCK_OK;
 8007cdc:	2301      	movs	r3, #1
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3714      	adds	r7, #20
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd90      	pop	{r4, r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	200014bc 	.word	0x200014bc
 8007cec:	200014be 	.word	0x200014be
 8007cf0:	200014c0 	.word	0x200014c0
 8007cf4:	200014d0 	.word	0x200014d0

08007cf8 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	4603      	mov	r3, r0
 8007d00:	6039      	str	r1, [r7, #0]
 8007d02:	71fb      	strb	r3, [r7, #7]
 8007d04:	4613      	mov	r3, r2
 8007d06:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8007d08:	79fb      	ldrb	r3, [r7, #7]
 8007d0a:	2b08      	cmp	r3, #8
 8007d0c:	d902      	bls.n	8007d14 <connect+0x1c>
 8007d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d12:	e0c6      	b.n	8007ea2 <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8007d14:	79fb      	ldrb	r3, [r7, #7]
 8007d16:	3308      	adds	r3, #8
 8007d18:	019b      	lsls	r3, r3, #6
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f000 fdbe 	bl	800889c <WIZCHIP_READ>
 8007d20:	4603      	mov	r3, r0
 8007d22:	f003 030f 	and.w	r3, r3, #15
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d002      	beq.n	8007d30 <connect+0x38>
 8007d2a:	f06f 0304 	mvn.w	r3, #4
 8007d2e:	e0b8      	b.n	8007ea2 <connect+0x1aa>
   CHECK_SOCKINIT();
 8007d30:	79fb      	ldrb	r3, [r7, #7]
 8007d32:	3308      	adds	r3, #8
 8007d34:	019b      	lsls	r3, r3, #6
 8007d36:	3308      	adds	r3, #8
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f000 fdaf 	bl	800889c <WIZCHIP_READ>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	2b13      	cmp	r3, #19
 8007d44:	d002      	beq.n	8007d4c <connect+0x54>
 8007d46:	f06f 0302 	mvn.w	r3, #2
 8007d4a:	e0aa      	b.n	8007ea2 <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	021b      	lsls	r3, r3, #8
 8007d56:	683a      	ldr	r2, [r7, #0]
 8007d58:	3201      	adds	r2, #1
 8007d5a:	7812      	ldrb	r2, [r2, #0]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	021b      	lsls	r3, r3, #8
 8007d64:	683a      	ldr	r2, [r7, #0]
 8007d66:	3202      	adds	r2, #2
 8007d68:	7812      	ldrb	r2, [r2, #0]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	021b      	lsls	r3, r3, #8
 8007d72:	683a      	ldr	r2, [r7, #0]
 8007d74:	3203      	adds	r2, #3
 8007d76:	7812      	ldrb	r2, [r2, #0]
 8007d78:	4413      	add	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d82:	d002      	beq.n	8007d8a <connect+0x92>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d102      	bne.n	8007d90 <connect+0x98>
 8007d8a:	f06f 030b 	mvn.w	r3, #11
 8007d8e:	e088      	b.n	8007ea2 <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8007d90:	88bb      	ldrh	r3, [r7, #4]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d102      	bne.n	8007d9c <connect+0xa4>
 8007d96:	f06f 030a 	mvn.w	r3, #10
 8007d9a:	e082      	b.n	8007ea2 <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8007d9c:	79fb      	ldrb	r3, [r7, #7]
 8007d9e:	3308      	adds	r3, #8
 8007da0:	019b      	lsls	r3, r3, #6
 8007da2:	3314      	adds	r3, #20
 8007da4:	4618      	mov	r0, r3
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	021b      	lsls	r3, r3, #8
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	3301      	adds	r3, #1
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	4413      	add	r3, r2
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	f000 fd4f 	bl	8008860 <WIZCHIP_WRITE>
 8007dc2:	79fb      	ldrb	r3, [r7, #7]
 8007dc4:	3308      	adds	r3, #8
 8007dc6:	019b      	lsls	r3, r3, #6
 8007dc8:	3316      	adds	r3, #22
 8007dca:	4618      	mov	r0, r3
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	3302      	adds	r3, #2
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	021b      	lsls	r3, r3, #8
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	3303      	adds	r3, #3
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	4413      	add	r3, r2
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	4619      	mov	r1, r3
 8007de6:	f000 fd3b 	bl	8008860 <WIZCHIP_WRITE>
	setSn_DPORT(sn,port);
 8007dea:	79fb      	ldrb	r3, [r7, #7]
 8007dec:	3308      	adds	r3, #8
 8007dee:	019b      	lsls	r3, r3, #6
 8007df0:	3312      	adds	r3, #18
 8007df2:	461a      	mov	r2, r3
 8007df4:	88bb      	ldrh	r3, [r7, #4]
 8007df6:	4619      	mov	r1, r3
 8007df8:	4610      	mov	r0, r2
 8007dfa:	f000 fd31 	bl	8008860 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8007dfe:	79fb      	ldrb	r3, [r7, #7]
 8007e00:	3308      	adds	r3, #8
 8007e02:	019b      	lsls	r3, r3, #6
 8007e04:	3302      	adds	r3, #2
 8007e06:	2104      	movs	r1, #4
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f000 fd29 	bl	8008860 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8007e0e:	bf00      	nop
 8007e10:	79fb      	ldrb	r3, [r7, #7]
 8007e12:	3308      	adds	r3, #8
 8007e14:	019b      	lsls	r3, r3, #6
 8007e16:	3302      	adds	r3, #2
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f000 fd3f 	bl	800889c <WIZCHIP_READ>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1f4      	bne.n	8007e10 <connect+0x118>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8007e26:	4b21      	ldr	r3, [pc, #132]	; (8007eac <connect+0x1b4>)
 8007e28:	881b      	ldrh	r3, [r3, #0]
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	79fb      	ldrb	r3, [r7, #7]
 8007e2e:	fa42 f303 	asr.w	r3, r2, r3
 8007e32:	f003 0301 	and.w	r3, r3, #1
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d027      	beq.n	8007e8a <connect+0x192>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	e031      	b.n	8007ea2 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8007e3e:	79fb      	ldrb	r3, [r7, #7]
 8007e40:	3308      	adds	r3, #8
 8007e42:	019b      	lsls	r3, r3, #6
 8007e44:	3306      	adds	r3, #6
 8007e46:	4618      	mov	r0, r3
 8007e48:	f000 fd28 	bl	800889c <WIZCHIP_READ>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	f003 0308 	and.w	r3, r3, #8
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00a      	beq.n	8007e6e <connect+0x176>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8007e58:	79fb      	ldrb	r3, [r7, #7]
 8007e5a:	3308      	adds	r3, #8
 8007e5c:	019b      	lsls	r3, r3, #6
 8007e5e:	3306      	adds	r3, #6
 8007e60:	2108      	movs	r1, #8
 8007e62:	4618      	mov	r0, r3
 8007e64:	f000 fcfc 	bl	8008860 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8007e68:	f06f 030c 	mvn.w	r3, #12
 8007e6c:	e019      	b.n	8007ea2 <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8007e6e:	79fb      	ldrb	r3, [r7, #7]
 8007e70:	3308      	adds	r3, #8
 8007e72:	019b      	lsls	r3, r3, #6
 8007e74:	3308      	adds	r3, #8
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 fd10 	bl	800889c <WIZCHIP_READ>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d102      	bne.n	8007e8a <connect+0x192>
		{
			return SOCKERR_SOCKCLOSED;
 8007e84:	f06f 0303 	mvn.w	r3, #3
 8007e88:	e00b      	b.n	8007ea2 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8007e8a:	79fb      	ldrb	r3, [r7, #7]
 8007e8c:	3308      	adds	r3, #8
 8007e8e:	019b      	lsls	r3, r3, #6
 8007e90:	3308      	adds	r3, #8
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 fd02 	bl	800889c <WIZCHIP_READ>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	2b17      	cmp	r3, #23
 8007e9e:	d1ce      	bne.n	8007e3e <connect+0x146>
		}
	}
   
   return SOCK_OK;
 8007ea0:	2301      	movs	r3, #1
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	200014bc 	.word	0x200014bc

08007eb0 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8007eba:	79fb      	ldrb	r3, [r7, #7]
 8007ebc:	2b08      	cmp	r3, #8
 8007ebe:	d902      	bls.n	8007ec6 <disconnect+0x16>
 8007ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ec4:	e05c      	b.n	8007f80 <disconnect+0xd0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8007ec6:	79fb      	ldrb	r3, [r7, #7]
 8007ec8:	3308      	adds	r3, #8
 8007eca:	019b      	lsls	r3, r3, #6
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f000 fce5 	bl	800889c <WIZCHIP_READ>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	f003 030f 	and.w	r3, r3, #15
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d002      	beq.n	8007ee2 <disconnect+0x32>
 8007edc:	f06f 0304 	mvn.w	r3, #4
 8007ee0:	e04e      	b.n	8007f80 <disconnect+0xd0>
	setSn_CR(sn,Sn_CR_DISCON);
 8007ee2:	79fb      	ldrb	r3, [r7, #7]
 8007ee4:	3308      	adds	r3, #8
 8007ee6:	019b      	lsls	r3, r3, #6
 8007ee8:	3302      	adds	r3, #2
 8007eea:	2108      	movs	r1, #8
 8007eec:	4618      	mov	r0, r3
 8007eee:	f000 fcb7 	bl	8008860 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8007ef2:	bf00      	nop
 8007ef4:	79fb      	ldrb	r3, [r7, #7]
 8007ef6:	3308      	adds	r3, #8
 8007ef8:	019b      	lsls	r3, r3, #6
 8007efa:	3302      	adds	r3, #2
 8007efc:	4618      	mov	r0, r3
 8007efe:	f000 fccd 	bl	800889c <WIZCHIP_READ>
 8007f02:	4603      	mov	r3, r0
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1f4      	bne.n	8007ef4 <disconnect+0x44>
	sock_is_sending &= ~(1<<sn);
 8007f0a:	79fb      	ldrb	r3, [r7, #7]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f12:	b21b      	sxth	r3, r3
 8007f14:	43db      	mvns	r3, r3
 8007f16:	b21a      	sxth	r2, r3
 8007f18:	4b1b      	ldr	r3, [pc, #108]	; (8007f88 <disconnect+0xd8>)
 8007f1a:	881b      	ldrh	r3, [r3, #0]
 8007f1c:	b21b      	sxth	r3, r3
 8007f1e:	4013      	ands	r3, r2
 8007f20:	b21b      	sxth	r3, r3
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	4b18      	ldr	r3, [pc, #96]	; (8007f88 <disconnect+0xd8>)
 8007f26:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8007f28:	4b18      	ldr	r3, [pc, #96]	; (8007f8c <disconnect+0xdc>)
 8007f2a:	881b      	ldrh	r3, [r3, #0]
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	79fb      	ldrb	r3, [r7, #7]
 8007f30:	fa42 f303 	asr.w	r3, r2, r3
 8007f34:	f003 0301 	and.w	r3, r3, #1
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d015      	beq.n	8007f68 <disconnect+0xb8>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	e01f      	b.n	8007f80 <disconnect+0xd0>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8007f40:	79fb      	ldrb	r3, [r7, #7]
 8007f42:	3308      	adds	r3, #8
 8007f44:	019b      	lsls	r3, r3, #6
 8007f46:	3306      	adds	r3, #6
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f000 fca7 	bl	800889c <WIZCHIP_READ>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	f003 0308 	and.w	r3, r3, #8
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d006      	beq.n	8007f68 <disconnect+0xb8>
	   {
	      close(sn);
 8007f5a:	79fb      	ldrb	r3, [r7, #7]
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f7ff fe0d 	bl	8007b7c <close>
	      return SOCKERR_TIMEOUT;
 8007f62:	f06f 030c 	mvn.w	r3, #12
 8007f66:	e00b      	b.n	8007f80 <disconnect+0xd0>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8007f68:	79fb      	ldrb	r3, [r7, #7]
 8007f6a:	3308      	adds	r3, #8
 8007f6c:	019b      	lsls	r3, r3, #6
 8007f6e:	3308      	adds	r3, #8
 8007f70:	4618      	mov	r0, r3
 8007f72:	f000 fc93 	bl	800889c <WIZCHIP_READ>
 8007f76:	4603      	mov	r3, r0
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1e0      	bne.n	8007f40 <disconnect+0x90>
	   }
	}
	return SOCK_OK;
 8007f7e:	2301      	movs	r3, #1
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3708      	adds	r7, #8
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	200014be 	.word	0x200014be
 8007f8c:	200014bc 	.word	0x200014bc

08007f90 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	4603      	mov	r3, r0
 8007f98:	6039      	str	r1, [r7, #0]
 8007f9a:	71fb      	strb	r3, [r7, #7]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8007fa8:	79fb      	ldrb	r3, [r7, #7]
 8007faa:	2b08      	cmp	r3, #8
 8007fac:	d902      	bls.n	8007fb4 <send+0x24>
 8007fae:	f04f 33ff 	mov.w	r3, #4294967295
 8007fb2:	e0e1      	b.n	8008178 <send+0x1e8>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8007fb4:	79fb      	ldrb	r3, [r7, #7]
 8007fb6:	3308      	adds	r3, #8
 8007fb8:	019b      	lsls	r3, r3, #6
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 fc6e 	bl	800889c <WIZCHIP_READ>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	f003 030f 	and.w	r3, r3, #15
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d002      	beq.n	8007fd0 <send+0x40>
 8007fca:	f06f 0304 	mvn.w	r3, #4
 8007fce:	e0d3      	b.n	8008178 <send+0x1e8>
   CHECK_SOCKDATA();
 8007fd0:	88bb      	ldrh	r3, [r7, #4]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d102      	bne.n	8007fdc <send+0x4c>
 8007fd6:	f06f 030d 	mvn.w	r3, #13
 8007fda:	e0cd      	b.n	8008178 <send+0x1e8>
   tmp = getSn_SR(sn);
 8007fdc:	79fb      	ldrb	r3, [r7, #7]
 8007fde:	3308      	adds	r3, #8
 8007fe0:	019b      	lsls	r3, r3, #6
 8007fe2:	3308      	adds	r3, #8
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f000 fc59 	bl	800889c <WIZCHIP_READ>
 8007fea:	4603      	mov	r3, r0
 8007fec:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8007fee:	7bfb      	ldrb	r3, [r7, #15]
 8007ff0:	2b17      	cmp	r3, #23
 8007ff2:	d005      	beq.n	8008000 <send+0x70>
 8007ff4:	7bfb      	ldrb	r3, [r7, #15]
 8007ff6:	2b1c      	cmp	r3, #28
 8007ff8:	d002      	beq.n	8008000 <send+0x70>
 8007ffa:	f06f 0306 	mvn.w	r3, #6
 8007ffe:	e0bb      	b.n	8008178 <send+0x1e8>
   if( sock_is_sending & (1<<sn) )
 8008000:	4b5f      	ldr	r3, [pc, #380]	; (8008180 <send+0x1f0>)
 8008002:	881b      	ldrh	r3, [r3, #0]
 8008004:	461a      	mov	r2, r3
 8008006:	79fb      	ldrb	r3, [r7, #7]
 8008008:	fa42 f303 	asr.w	r3, r2, r3
 800800c:	f003 0301 	and.w	r3, r3, #1
 8008010:	2b00      	cmp	r3, #0
 8008012:	d033      	beq.n	800807c <send+0xec>
   {
      tmp = getSn_IR(sn);
 8008014:	79fb      	ldrb	r3, [r7, #7]
 8008016:	3308      	adds	r3, #8
 8008018:	019b      	lsls	r3, r3, #6
 800801a:	3306      	adds	r3, #6
 800801c:	4618      	mov	r0, r3
 800801e:	f000 fc3d 	bl	800889c <WIZCHIP_READ>
 8008022:	4603      	mov	r3, r0
 8008024:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8008026:	7bfb      	ldrb	r3, [r7, #15]
 8008028:	f003 0310 	and.w	r3, r3, #16
 800802c:	2b00      	cmp	r3, #0
 800802e:	d017      	beq.n	8008060 <send+0xd0>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8008030:	79fb      	ldrb	r3, [r7, #7]
 8008032:	3308      	adds	r3, #8
 8008034:	019b      	lsls	r3, r3, #6
 8008036:	3306      	adds	r3, #6
 8008038:	2110      	movs	r1, #16
 800803a:	4618      	mov	r0, r3
 800803c:	f000 fc10 	bl	8008860 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8008040:	79fb      	ldrb	r3, [r7, #7]
 8008042:	2201      	movs	r2, #1
 8008044:	fa02 f303 	lsl.w	r3, r2, r3
 8008048:	b21b      	sxth	r3, r3
 800804a:	43db      	mvns	r3, r3
 800804c:	b21a      	sxth	r2, r3
 800804e:	4b4c      	ldr	r3, [pc, #304]	; (8008180 <send+0x1f0>)
 8008050:	881b      	ldrh	r3, [r3, #0]
 8008052:	b21b      	sxth	r3, r3
 8008054:	4013      	ands	r3, r2
 8008056:	b21b      	sxth	r3, r3
 8008058:	b29a      	uxth	r2, r3
 800805a:	4b49      	ldr	r3, [pc, #292]	; (8008180 <send+0x1f0>)
 800805c:	801a      	strh	r2, [r3, #0]
 800805e:	e00d      	b.n	800807c <send+0xec>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8008060:	7bfb      	ldrb	r3, [r7, #15]
 8008062:	f003 0308 	and.w	r3, r3, #8
 8008066:	2b00      	cmp	r3, #0
 8008068:	d006      	beq.n	8008078 <send+0xe8>
      {
         close(sn);
 800806a:	79fb      	ldrb	r3, [r7, #7]
 800806c:	4618      	mov	r0, r3
 800806e:	f7ff fd85 	bl	8007b7c <close>
         return SOCKERR_TIMEOUT;
 8008072:	f06f 030c 	mvn.w	r3, #12
 8008076:	e07f      	b.n	8008178 <send+0x1e8>
      }
      else return SOCK_BUSY;
 8008078:	2300      	movs	r3, #0
 800807a:	e07d      	b.n	8008178 <send+0x1e8>
   }
   freesize = getSn_TxMAX(sn);
 800807c:	79fb      	ldrb	r3, [r7, #7]
 800807e:	4618      	mov	r0, r3
 8008080:	f000 fc63 	bl	800894a <getTMSR>
 8008084:	4603      	mov	r3, r0
 8008086:	b29b      	uxth	r3, r3
 8008088:	029b      	lsls	r3, r3, #10
 800808a:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800808c:	88ba      	ldrh	r2, [r7, #4]
 800808e:	89bb      	ldrh	r3, [r7, #12]
 8008090:	429a      	cmp	r2, r3
 8008092:	d901      	bls.n	8008098 <send+0x108>
 8008094:	89bb      	ldrh	r3, [r7, #12]
 8008096:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8008098:	79fb      	ldrb	r3, [r7, #7]
 800809a:	4618      	mov	r0, r3
 800809c:	f000 fcd4 	bl	8008a48 <getSn_TX_FSR>
 80080a0:	4603      	mov	r3, r0
 80080a2:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80080a4:	79fb      	ldrb	r3, [r7, #7]
 80080a6:	3308      	adds	r3, #8
 80080a8:	019b      	lsls	r3, r3, #6
 80080aa:	3308      	adds	r3, #8
 80080ac:	4618      	mov	r0, r3
 80080ae:	f000 fbf5 	bl	800889c <WIZCHIP_READ>
 80080b2:	4603      	mov	r3, r0
 80080b4:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80080b6:	7bfb      	ldrb	r3, [r7, #15]
 80080b8:	2b17      	cmp	r3, #23
 80080ba:	d009      	beq.n	80080d0 <send+0x140>
 80080bc:	7bfb      	ldrb	r3, [r7, #15]
 80080be:	2b1c      	cmp	r3, #28
 80080c0:	d006      	beq.n	80080d0 <send+0x140>
      {
         close(sn);
 80080c2:	79fb      	ldrb	r3, [r7, #7]
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7ff fd59 	bl	8007b7c <close>
         return SOCKERR_SOCKSTATUS;
 80080ca:	f06f 0306 	mvn.w	r3, #6
 80080ce:	e053      	b.n	8008178 <send+0x1e8>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80080d0:	4b2c      	ldr	r3, [pc, #176]	; (8008184 <send+0x1f4>)
 80080d2:	881b      	ldrh	r3, [r3, #0]
 80080d4:	461a      	mov	r2, r3
 80080d6:	79fb      	ldrb	r3, [r7, #7]
 80080d8:	fa42 f303 	asr.w	r3, r2, r3
 80080dc:	f003 0301 	and.w	r3, r3, #1
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d005      	beq.n	80080f0 <send+0x160>
 80080e4:	88ba      	ldrh	r2, [r7, #4]
 80080e6:	89bb      	ldrh	r3, [r7, #12]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d901      	bls.n	80080f0 <send+0x160>
 80080ec:	2300      	movs	r3, #0
 80080ee:	e043      	b.n	8008178 <send+0x1e8>
      if(len <= freesize) break;
 80080f0:	88ba      	ldrh	r2, [r7, #4]
 80080f2:	89bb      	ldrh	r3, [r7, #12]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d900      	bls.n	80080fa <send+0x16a>
      freesize = getSn_TX_FSR(sn);
 80080f8:	e7ce      	b.n	8008098 <send+0x108>
      if(len <= freesize) break;
 80080fa:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 80080fc:	88ba      	ldrh	r2, [r7, #4]
 80080fe:	79fb      	ldrb	r3, [r7, #7]
 8008100:	6839      	ldr	r1, [r7, #0]
 8008102:	4618      	mov	r0, r3
 8008104:	f000 fcfc 	bl	8008b00 <wiz_send_data>
   #if _WIZCHIP_ == 5200
      sock_next_rd[sn] = getSn_TX_RD(sn) + len;
   #endif

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
 8008108:	79fb      	ldrb	r3, [r7, #7]
 800810a:	3308      	adds	r3, #8
 800810c:	019b      	lsls	r3, r3, #6
 800810e:	3320      	adds	r3, #32
 8008110:	461a      	mov	r2, r3
 8008112:	88bb      	ldrh	r3, [r7, #4]
 8008114:	0c1b      	lsrs	r3, r3, #16
 8008116:	b29b      	uxth	r3, r3
 8008118:	4619      	mov	r1, r3
 800811a:	4610      	mov	r0, r2
 800811c:	f000 fba0 	bl	8008860 <WIZCHIP_WRITE>
 8008120:	79fb      	ldrb	r3, [r7, #7]
 8008122:	3308      	adds	r3, #8
 8008124:	019b      	lsls	r3, r3, #6
 8008126:	3322      	adds	r3, #34	; 0x22
 8008128:	461a      	mov	r2, r3
 800812a:	88bb      	ldrh	r3, [r7, #4]
 800812c:	4619      	mov	r1, r3
 800812e:	4610      	mov	r0, r2
 8008130:	f000 fb96 	bl	8008860 <WIZCHIP_WRITE>
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8008134:	79fb      	ldrb	r3, [r7, #7]
 8008136:	3308      	adds	r3, #8
 8008138:	019b      	lsls	r3, r3, #6
 800813a:	3302      	adds	r3, #2
 800813c:	2120      	movs	r1, #32
 800813e:	4618      	mov	r0, r3
 8008140:	f000 fb8e 	bl	8008860 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8008144:	bf00      	nop
 8008146:	79fb      	ldrb	r3, [r7, #7]
 8008148:	3308      	adds	r3, #8
 800814a:	019b      	lsls	r3, r3, #6
 800814c:	3302      	adds	r3, #2
 800814e:	4618      	mov	r0, r3
 8008150:	f000 fba4 	bl	800889c <WIZCHIP_READ>
 8008154:	4603      	mov	r3, r0
 8008156:	b2db      	uxtb	r3, r3
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1f4      	bne.n	8008146 <send+0x1b6>
   sock_is_sending |= (1 << sn);
 800815c:	79fb      	ldrb	r3, [r7, #7]
 800815e:	2201      	movs	r2, #1
 8008160:	fa02 f303 	lsl.w	r3, r2, r3
 8008164:	b21a      	sxth	r2, r3
 8008166:	4b06      	ldr	r3, [pc, #24]	; (8008180 <send+0x1f0>)
 8008168:	881b      	ldrh	r3, [r3, #0]
 800816a:	b21b      	sxth	r3, r3
 800816c:	4313      	orrs	r3, r2
 800816e:	b21b      	sxth	r3, r3
 8008170:	b29a      	uxth	r2, r3
 8008172:	4b03      	ldr	r3, [pc, #12]	; (8008180 <send+0x1f0>)
 8008174:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8008176:	88bb      	ldrh	r3, [r7, #4]
}
 8008178:	4618      	mov	r0, r3
 800817a:	3710      	adds	r7, #16
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	200014be 	.word	0x200014be
 8008184:	200014bc 	.word	0x200014bc

08008188 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8008188:	b590      	push	{r4, r7, lr}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	4603      	mov	r3, r0
 8008190:	6039      	str	r1, [r7, #0]
 8008192:	71fb      	strb	r3, [r7, #7]
 8008194:	4613      	mov	r3, r2
 8008196:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8008198:	2300      	movs	r3, #0
 800819a:	737b      	strb	r3, [r7, #13]
   uint16_t recvsize = 0;
 800819c:	2300      	movs	r3, #0
 800819e:	81fb      	strh	r3, [r7, #14]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 80081a0:	79fb      	ldrb	r3, [r7, #7]
 80081a2:	2b08      	cmp	r3, #8
 80081a4:	d902      	bls.n	80081ac <recv+0x24>
 80081a6:	f04f 33ff 	mov.w	r3, #4294967295
 80081aa:	e145      	b.n	8008438 <recv+0x2b0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80081ac:	79fb      	ldrb	r3, [r7, #7]
 80081ae:	3308      	adds	r3, #8
 80081b0:	019b      	lsls	r3, r3, #6
 80081b2:	4618      	mov	r0, r3
 80081b4:	f000 fb72 	bl	800889c <WIZCHIP_READ>
 80081b8:	4603      	mov	r3, r0
 80081ba:	f003 030f 	and.w	r3, r3, #15
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d002      	beq.n	80081c8 <recv+0x40>
 80081c2:	f06f 0304 	mvn.w	r3, #4
 80081c6:	e137      	b.n	8008438 <recv+0x2b0>
   CHECK_SOCKDATA();
 80081c8:	88bb      	ldrh	r3, [r7, #4]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d102      	bne.n	80081d4 <recv+0x4c>
 80081ce:	f06f 030d 	mvn.w	r3, #13
 80081d2:	e131      	b.n	8008438 <recv+0x2b0>
   
   recvsize = getSn_RxMAX(sn);
 80081d4:	79fb      	ldrb	r3, [r7, #7]
 80081d6:	4618      	mov	r0, r3
 80081d8:	f000 fc13 	bl	8008a02 <getRMSR>
 80081dc:	4603      	mov	r3, r0
 80081de:	b29b      	uxth	r3, r3
 80081e0:	029b      	lsls	r3, r3, #10
 80081e2:	81fb      	strh	r3, [r7, #14]
   if(recvsize < len) len = recvsize;
 80081e4:	89fa      	ldrh	r2, [r7, #14]
 80081e6:	88bb      	ldrh	r3, [r7, #4]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d201      	bcs.n	80081f0 <recv+0x68>
 80081ec:	89fb      	ldrh	r3, [r7, #14]
 80081ee:	80bb      	strh	r3, [r7, #4]
      
//A20150601 : For Integrating with W5300
#if _WIZCHIP_ == 5300
   //sock_pack_info[sn] = PACK_COMPLETED;    // for clear      
   if(sock_remained_size[sn] == 0)
 80081f0:	79fb      	ldrb	r3, [r7, #7]
 80081f2:	4a93      	ldr	r2, [pc, #588]	; (8008440 <recv+0x2b8>)
 80081f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d148      	bne.n	800828e <recv+0x106>
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 80081fc:	79fb      	ldrb	r3, [r7, #7]
 80081fe:	4618      	mov	r0, r3
 8008200:	f000 fc4c 	bl	8008a9c <getSn_RX_RSR>
 8008204:	4603      	mov	r3, r0
 8008206:	81fb      	strh	r3, [r7, #14]
         tmp = getSn_SR(sn);
 8008208:	79fb      	ldrb	r3, [r7, #7]
 800820a:	3308      	adds	r3, #8
 800820c:	019b      	lsls	r3, r3, #6
 800820e:	3308      	adds	r3, #8
 8008210:	4618      	mov	r0, r3
 8008212:	f000 fb43 	bl	800889c <WIZCHIP_READ>
 8008216:	4603      	mov	r3, r0
 8008218:	737b      	strb	r3, [r7, #13]
         if (tmp != SOCK_ESTABLISHED)
 800821a:	7b7b      	ldrb	r3, [r7, #13]
 800821c:	2b17      	cmp	r3, #23
 800821e:	d020      	beq.n	8008262 <recv+0xda>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8008220:	7b7b      	ldrb	r3, [r7, #13]
 8008222:	2b1c      	cmp	r3, #28
 8008224:	d116      	bne.n	8008254 <recv+0xcc>
            {
               if(recvsize != 0) break;
 8008226:	89fb      	ldrh	r3, [r7, #14]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d12d      	bne.n	8008288 <recv+0x100>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 800822c:	79fb      	ldrb	r3, [r7, #7]
 800822e:	4618      	mov	r0, r3
 8008230:	f000 fc0a 	bl	8008a48 <getSn_TX_FSR>
 8008234:	4604      	mov	r4, r0
 8008236:	79fb      	ldrb	r3, [r7, #7]
 8008238:	4618      	mov	r0, r3
 800823a:	f000 fb86 	bl	800894a <getTMSR>
 800823e:	4603      	mov	r3, r0
 8008240:	029b      	lsls	r3, r3, #10
 8008242:	429c      	cmp	r4, r3
 8008244:	d10d      	bne.n	8008262 <recv+0xda>
               {
                  close(sn);
 8008246:	79fb      	ldrb	r3, [r7, #7]
 8008248:	4618      	mov	r0, r3
 800824a:	f7ff fc97 	bl	8007b7c <close>
                  return SOCKERR_SOCKSTATUS;
 800824e:	f06f 0306 	mvn.w	r3, #6
 8008252:	e0f1      	b.n	8008438 <recv+0x2b0>
               }
            }
            else
            {
               close(sn);
 8008254:	79fb      	ldrb	r3, [r7, #7]
 8008256:	4618      	mov	r0, r3
 8008258:	f7ff fc90 	bl	8007b7c <close>
               return SOCKERR_SOCKSTATUS;
 800825c:	f06f 0306 	mvn.w	r3, #6
 8008260:	e0ea      	b.n	8008438 <recv+0x2b0>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8008262:	4b78      	ldr	r3, [pc, #480]	; (8008444 <recv+0x2bc>)
 8008264:	881b      	ldrh	r3, [r3, #0]
 8008266:	461a      	mov	r2, r3
 8008268:	79fb      	ldrb	r3, [r7, #7]
 800826a:	fa42 f303 	asr.w	r3, r2, r3
 800826e:	f003 0301 	and.w	r3, r3, #1
 8008272:	2b00      	cmp	r3, #0
 8008274:	d004      	beq.n	8008280 <recv+0xf8>
 8008276:	89fb      	ldrh	r3, [r7, #14]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d101      	bne.n	8008280 <recv+0xf8>
 800827c:	2300      	movs	r3, #0
 800827e:	e0db      	b.n	8008438 <recv+0x2b0>
         if(recvsize != 0) break;
 8008280:	89fb      	ldrh	r3, [r7, #14]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d102      	bne.n	800828c <recv+0x104>
         recvsize = getSn_RX_RSR(sn);
 8008286:	e7b9      	b.n	80081fc <recv+0x74>
               if(recvsize != 0) break;
 8008288:	bf00      	nop
 800828a:	e000      	b.n	800828e <recv+0x106>
         if(recvsize != 0) break;
 800828c:	bf00      	nop
   }
#endif

//A20150601 : For integrating with W5300
#if _WIZCHIP_ == 5300
   if((sock_remained_size[sn] == 0) || (getSn_MR(sn) & Sn_MR_ALIGN))
 800828e:	79fb      	ldrb	r3, [r7, #7]
 8008290:	4a6b      	ldr	r2, [pc, #428]	; (8008440 <recv+0x2b8>)
 8008292:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00a      	beq.n	80082b0 <recv+0x128>
 800829a:	79fb      	ldrb	r3, [r7, #7]
 800829c:	3308      	adds	r3, #8
 800829e:	019b      	lsls	r3, r3, #6
 80082a0:	4618      	mov	r0, r3
 80082a2:	f000 fafb 	bl	800889c <WIZCHIP_READ>
 80082a6:	4603      	mov	r3, r0
 80082a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d035      	beq.n	800831c <recv+0x194>
   {
      mr = getMR();
 80082b0:	2000      	movs	r0, #0
 80082b2:	f000 faf3 	bl	800889c <WIZCHIP_READ>
 80082b6:	4603      	mov	r3, r0
 80082b8:	817b      	strh	r3, [r7, #10]
      if((getSn_MR(sn) & Sn_MR_ALIGN)==0)
 80082ba:	79fb      	ldrb	r3, [r7, #7]
 80082bc:	3308      	adds	r3, #8
 80082be:	019b      	lsls	r3, r3, #6
 80082c0:	4618      	mov	r0, r3
 80082c2:	f000 faeb 	bl	800889c <WIZCHIP_READ>
 80082c6:	4603      	mov	r3, r0
 80082c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d120      	bne.n	8008312 <recv+0x18a>
      {
         wiz_recv_data(sn,head,2);
 80082d0:	f107 0108 	add.w	r1, r7, #8
 80082d4:	79fb      	ldrb	r3, [r7, #7]
 80082d6:	2202      	movs	r2, #2
 80082d8:	4618      	mov	r0, r3
 80082da:	f000 fc43 	bl	8008b64 <wiz_recv_data>
         if(mr & MR_FS)
 80082de:	897b      	ldrh	r3, [r7, #10]
 80082e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d008      	beq.n	80082fa <recv+0x172>
            recvsize = (((uint16_t)head[1]) << 8) | ((uint16_t)head[0]);
 80082e8:	7a7b      	ldrb	r3, [r7, #9]
 80082ea:	021b      	lsls	r3, r3, #8
 80082ec:	b21a      	sxth	r2, r3
 80082ee:	7a3b      	ldrb	r3, [r7, #8]
 80082f0:	b21b      	sxth	r3, r3
 80082f2:	4313      	orrs	r3, r2
 80082f4:	b21b      	sxth	r3, r3
 80082f6:	81fb      	strh	r3, [r7, #14]
 80082f8:	e007      	b.n	800830a <recv+0x182>
         else
            recvsize = (((uint16_t)head[0]) << 8) | ((uint16_t)head[1]);
 80082fa:	7a3b      	ldrb	r3, [r7, #8]
 80082fc:	021b      	lsls	r3, r3, #8
 80082fe:	b21a      	sxth	r2, r3
 8008300:	7a7b      	ldrb	r3, [r7, #9]
 8008302:	b21b      	sxth	r3, r3
 8008304:	4313      	orrs	r3, r2
 8008306:	b21b      	sxth	r3, r3
 8008308:	81fb      	strh	r3, [r7, #14]
         sock_pack_info[sn] = PACK_FIRST;
 800830a:	79fb      	ldrb	r3, [r7, #7]
 800830c:	4a4e      	ldr	r2, [pc, #312]	; (8008448 <recv+0x2c0>)
 800830e:	2180      	movs	r1, #128	; 0x80
 8008310:	54d1      	strb	r1, [r2, r3]
      }
      sock_remained_size[sn] = recvsize;
 8008312:	79fb      	ldrb	r3, [r7, #7]
 8008314:	494a      	ldr	r1, [pc, #296]	; (8008440 <recv+0x2b8>)
 8008316:	89fa      	ldrh	r2, [r7, #14]
 8008318:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
   }
   if(len > sock_remained_size[sn]) len = sock_remained_size[sn];
 800831c:	79fb      	ldrb	r3, [r7, #7]
 800831e:	4a48      	ldr	r2, [pc, #288]	; (8008440 <recv+0x2b8>)
 8008320:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008324:	88ba      	ldrh	r2, [r7, #4]
 8008326:	429a      	cmp	r2, r3
 8008328:	d904      	bls.n	8008334 <recv+0x1ac>
 800832a:	79fb      	ldrb	r3, [r7, #7]
 800832c:	4a44      	ldr	r2, [pc, #272]	; (8008440 <recv+0x2b8>)
 800832e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008332:	80bb      	strh	r3, [r7, #4]
   recvsize = len;   
 8008334:	88bb      	ldrh	r3, [r7, #4]
 8008336:	81fb      	strh	r3, [r7, #14]
   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 8008338:	79fb      	ldrb	r3, [r7, #7]
 800833a:	4a43      	ldr	r2, [pc, #268]	; (8008448 <recv+0x2c0>)
 800833c:	5cd3      	ldrb	r3, [r2, r3]
 800833e:	f003 0302 	and.w	r3, r3, #2
 8008342:	2b00      	cmp	r3, #0
 8008344:	d01d      	beq.n	8008382 <recv+0x1fa>
   {
      *buf = sock_remained_byte[sn];
 8008346:	79fb      	ldrb	r3, [r7, #7]
 8008348:	4a40      	ldr	r2, [pc, #256]	; (800844c <recv+0x2c4>)
 800834a:	5cd2      	ldrb	r2, [r2, r3]
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	701a      	strb	r2, [r3, #0]
      buf++;
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	3301      	adds	r3, #1
 8008354:	603b      	str	r3, [r7, #0]
      sock_pack_info[sn] &= ~(PACK_FIFOBYTE);
 8008356:	79fb      	ldrb	r3, [r7, #7]
 8008358:	4a3b      	ldr	r2, [pc, #236]	; (8008448 <recv+0x2c0>)
 800835a:	5cd2      	ldrb	r2, [r2, r3]
 800835c:	79fb      	ldrb	r3, [r7, #7]
 800835e:	f022 0202 	bic.w	r2, r2, #2
 8008362:	b2d1      	uxtb	r1, r2
 8008364:	4a38      	ldr	r2, [pc, #224]	; (8008448 <recv+0x2c0>)
 8008366:	54d1      	strb	r1, [r2, r3]
      recvsize -= 1;
 8008368:	89fb      	ldrh	r3, [r7, #14]
 800836a:	3b01      	subs	r3, #1
 800836c:	81fb      	strh	r3, [r7, #14]
      sock_remained_size[sn] -= 1;
 800836e:	79fb      	ldrb	r3, [r7, #7]
 8008370:	4a33      	ldr	r2, [pc, #204]	; (8008440 <recv+0x2b8>)
 8008372:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8008376:	79fb      	ldrb	r3, [r7, #7]
 8008378:	3a01      	subs	r2, #1
 800837a:	b291      	uxth	r1, r2
 800837c:	4a30      	ldr	r2, [pc, #192]	; (8008440 <recv+0x2b8>)
 800837e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   }
   if(recvsize != 0)
 8008382:	89fb      	ldrh	r3, [r7, #14]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d019      	beq.n	80083bc <recv+0x234>
   {
      wiz_recv_data(sn, buf, recvsize);
 8008388:	89fa      	ldrh	r2, [r7, #14]
 800838a:	79fb      	ldrb	r3, [r7, #7]
 800838c:	6839      	ldr	r1, [r7, #0]
 800838e:	4618      	mov	r0, r3
 8008390:	f000 fbe8 	bl	8008b64 <wiz_recv_data>
      setSn_CR(sn,Sn_CR_RECV);
 8008394:	79fb      	ldrb	r3, [r7, #7]
 8008396:	3308      	adds	r3, #8
 8008398:	019b      	lsls	r3, r3, #6
 800839a:	3302      	adds	r3, #2
 800839c:	2140      	movs	r1, #64	; 0x40
 800839e:	4618      	mov	r0, r3
 80083a0:	f000 fa5e 	bl	8008860 <WIZCHIP_WRITE>
      while(getSn_CR(sn));
 80083a4:	bf00      	nop
 80083a6:	79fb      	ldrb	r3, [r7, #7]
 80083a8:	3308      	adds	r3, #8
 80083aa:	019b      	lsls	r3, r3, #6
 80083ac:	3302      	adds	r3, #2
 80083ae:	4618      	mov	r0, r3
 80083b0:	f000 fa74 	bl	800889c <WIZCHIP_READ>
 80083b4:	4603      	mov	r3, r0
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d1f4      	bne.n	80083a6 <recv+0x21e>
   }
   sock_remained_size[sn] -= recvsize;
 80083bc:	79fb      	ldrb	r3, [r7, #7]
 80083be:	4a20      	ldr	r2, [pc, #128]	; (8008440 <recv+0x2b8>)
 80083c0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80083c4:	79fb      	ldrb	r3, [r7, #7]
 80083c6:	89fa      	ldrh	r2, [r7, #14]
 80083c8:	1a8a      	subs	r2, r1, r2
 80083ca:	b291      	uxth	r1, r2
 80083cc:	4a1c      	ldr	r2, [pc, #112]	; (8008440 <recv+0x2b8>)
 80083ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   if(sock_remained_size[sn] != 0)
 80083d2:	79fb      	ldrb	r3, [r7, #7]
 80083d4:	4a1a      	ldr	r2, [pc, #104]	; (8008440 <recv+0x2b8>)
 80083d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d017      	beq.n	800840e <recv+0x286>
   {
      sock_pack_info[sn] |= PACK_REMAINED;
 80083de:	79fb      	ldrb	r3, [r7, #7]
 80083e0:	4a19      	ldr	r2, [pc, #100]	; (8008448 <recv+0x2c0>)
 80083e2:	5cd2      	ldrb	r2, [r2, r3]
 80083e4:	79fb      	ldrb	r3, [r7, #7]
 80083e6:	f042 0201 	orr.w	r2, r2, #1
 80083ea:	b2d1      	uxtb	r1, r2
 80083ec:	4a16      	ldr	r2, [pc, #88]	; (8008448 <recv+0x2c0>)
 80083ee:	54d1      	strb	r1, [r2, r3]
      if(recvsize & 0x1) sock_pack_info[sn] |= PACK_FIFOBYTE;
 80083f0:	89fb      	ldrh	r3, [r7, #14]
 80083f2:	f003 0301 	and.w	r3, r3, #1
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00d      	beq.n	8008416 <recv+0x28e>
 80083fa:	79fb      	ldrb	r3, [r7, #7]
 80083fc:	4a12      	ldr	r2, [pc, #72]	; (8008448 <recv+0x2c0>)
 80083fe:	5cd2      	ldrb	r2, [r2, r3]
 8008400:	79fb      	ldrb	r3, [r7, #7]
 8008402:	f042 0202 	orr.w	r2, r2, #2
 8008406:	b2d1      	uxtb	r1, r2
 8008408:	4a0f      	ldr	r2, [pc, #60]	; (8008448 <recv+0x2c0>)
 800840a:	54d1      	strb	r1, [r2, r3]
 800840c:	e003      	b.n	8008416 <recv+0x28e>
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
 800840e:	79fb      	ldrb	r3, [r7, #7]
 8008410:	4a0d      	ldr	r2, [pc, #52]	; (8008448 <recv+0x2c0>)
 8008412:	2100      	movs	r1, #0
 8008414:	54d1      	strb	r1, [r2, r3]
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
 8008416:	79fb      	ldrb	r3, [r7, #7]
 8008418:	3308      	adds	r3, #8
 800841a:	019b      	lsls	r3, r3, #6
 800841c:	4618      	mov	r0, r3
 800841e:	f000 fa3d 	bl	800889c <WIZCHIP_READ>
 8008422:	4603      	mov	r3, r0
 8008424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008428:	2b00      	cmp	r3, #0
 800842a:	d004      	beq.n	8008436 <recv+0x2ae>
 800842c:	79fb      	ldrb	r3, [r7, #7]
 800842e:	4a04      	ldr	r2, [pc, #16]	; (8008440 <recv+0x2b8>)
 8008430:	2100      	movs	r1, #0
 8008432:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   while(getSn_CR(sn));
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8008436:	88bb      	ldrh	r3, [r7, #4]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3714      	adds	r7, #20
 800843c:	46bd      	mov	sp, r7
 800843e:	bd90      	pop	{r4, r7, pc}
 8008440:	200014c0 	.word	0x200014c0
 8008444:	200014bc 	.word	0x200014bc
 8008448:	200014d0 	.word	0x200014d0
 800844c:	200014d8 	.word	0x200014d8

08008450 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b086      	sub	sp, #24
 8008454:	af00      	add	r7, sp, #0
 8008456:	60b9      	str	r1, [r7, #8]
 8008458:	607b      	str	r3, [r7, #4]
 800845a:	4603      	mov	r3, r0
 800845c:	73fb      	strb	r3, [r7, #15]
 800845e:	4613      	mov	r3, r2
 8008460:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8008462:	2300      	movs	r3, #0
 8008464:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8008466:	2300      	movs	r3, #0
 8008468:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 800846a:	7bfb      	ldrb	r3, [r7, #15]
 800846c:	2b08      	cmp	r3, #8
 800846e:	d902      	bls.n	8008476 <sendto+0x26>
 8008470:	f04f 33ff 	mov.w	r3, #4294967295
 8008474:	e1e6      	b.n	8008844 <sendto+0x3f4>
   switch(getSn_MR(sn) & 0x0F)
 8008476:	7bfb      	ldrb	r3, [r7, #15]
 8008478:	3308      	adds	r3, #8
 800847a:	019b      	lsls	r3, r3, #6
 800847c:	4618      	mov	r0, r3
 800847e:	f000 fa0d 	bl	800889c <WIZCHIP_READ>
 8008482:	4603      	mov	r3, r0
 8008484:	f003 030f 	and.w	r3, r3, #15
 8008488:	3b02      	subs	r3, #2
 800848a:	2b02      	cmp	r3, #2
 800848c:	d902      	bls.n	8008494 <sendto+0x44>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 800848e:	f06f 0304 	mvn.w	r3, #4
 8008492:	e1d7      	b.n	8008844 <sendto+0x3f4>
         break;
 8008494:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8008496:	89bb      	ldrh	r3, [r7, #12]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d102      	bne.n	80084a2 <sendto+0x52>
 800849c:	f06f 030d 	mvn.w	r3, #13
 80084a0:	e1d0      	b.n	8008844 <sendto+0x3f4>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	021b      	lsls	r3, r3, #8
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	3201      	adds	r2, #1
 80084b0:	7812      	ldrb	r2, [r2, #0]
 80084b2:	4413      	add	r3, r2
 80084b4:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	021b      	lsls	r3, r3, #8
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	3202      	adds	r2, #2
 80084be:	7812      	ldrb	r2, [r2, #0]
 80084c0:	4413      	add	r3, r2
 80084c2:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	021b      	lsls	r3, r3, #8
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	3203      	adds	r2, #3
 80084cc:	7812      	ldrb	r2, [r2, #0]
 80084ce:	4413      	add	r3, r2
 80084d0:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d10d      	bne.n	80084f4 <sendto+0xa4>
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
 80084da:	3308      	adds	r3, #8
 80084dc:	019b      	lsls	r3, r3, #6
 80084de:	4618      	mov	r0, r3
 80084e0:	f000 f9dc 	bl	800889c <WIZCHIP_READ>
 80084e4:	4603      	mov	r3, r0
 80084e6:	f003 0304 	and.w	r3, r3, #4
 80084ea:	2b04      	cmp	r3, #4
 80084ec:	d002      	beq.n	80084f4 <sendto+0xa4>
 80084ee:	f06f 030b 	mvn.w	r3, #11
 80084f2:	e1a7      	b.n	8008844 <sendto+0x3f4>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 80084f4:	8c3b      	ldrh	r3, [r7, #32]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d10d      	bne.n	8008516 <sendto+0xc6>
 80084fa:	7bfb      	ldrb	r3, [r7, #15]
 80084fc:	3308      	adds	r3, #8
 80084fe:	019b      	lsls	r3, r3, #6
 8008500:	4618      	mov	r0, r3
 8008502:	f000 f9cb 	bl	800889c <WIZCHIP_READ>
 8008506:	4603      	mov	r3, r0
 8008508:	f003 0304 	and.w	r3, r3, #4
 800850c:	2b04      	cmp	r3, #4
 800850e:	d002      	beq.n	8008516 <sendto+0xc6>
 8008510:	f06f 030a 	mvn.w	r3, #10
 8008514:	e196      	b.n	8008844 <sendto+0x3f4>
   tmp = getSn_SR(sn);
 8008516:	7bfb      	ldrb	r3, [r7, #15]
 8008518:	3308      	adds	r3, #8
 800851a:	019b      	lsls	r3, r3, #6
 800851c:	3308      	adds	r3, #8
 800851e:	4618      	mov	r0, r3
 8008520:	f000 f9bc 	bl	800889c <WIZCHIP_READ>
 8008524:	4603      	mov	r3, r0
 8008526:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8008528:	7dfb      	ldrb	r3, [r7, #23]
 800852a:	2b42      	cmp	r3, #66	; 0x42
 800852c:	d008      	beq.n	8008540 <sendto+0xf0>
 800852e:	7dfb      	ldrb	r3, [r7, #23]
 8008530:	2b22      	cmp	r3, #34	; 0x22
 8008532:	d005      	beq.n	8008540 <sendto+0xf0>
 8008534:	7dfb      	ldrb	r3, [r7, #23]
 8008536:	2b32      	cmp	r3, #50	; 0x32
 8008538:	d002      	beq.n	8008540 <sendto+0xf0>
 800853a:	f06f 0306 	mvn.w	r3, #6
 800853e:	e181      	b.n	8008844 <sendto+0x3f4>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8008540:	7bfb      	ldrb	r3, [r7, #15]
 8008542:	3308      	adds	r3, #8
 8008544:	019b      	lsls	r3, r3, #6
 8008546:	3314      	adds	r3, #20
 8008548:	4618      	mov	r0, r3
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	b29b      	uxth	r3, r3
 8008550:	021b      	lsls	r3, r3, #8
 8008552:	b29a      	uxth	r2, r3
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	3301      	adds	r3, #1
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	b29b      	uxth	r3, r3
 800855c:	4413      	add	r3, r2
 800855e:	b29b      	uxth	r3, r3
 8008560:	4619      	mov	r1, r3
 8008562:	f000 f97d 	bl	8008860 <WIZCHIP_WRITE>
 8008566:	7bfb      	ldrb	r3, [r7, #15]
 8008568:	3308      	adds	r3, #8
 800856a:	019b      	lsls	r3, r3, #6
 800856c:	3316      	adds	r3, #22
 800856e:	4618      	mov	r0, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	3302      	adds	r3, #2
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	b29b      	uxth	r3, r3
 8008578:	021b      	lsls	r3, r3, #8
 800857a:	b29a      	uxth	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	3303      	adds	r3, #3
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	b29b      	uxth	r3, r3
 8008584:	4413      	add	r3, r2
 8008586:	b29b      	uxth	r3, r3
 8008588:	4619      	mov	r1, r3
 800858a:	f000 f969 	bl	8008860 <WIZCHIP_WRITE>
   setSn_DPORT(sn,port);      
 800858e:	7bfb      	ldrb	r3, [r7, #15]
 8008590:	3308      	adds	r3, #8
 8008592:	019b      	lsls	r3, r3, #6
 8008594:	3312      	adds	r3, #18
 8008596:	461a      	mov	r2, r3
 8008598:	8c3b      	ldrh	r3, [r7, #32]
 800859a:	4619      	mov	r1, r3
 800859c:	4610      	mov	r0, r2
 800859e:	f000 f95f 	bl	8008860 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 80085a2:	7bfb      	ldrb	r3, [r7, #15]
 80085a4:	4618      	mov	r0, r3
 80085a6:	f000 f9d0 	bl	800894a <getTMSR>
 80085aa:	4603      	mov	r3, r0
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	029b      	lsls	r3, r3, #10
 80085b0:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80085b2:	89ba      	ldrh	r2, [r7, #12]
 80085b4:	8abb      	ldrh	r3, [r7, #20]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d901      	bls.n	80085be <sendto+0x16e>
 80085ba:	8abb      	ldrh	r3, [r7, #20]
 80085bc:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80085be:	7bfb      	ldrb	r3, [r7, #15]
 80085c0:	4618      	mov	r0, r3
 80085c2:	f000 fa41 	bl	8008a48 <getSn_TX_FSR>
 80085c6:	4603      	mov	r3, r0
 80085c8:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80085ca:	7bfb      	ldrb	r3, [r7, #15]
 80085cc:	3308      	adds	r3, #8
 80085ce:	019b      	lsls	r3, r3, #6
 80085d0:	3308      	adds	r3, #8
 80085d2:	4618      	mov	r0, r3
 80085d4:	f000 f962 	bl	800889c <WIZCHIP_READ>
 80085d8:	4603      	mov	r3, r0
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d102      	bne.n	80085e6 <sendto+0x196>
 80085e0:	f06f 0303 	mvn.w	r3, #3
 80085e4:	e12e      	b.n	8008844 <sendto+0x3f4>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80085e6:	4b99      	ldr	r3, [pc, #612]	; (800884c <sendto+0x3fc>)
 80085e8:	881b      	ldrh	r3, [r3, #0]
 80085ea:	461a      	mov	r2, r3
 80085ec:	7bfb      	ldrb	r3, [r7, #15]
 80085ee:	fa42 f303 	asr.w	r3, r2, r3
 80085f2:	f003 0301 	and.w	r3, r3, #1
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d005      	beq.n	8008606 <sendto+0x1b6>
 80085fa:	89ba      	ldrh	r2, [r7, #12]
 80085fc:	8abb      	ldrh	r3, [r7, #20]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d901      	bls.n	8008606 <sendto+0x1b6>
 8008602:	2300      	movs	r3, #0
 8008604:	e11e      	b.n	8008844 <sendto+0x3f4>
      if(len <= freesize) break;
 8008606:	89ba      	ldrh	r2, [r7, #12]
 8008608:	8abb      	ldrh	r3, [r7, #20]
 800860a:	429a      	cmp	r2, r3
 800860c:	d900      	bls.n	8008610 <sendto+0x1c0>
      freesize = getSn_TX_FSR(sn);
 800860e:	e7d6      	b.n	80085be <sendto+0x16e>
      if(len <= freesize) break;
 8008610:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8008612:	89ba      	ldrh	r2, [r7, #12]
 8008614:	7bfb      	ldrb	r3, [r7, #15]
 8008616:	68b9      	ldr	r1, [r7, #8]
 8008618:	4618      	mov	r0, r3
 800861a:	f000 fa71 	bl	8008b00 <wiz_send_data>

   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      getSIPR((uint8_t*)&taddr);
 800861e:	2018      	movs	r0, #24
 8008620:	f000 f93c 	bl	800889c <WIZCHIP_READ>
 8008624:	4603      	mov	r3, r0
 8008626:	0a1b      	lsrs	r3, r3, #8
 8008628:	b29a      	uxth	r2, r3
 800862a:	f107 0310 	add.w	r3, r7, #16
 800862e:	b2d2      	uxtb	r2, r2
 8008630:	701a      	strb	r2, [r3, #0]
 8008632:	2018      	movs	r0, #24
 8008634:	f000 f932 	bl	800889c <WIZCHIP_READ>
 8008638:	4603      	mov	r3, r0
 800863a:	461a      	mov	r2, r3
 800863c:	f107 0310 	add.w	r3, r7, #16
 8008640:	3301      	adds	r3, #1
 8008642:	b2d2      	uxtb	r2, r2
 8008644:	701a      	strb	r2, [r3, #0]
 8008646:	201a      	movs	r0, #26
 8008648:	f000 f928 	bl	800889c <WIZCHIP_READ>
 800864c:	4603      	mov	r3, r0
 800864e:	0a1b      	lsrs	r3, r3, #8
 8008650:	b29a      	uxth	r2, r3
 8008652:	f107 0310 	add.w	r3, r7, #16
 8008656:	3302      	adds	r3, #2
 8008658:	b2d2      	uxtb	r2, r2
 800865a:	701a      	strb	r2, [r3, #0]
 800865c:	201a      	movs	r0, #26
 800865e:	f000 f91d 	bl	800889c <WIZCHIP_READ>
 8008662:	4603      	mov	r3, r0
 8008664:	461a      	mov	r2, r3
 8008666:	f107 0310 	add.w	r3, r7, #16
 800866a:	3303      	adds	r3, #3
 800866c:	b2d2      	uxtb	r2, r2
 800866e:	701a      	strb	r2, [r3, #0]
      if(taddr == 0)
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d145      	bne.n	8008702 <sendto+0x2b2>
      {
         getSUBR((uint8_t*)&taddr);
 8008676:	2014      	movs	r0, #20
 8008678:	f000 f910 	bl	800889c <WIZCHIP_READ>
 800867c:	4603      	mov	r3, r0
 800867e:	0a1b      	lsrs	r3, r3, #8
 8008680:	b29a      	uxth	r2, r3
 8008682:	f107 0310 	add.w	r3, r7, #16
 8008686:	b2d2      	uxtb	r2, r2
 8008688:	701a      	strb	r2, [r3, #0]
 800868a:	2014      	movs	r0, #20
 800868c:	f000 f906 	bl	800889c <WIZCHIP_READ>
 8008690:	4603      	mov	r3, r0
 8008692:	461a      	mov	r2, r3
 8008694:	f107 0310 	add.w	r3, r7, #16
 8008698:	3301      	adds	r3, #1
 800869a:	b2d2      	uxtb	r2, r2
 800869c:	701a      	strb	r2, [r3, #0]
 800869e:	2016      	movs	r0, #22
 80086a0:	f000 f8fc 	bl	800889c <WIZCHIP_READ>
 80086a4:	4603      	mov	r3, r0
 80086a6:	0a1b      	lsrs	r3, r3, #8
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	f107 0310 	add.w	r3, r7, #16
 80086ae:	3302      	adds	r3, #2
 80086b0:	b2d2      	uxtb	r2, r2
 80086b2:	701a      	strb	r2, [r3, #0]
 80086b4:	2016      	movs	r0, #22
 80086b6:	f000 f8f1 	bl	800889c <WIZCHIP_READ>
 80086ba:	4603      	mov	r3, r0
 80086bc:	461a      	mov	r2, r3
 80086be:	f107 0310 	add.w	r3, r7, #16
 80086c2:	3303      	adds	r3, #3
 80086c4:	b2d2      	uxtb	r2, r2
 80086c6:	701a      	strb	r2, [r3, #0]
         setSUBR((uint8_t*)"\x00\x00\x00\x00");
 80086c8:	4b61      	ldr	r3, [pc, #388]	; (8008850 <sendto+0x400>)
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	021b      	lsls	r3, r3, #8
 80086d0:	b29a      	uxth	r2, r3
 80086d2:	4b60      	ldr	r3, [pc, #384]	; (8008854 <sendto+0x404>)
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	4413      	add	r3, r2
 80086da:	b29b      	uxth	r3, r3
 80086dc:	4619      	mov	r1, r3
 80086de:	2014      	movs	r0, #20
 80086e0:	f000 f8be 	bl	8008860 <WIZCHIP_WRITE>
 80086e4:	4b5c      	ldr	r3, [pc, #368]	; (8008858 <sendto+0x408>)
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	021b      	lsls	r3, r3, #8
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	4b5b      	ldr	r3, [pc, #364]	; (800885c <sendto+0x40c>)
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	4413      	add	r3, r2
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	4619      	mov	r1, r3
 80086fa:	2016      	movs	r0, #22
 80086fc:	f000 f8b0 	bl	8008860 <WIZCHIP_WRITE>
 8008700:	e001      	b.n	8008706 <sendto+0x2b6>
      }
      else taddr = 0;
 8008702:	2300      	movs	r3, #0
 8008704:	613b      	str	r3, [r7, #16]
   #endif

//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
 8008706:	7bfb      	ldrb	r3, [r7, #15]
 8008708:	3308      	adds	r3, #8
 800870a:	019b      	lsls	r3, r3, #6
 800870c:	3320      	adds	r3, #32
 800870e:	461a      	mov	r2, r3
 8008710:	89bb      	ldrh	r3, [r7, #12]
 8008712:	0c1b      	lsrs	r3, r3, #16
 8008714:	b29b      	uxth	r3, r3
 8008716:	4619      	mov	r1, r3
 8008718:	4610      	mov	r0, r2
 800871a:	f000 f8a1 	bl	8008860 <WIZCHIP_WRITE>
 800871e:	7bfb      	ldrb	r3, [r7, #15]
 8008720:	3308      	adds	r3, #8
 8008722:	019b      	lsls	r3, r3, #6
 8008724:	3322      	adds	r3, #34	; 0x22
 8008726:	461a      	mov	r2, r3
 8008728:	89bb      	ldrh	r3, [r7, #12]
 800872a:	4619      	mov	r1, r3
 800872c:	4610      	mov	r0, r2
 800872e:	f000 f897 	bl	8008860 <WIZCHIP_WRITE>
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8008732:	7bfb      	ldrb	r3, [r7, #15]
 8008734:	3308      	adds	r3, #8
 8008736:	019b      	lsls	r3, r3, #6
 8008738:	3302      	adds	r3, #2
 800873a:	2120      	movs	r1, #32
 800873c:	4618      	mov	r0, r3
 800873e:	f000 f88f 	bl	8008860 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8008742:	bf00      	nop
 8008744:	7bfb      	ldrb	r3, [r7, #15]
 8008746:	3308      	adds	r3, #8
 8008748:	019b      	lsls	r3, r3, #6
 800874a:	3302      	adds	r3, #2
 800874c:	4618      	mov	r0, r3
 800874e:	f000 f8a5 	bl	800889c <WIZCHIP_READ>
 8008752:	4603      	mov	r3, r0
 8008754:	b2db      	uxtb	r3, r3
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1f4      	bne.n	8008744 <sendto+0x2f4>
   while(1)
   {
      tmp = getSn_IR(sn);
 800875a:	7bfb      	ldrb	r3, [r7, #15]
 800875c:	3308      	adds	r3, #8
 800875e:	019b      	lsls	r3, r3, #6
 8008760:	3306      	adds	r3, #6
 8008762:	4618      	mov	r0, r3
 8008764:	f000 f89a 	bl	800889c <WIZCHIP_READ>
 8008768:	4603      	mov	r3, r0
 800876a:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 800876c:	7dfb      	ldrb	r3, [r7, #23]
 800876e:	f003 0310 	and.w	r3, r3, #16
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00c      	beq.n	8008790 <sendto+0x340>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8008776:	7bfb      	ldrb	r3, [r7, #15]
 8008778:	3308      	adds	r3, #8
 800877a:	019b      	lsls	r3, r3, #6
 800877c:	3306      	adds	r3, #6
 800877e:	2110      	movs	r1, #16
 8008780:	4618      	mov	r0, r3
 8008782:	f000 f86d 	bl	8008860 <WIZCHIP_WRITE>
         break;
 8008786:	bf00      	nop
         return SOCKERR_TIMEOUT;
      }
      ////////////
   }
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d059      	beq.n	8008842 <sendto+0x3f2>
 800878e:	e035      	b.n	80087fc <sendto+0x3ac>
      else if(tmp & Sn_IR_TIMEOUT)
 8008790:	7dfb      	ldrb	r3, [r7, #23]
 8008792:	f003 0308 	and.w	r3, r3, #8
 8008796:	2b00      	cmp	r3, #0
 8008798:	d0df      	beq.n	800875a <sendto+0x30a>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 800879a:	7bfb      	ldrb	r3, [r7, #15]
 800879c:	3308      	adds	r3, #8
 800879e:	019b      	lsls	r3, r3, #6
 80087a0:	3306      	adds	r3, #6
 80087a2:	2108      	movs	r1, #8
 80087a4:	4618      	mov	r0, r3
 80087a6:	f000 f85b 	bl	8008860 <WIZCHIP_WRITE>
            if(taddr) setSUBR((uint8_t*)&taddr);
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d022      	beq.n	80087f6 <sendto+0x3a6>
 80087b0:	f107 0310 	add.w	r3, r7, #16
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	021b      	lsls	r3, r3, #8
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	f107 0310 	add.w	r3, r7, #16
 80087c0:	3301      	adds	r3, #1
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	4413      	add	r3, r2
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	4619      	mov	r1, r3
 80087cc:	2014      	movs	r0, #20
 80087ce:	f000 f847 	bl	8008860 <WIZCHIP_WRITE>
 80087d2:	f107 0310 	add.w	r3, r7, #16
 80087d6:	3302      	adds	r3, #2
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	b29b      	uxth	r3, r3
 80087dc:	021b      	lsls	r3, r3, #8
 80087de:	b29a      	uxth	r2, r3
 80087e0:	f107 0310 	add.w	r3, r7, #16
 80087e4:	3303      	adds	r3, #3
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	4413      	add	r3, r2
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	4619      	mov	r1, r3
 80087f0:	2016      	movs	r0, #22
 80087f2:	f000 f835 	bl	8008860 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 80087f6:	f06f 030c 	mvn.w	r3, #12
 80087fa:	e023      	b.n	8008844 <sendto+0x3f4>
      if(taddr) setSUBR((uint8_t*)&taddr);
 80087fc:	f107 0310 	add.w	r3, r7, #16
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	b29b      	uxth	r3, r3
 8008804:	021b      	lsls	r3, r3, #8
 8008806:	b29a      	uxth	r2, r3
 8008808:	f107 0310 	add.w	r3, r7, #16
 800880c:	3301      	adds	r3, #1
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	b29b      	uxth	r3, r3
 8008812:	4413      	add	r3, r2
 8008814:	b29b      	uxth	r3, r3
 8008816:	4619      	mov	r1, r3
 8008818:	2014      	movs	r0, #20
 800881a:	f000 f821 	bl	8008860 <WIZCHIP_WRITE>
 800881e:	f107 0310 	add.w	r3, r7, #16
 8008822:	3302      	adds	r3, #2
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	b29b      	uxth	r3, r3
 8008828:	021b      	lsls	r3, r3, #8
 800882a:	b29a      	uxth	r2, r3
 800882c:	f107 0310 	add.w	r3, r7, #16
 8008830:	3303      	adds	r3, #3
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	b29b      	uxth	r3, r3
 8008836:	4413      	add	r3, r2
 8008838:	b29b      	uxth	r3, r3
 800883a:	4619      	mov	r1, r3
 800883c:	2016      	movs	r0, #22
 800883e:	f000 f80f 	bl	8008860 <WIZCHIP_WRITE>
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8008842:	89bb      	ldrh	r3, [r7, #12]
}
 8008844:	4618      	mov	r0, r3
 8008846:	3718      	adds	r7, #24
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	200014bc 	.word	0x200014bc
 8008850:	0800cb08 	.word	0x0800cb08
 8008854:	0800cb09 	.word	0x0800cb09
 8008858:	0800cb0a 	.word	0x0800cb0a
 800885c:	0800cb0b 	.word	0x0800cb0b

08008860 <WIZCHIP_WRITE>:
/***********************
 * Basic I/O  Function *
 ***********************/
 
void     WIZCHIP_WRITE(uint32_t AddrSel, uint16_t wb )
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	460b      	mov	r3, r1
 800886a:	807b      	strh	r3, [r7, #2]
   WIZCHIP_CRITICAL_ENTER();
 800886c:	4b0a      	ldr	r3, [pc, #40]	; (8008898 <WIZCHIP_WRITE+0x38>)
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	4798      	blx	r3
   WIZCHIP.CS._select();
 8008872:	4b09      	ldr	r3, [pc, #36]	; (8008898 <WIZCHIP_WRITE+0x38>)
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	4798      	blx	r3
#if ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_) )
   #if(_WIZCHIP_IO_BUS_WIDTH_ == 8)
      WIZCHIP.IF.BUS._write_data(AddrSel,  (uint8_t)(wb>>8));
      WIZCHIP.IF.BUS._write_data(WIZCHIP_OFFSET_INC(AddrSel,1),(uint8_t)wb);
   #elif(_WIZCHIP_IO_BUS_WIDTH_ == 16)
      WIZCHIP.IF.BUS._write_data(AddrSel,  wb);   
 8008878:	4b07      	ldr	r3, [pc, #28]	; (8008898 <WIZCHIP_WRITE+0x38>)
 800887a:	6a1b      	ldr	r3, [r3, #32]
 800887c:	887a      	ldrh	r2, [r7, #2]
 800887e:	4611      	mov	r1, r2
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	4798      	blx	r3
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5300. !!!"
#endif

   WIZCHIP.CS._deselect();
 8008884:	4b04      	ldr	r3, [pc, #16]	; (8008898 <WIZCHIP_WRITE+0x38>)
 8008886:	699b      	ldr	r3, [r3, #24]
 8008888:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800888a:	4b03      	ldr	r3, [pc, #12]	; (8008898 <WIZCHIP_WRITE+0x38>)
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	4798      	blx	r3
}
 8008890:	bf00      	nop
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	200000a8 	.word	0x200000a8

0800889c <WIZCHIP_READ>:

uint16_t WIZCHIP_READ(uint32_t AddrSel)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
   uint16_t ret;

   WIZCHIP_CRITICAL_ENTER();
 80088a4:	4b0b      	ldr	r3, [pc, #44]	; (80088d4 <WIZCHIP_READ+0x38>)
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	4798      	blx	r3
   WIZCHIP.CS._select();
 80088aa:	4b0a      	ldr	r3, [pc, #40]	; (80088d4 <WIZCHIP_READ+0x38>)
 80088ac:	695b      	ldr	r3, [r3, #20]
 80088ae:	4798      	blx	r3
#if ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_) )
   #if (_WIZCHIP_IO_BUS_WIDTH_ == 8)
      ret = (((uint16_t)WIZCHIP.IF.BUS._read_data(AddrSel)) << 8) | 
            (((uint16_t)WIZCHIP.IF.BUS._read_data(WIZCHIP_OFFSET_INC(AddrSel,1))) & 0x00FF) ;   
   #elif(_WIZCHIP_IO_BUS_WIDTH_ == 16)
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 80088b0:	4b08      	ldr	r3, [pc, #32]	; (80088d4 <WIZCHIP_READ+0x38>)
 80088b2:	69db      	ldr	r3, [r3, #28]
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	4798      	blx	r3
 80088b8:	4603      	mov	r3, r0
 80088ba:	81fb      	strh	r3, [r7, #14]
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5300. !!!"
#endif

   WIZCHIP.CS._deselect();
 80088bc:	4b05      	ldr	r3, [pc, #20]	; (80088d4 <WIZCHIP_READ+0x38>)
 80088be:	699b      	ldr	r3, [r3, #24]
 80088c0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80088c2:	4b04      	ldr	r3, [pc, #16]	; (80088d4 <WIZCHIP_READ+0x38>)
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	4798      	blx	r3
   return ret;
 80088c8:	89fb      	ldrh	r3, [r7, #14]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	200000a8 	.word	0x200000a8

080088d8 <setTMSR>:


void setTMSR(uint8_t sn,uint8_t tmsr)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	4603      	mov	r3, r0
 80088e0:	460a      	mov	r2, r1
 80088e2:	71fb      	strb	r3, [r7, #7]
 80088e4:	4613      	mov	r3, r2
 80088e6:	71bb      	strb	r3, [r7, #6]
   uint16_t tmem;
   tmem = WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE)));
 80088e8:	79fb      	ldrb	r3, [r7, #7]
 80088ea:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80088ee:	3320      	adds	r3, #32
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7ff ffd3 	bl	800889c <WIZCHIP_READ>
 80088f6:	4603      	mov	r3, r0
 80088f8:	81fb      	strh	r3, [r7, #14]
   if(sn & 0x01)  tmem = (tmem & 0xFF00) | (((uint16_t)tmsr ) & 0x00FF) ;
 80088fa:	79fb      	ldrb	r3, [r7, #7]
 80088fc:	f003 0301 	and.w	r3, r3, #1
 8008900:	2b00      	cmp	r3, #0
 8008902:	d00a      	beq.n	800891a <setTMSR+0x42>
 8008904:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008908:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800890c:	b21a      	sxth	r2, r3
 800890e:	79bb      	ldrb	r3, [r7, #6]
 8008910:	b21b      	sxth	r3, r3
 8008912:	4313      	orrs	r3, r2
 8008914:	b21b      	sxth	r3, r3
 8008916:	81fb      	strh	r3, [r7, #14]
 8008918:	e009      	b.n	800892e <setTMSR+0x56>
   else tmem =  (tmem & 0x00FF) | (((uint16_t)tmsr) << 8) ;
 800891a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800891e:	b2db      	uxtb	r3, r3
 8008920:	b21a      	sxth	r2, r3
 8008922:	79bb      	ldrb	r3, [r7, #6]
 8008924:	021b      	lsls	r3, r3, #8
 8008926:	b21b      	sxth	r3, r3
 8008928:	4313      	orrs	r3, r2
 800892a:	b21b      	sxth	r3, r3
 800892c:	81fb      	strh	r3, [r7, #14]
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE)),tmem);
 800892e:	79fb      	ldrb	r3, [r7, #7]
 8008930:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008934:	3320      	adds	r3, #32
 8008936:	461a      	mov	r2, r3
 8008938:	89fb      	ldrh	r3, [r7, #14]
 800893a:	4619      	mov	r1, r3
 800893c:	4610      	mov	r0, r2
 800893e:	f7ff ff8f 	bl	8008860 <WIZCHIP_WRITE>
}
 8008942:	bf00      	nop
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <getTMSR>:
   
uint8_t getTMSR(uint8_t sn)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b082      	sub	sp, #8
 800894e:	af00      	add	r7, sp, #0
 8008950:	4603      	mov	r3, r0
 8008952:	71fb      	strb	r3, [r7, #7]
   if(sn & 0x01)
 8008954:	79fb      	ldrb	r3, [r7, #7]
 8008956:	f003 0301 	and.w	r3, r3, #1
 800895a:	2b00      	cmp	r3, #0
 800895c:	d009      	beq.n	8008972 <getTMSR+0x28>
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) & 0x00FF);
 800895e:	79fb      	ldrb	r3, [r7, #7]
 8008960:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008964:	3320      	adds	r3, #32
 8008966:	4618      	mov	r0, r3
 8008968:	f7ff ff98 	bl	800889c <WIZCHIP_READ>
 800896c:	4603      	mov	r3, r0
 800896e:	b2db      	uxtb	r3, r3
 8008970:	e00a      	b.n	8008988 <getTMSR+0x3e>
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) >> 8);
 8008972:	79fb      	ldrb	r3, [r7, #7]
 8008974:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008978:	3320      	adds	r3, #32
 800897a:	4618      	mov	r0, r3
 800897c:	f7ff ff8e 	bl	800889c <WIZCHIP_READ>
 8008980:	4603      	mov	r3, r0
 8008982:	0a1b      	lsrs	r3, r3, #8
 8008984:	b29b      	uxth	r3, r3
 8008986:	b2db      	uxtb	r3, r3
}
 8008988:	4618      	mov	r0, r3
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <setRMSR>:

void setRMSR(uint8_t sn,uint8_t rmsr)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	4603      	mov	r3, r0
 8008998:	460a      	mov	r2, r1
 800899a:	71fb      	strb	r3, [r7, #7]
 800899c:	4613      	mov	r3, r2
 800899e:	71bb      	strb	r3, [r7, #6]
   uint16_t rmem;
   rmem = WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE)));
 80089a0:	79fb      	ldrb	r3, [r7, #7]
 80089a2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80089a6:	3328      	adds	r3, #40	; 0x28
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7ff ff77 	bl	800889c <WIZCHIP_READ>
 80089ae:	4603      	mov	r3, r0
 80089b0:	81fb      	strh	r3, [r7, #14]
   if(sn & 0x01)  rmem = (rmem & 0xFF00) | (((uint16_t)rmsr ) & 0x00FF) ;
 80089b2:	79fb      	ldrb	r3, [r7, #7]
 80089b4:	f003 0301 	and.w	r3, r3, #1
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00a      	beq.n	80089d2 <setRMSR+0x42>
 80089bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80089c0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80089c4:	b21a      	sxth	r2, r3
 80089c6:	79bb      	ldrb	r3, [r7, #6]
 80089c8:	b21b      	sxth	r3, r3
 80089ca:	4313      	orrs	r3, r2
 80089cc:	b21b      	sxth	r3, r3
 80089ce:	81fb      	strh	r3, [r7, #14]
 80089d0:	e009      	b.n	80089e6 <setRMSR+0x56>
   else rmem =  (rmem & 0x00FF) | (((uint16_t)rmsr) << 8) ;
 80089d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	b21a      	sxth	r2, r3
 80089da:	79bb      	ldrb	r3, [r7, #6]
 80089dc:	021b      	lsls	r3, r3, #8
 80089de:	b21b      	sxth	r3, r3
 80089e0:	4313      	orrs	r3, r2
 80089e2:	b21b      	sxth	r3, r3
 80089e4:	81fb      	strh	r3, [r7, #14]
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE)),rmem);
 80089e6:	79fb      	ldrb	r3, [r7, #7]
 80089e8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80089ec:	3328      	adds	r3, #40	; 0x28
 80089ee:	461a      	mov	r2, r3
 80089f0:	89fb      	ldrh	r3, [r7, #14]
 80089f2:	4619      	mov	r1, r3
 80089f4:	4610      	mov	r0, r2
 80089f6:	f7ff ff33 	bl	8008860 <WIZCHIP_WRITE>
}
 80089fa:	bf00      	nop
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <getRMSR>:
   
uint8_t getRMSR(uint8_t sn)
{
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b082      	sub	sp, #8
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	4603      	mov	r3, r0
 8008a0a:	71fb      	strb	r3, [r7, #7]
   if(sn & 0x01)
 8008a0c:	79fb      	ldrb	r3, [r7, #7]
 8008a0e:	f003 0301 	and.w	r3, r3, #1
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d009      	beq.n	8008a2a <getRMSR+0x28>
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) & 0x00FF);
 8008a16:	79fb      	ldrb	r3, [r7, #7]
 8008a18:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008a1c:	3328      	adds	r3, #40	; 0x28
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7ff ff3c 	bl	800889c <WIZCHIP_READ>
 8008a24:	4603      	mov	r3, r0
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	e00a      	b.n	8008a40 <getRMSR+0x3e>
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) >> 8);
 8008a2a:	79fb      	ldrb	r3, [r7, #7]
 8008a2c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008a30:	3328      	adds	r3, #40	; 0x28
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7ff ff32 	bl	800889c <WIZCHIP_READ>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	0a1b      	lsrs	r3, r3, #8
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	b2db      	uxtb	r3, r3
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3708      	adds	r7, #8
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <getSn_TX_FSR>:

uint32_t getSn_TX_FSR(uint8_t sn)
{
 8008a48:	b590      	push	{r4, r7, lr}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	4603      	mov	r3, r0
 8008a50:	71fb      	strb	r3, [r7, #7]
   uint32_t free_tx_size=0;
 8008a52:	2300      	movs	r3, #0
 8008a54:	60bb      	str	r3, [r7, #8]
   uint32_t free_tx_size1=1;
 8008a56:	2301      	movs	r3, #1
 8008a58:	60fb      	str	r3, [r7, #12]
   while(1)
   {
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 8008a5a:	79fb      	ldrb	r3, [r7, #7]
 8008a5c:	3308      	adds	r3, #8
 8008a5e:	019b      	lsls	r3, r3, #6
 8008a60:	3324      	adds	r3, #36	; 0x24
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7ff ff1a 	bl	800889c <WIZCHIP_READ>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	041c      	lsls	r4, r3, #16
                     (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),2))) & 0x0000FFFF);                           // read
 8008a6c:	79fb      	ldrb	r3, [r7, #7]
 8008a6e:	3308      	adds	r3, #8
 8008a70:	019b      	lsls	r3, r3, #6
 8008a72:	3326      	adds	r3, #38	; 0x26
 8008a74:	4618      	mov	r0, r3
 8008a76:	f7ff ff11 	bl	800889c <WIZCHIP_READ>
 8008a7a:	4603      	mov	r3, r0
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 8008a7c:	4323      	orrs	r3, r4
 8008a7e:	60bb      	str	r3, [r7, #8]
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
 8008a80:	68ba      	ldr	r2, [r7, #8]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d002      	beq.n	8008a8e <getSn_TX_FSR+0x46>
      free_tx_size1 = free_tx_size;             // save second value into first                                                   
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	60fb      	str	r3, [r7, #12]
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 8008a8c:	e7e5      	b.n	8008a5a <getSn_TX_FSR+0x12>
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
 8008a8e:	bf00      	nop
   }                                                                       
   return free_tx_size;                                                    
 8008a90:	68bb      	ldr	r3, [r7, #8]
}                                                                          
 8008a92:	4618      	mov	r0, r3
 8008a94:	3714      	adds	r7, #20
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd90      	pop	{r4, r7, pc}
	...

08008a9c <getSn_RX_RSR>:

uint32_t getSn_RX_RSR(uint8_t sn)
{
 8008a9c:	b590      	push	{r4, r7, lr}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	71fb      	strb	r3, [r7, #7]
   uint32_t received_rx_size=0;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	60bb      	str	r3, [r7, #8]
   uint32_t received_rx_size1=1;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	60fb      	str	r3, [r7, #12]
   while(1)
   {
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8008aae:	79fb      	ldrb	r3, [r7, #7]
 8008ab0:	3308      	adds	r3, #8
 8008ab2:	019b      	lsls	r3, r3, #6
 8008ab4:	3328      	adds	r3, #40	; 0x28
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7ff fef0 	bl	800889c <WIZCHIP_READ>
 8008abc:	4603      	mov	r3, r0
 8008abe:	041c      	lsls	r4, r3, #16
                         (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),2))) & 0x0000FFFF);
 8008ac0:	79fb      	ldrb	r3, [r7, #7]
 8008ac2:	3308      	adds	r3, #8
 8008ac4:	019b      	lsls	r3, r3, #6
 8008ac6:	332a      	adds	r3, #42	; 0x2a
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f7ff fee7 	bl	800889c <WIZCHIP_READ>
 8008ace:	4603      	mov	r3, r0
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8008ad0:	4323      	orrs	r3, r4
 8008ad2:	60bb      	str	r3, [r7, #8]
      if(received_rx_size == received_rx_size1) break;                                                                         
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d002      	beq.n	8008ae2 <getSn_RX_RSR+0x46>
      received_rx_size1 = received_rx_size;                                      // if first == sencond, Sn_RX_RSR value is valid.
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	60fb      	str	r3, [r7, #12]
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8008ae0:	e7e5      	b.n	8008aae <getSn_RX_RSR+0x12>
      if(received_rx_size == received_rx_size1) break;                                                                         
 8008ae2:	bf00      	nop
   }                                                                             // save second value into first                
   return received_rx_size + (uint32_t)((sock_pack_info[sn] & 0x02) ? 1 : 0);   
 8008ae4:	79fb      	ldrb	r3, [r7, #7]
 8008ae6:	4a05      	ldr	r2, [pc, #20]	; (8008afc <getSn_RX_RSR+0x60>)
 8008ae8:	5cd3      	ldrb	r3, [r2, r3]
 8008aea:	105b      	asrs	r3, r3, #1
 8008aec:	f003 0201 	and.w	r2, r3, #1
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	4413      	add	r3, r2
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3714      	adds	r7, #20
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd90      	pop	{r4, r7, pc}
 8008afc:	200014d0 	.word	0x200014d0

08008b00 <wiz_send_data>:


void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b086      	sub	sp, #24
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	4603      	mov	r3, r0
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	607a      	str	r2, [r7, #4]
 8008b0c:	73fb      	strb	r3, [r7, #15]
   uint32_t i = 0;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	617b      	str	r3, [r7, #20]
   if(len == 0)  return;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d021      	beq.n	8008b5c <wiz_send_data+0x5c>
   
   for(i = 0; i < len ; i += 2)
 8008b18:	2300      	movs	r3, #0
 8008b1a:	617b      	str	r3, [r7, #20]
 8008b1c:	e019      	b.n	8008b52 <wiz_send_data+0x52>
      setSn_TX_FIFOR(sn, (((uint16_t)wizdata[i]) << 8) | (((uint16_t)wizdata[i+1]) & 0x00FF))
 8008b1e:	7bfb      	ldrb	r3, [r7, #15]
 8008b20:	3308      	adds	r3, #8
 8008b22:	019b      	lsls	r3, r3, #6
 8008b24:	332e      	adds	r3, #46	; 0x2e
 8008b26:	4618      	mov	r0, r3
 8008b28:	68ba      	ldr	r2, [r7, #8]
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	021b      	lsls	r3, r3, #8
 8008b32:	b21a      	sxth	r2, r3
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	3301      	adds	r3, #1
 8008b38:	68b9      	ldr	r1, [r7, #8]
 8008b3a:	440b      	add	r3, r1
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	b21b      	sxth	r3, r3
 8008b40:	4313      	orrs	r3, r2
 8008b42:	b21b      	sxth	r3, r3
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	4619      	mov	r1, r3
 8008b48:	f7ff fe8a 	bl	8008860 <WIZCHIP_WRITE>
   for(i = 0; i < len ; i += 2)
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	3302      	adds	r3, #2
 8008b50:	617b      	str	r3, [r7, #20]
 8008b52:	697a      	ldr	r2, [r7, #20]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d3e1      	bcc.n	8008b1e <wiz_send_data+0x1e>
 8008b5a:	e000      	b.n	8008b5e <wiz_send_data+0x5e>
   if(len == 0)  return;
 8008b5c:	bf00      	nop
}
 8008b5e:	3718      	adds	r7, #24
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b086      	sub	sp, #24
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	607a      	str	r2, [r7, #4]
 8008b70:	73fb      	strb	r3, [r7, #15]
   uint16_t rd = 0;
 8008b72:	2300      	movs	r3, #0
 8008b74:	82fb      	strh	r3, [r7, #22]
   uint32_t i = 0;
 8008b76:	2300      	movs	r3, #0
 8008b78:	613b      	str	r3, [r7, #16]
   
   if(len == 0) return;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d02c      	beq.n	8008bda <wiz_recv_data+0x76>
      
   for(i = 0; i < len; i++)
 8008b80:	2300      	movs	r3, #0
 8008b82:	613b      	str	r3, [r7, #16]
 8008b84:	e01f      	b.n	8008bc6 <wiz_recv_data+0x62>
   {
      if((i & 0x01)==0)
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	f003 0301 	and.w	r3, r3, #1
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d111      	bne.n	8008bb4 <wiz_recv_data+0x50>
      {
         rd = getSn_RX_FIFOR(sn);
 8008b90:	7bfb      	ldrb	r3, [r7, #15]
 8008b92:	3308      	adds	r3, #8
 8008b94:	019b      	lsls	r3, r3, #6
 8008b96:	3330      	adds	r3, #48	; 0x30
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7ff fe7f 	bl	800889c <WIZCHIP_READ>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	82fb      	strh	r3, [r7, #22]
         wizdata[i]   = (uint8_t)(rd >> 8);
 8008ba2:	8afb      	ldrh	r3, [r7, #22]
 8008ba4:	0a1b      	lsrs	r3, r3, #8
 8008ba6:	b299      	uxth	r1, r3
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	4413      	add	r3, r2
 8008bae:	b2ca      	uxtb	r2, r1
 8008bb0:	701a      	strb	r2, [r3, #0]
 8008bb2:	e005      	b.n	8008bc0 <wiz_recv_data+0x5c>
      }
      else  wizdata[i] = (uint8_t)rd;  // For checking the memory access violation
 8008bb4:	68ba      	ldr	r2, [r7, #8]
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	4413      	add	r3, r2
 8008bba:	8afa      	ldrh	r2, [r7, #22]
 8008bbc:	b2d2      	uxtb	r2, r2
 8008bbe:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < len; i++)
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	613b      	str	r3, [r7, #16]
 8008bc6:	693a      	ldr	r2, [r7, #16]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d3db      	bcc.n	8008b86 <wiz_recv_data+0x22>
   }
   sock_remained_byte[sn] = (uint8_t)rd; // back up the remaind fifo byte.
 8008bce:	7bfb      	ldrb	r3, [r7, #15]
 8008bd0:	8afa      	ldrh	r2, [r7, #22]
 8008bd2:	b2d1      	uxtb	r1, r2
 8008bd4:	4a03      	ldr	r2, [pc, #12]	; (8008be4 <wiz_recv_data+0x80>)
 8008bd6:	54d1      	strb	r1, [r2, r3]
 8008bd8:	e000      	b.n	8008bdc <wiz_recv_data+0x78>
   if(len == 0) return;
 8008bda:	bf00      	nop
}
 8008bdc:	3718      	adds	r7, #24
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	200014d8 	.word	0x200014d8

08008be8 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8008be8:	b480      	push	{r7}
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	bf00      	nop
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr

08008bf6 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8008bf6:	b480      	push	{r7}
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	bf00      	nop
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8008c04:	b480      	push	{r7}
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	bf00      	nop
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr

08008c12 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8008c12:	b480      	push	{r7}
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	bf00      	nop
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	881b      	ldrh	r3, [r3, #0]
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	4618      	mov	r0, r3
 8008c30:	370c      	adds	r7, #12
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr

08008c3a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8008c3a:	b480      	push	{r7}
 8008c3c:	b083      	sub	sp, #12
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
 8008c42:	460b      	mov	r3, r1
 8008c44:	807b      	strh	r3, [r7, #2]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	887a      	ldrh	r2, [r7, #2]
 8008c4a:	801a      	strh	r2, [r3, #0]
 8008c4c:	bf00      	nop
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d002      	beq.n	8008c6e <reg_wizchip_cs_cbfunc+0x16>
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d106      	bne.n	8008c7c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8008c6e:	4b0a      	ldr	r3, [pc, #40]	; (8008c98 <reg_wizchip_cs_cbfunc+0x40>)
 8008c70:	4a0a      	ldr	r2, [pc, #40]	; (8008c9c <reg_wizchip_cs_cbfunc+0x44>)
 8008c72:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8008c74:	4b08      	ldr	r3, [pc, #32]	; (8008c98 <reg_wizchip_cs_cbfunc+0x40>)
 8008c76:	4a0a      	ldr	r2, [pc, #40]	; (8008ca0 <reg_wizchip_cs_cbfunc+0x48>)
 8008c78:	619a      	str	r2, [r3, #24]
 8008c7a:	e006      	b.n	8008c8a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8008c7c:	4a06      	ldr	r2, [pc, #24]	; (8008c98 <reg_wizchip_cs_cbfunc+0x40>)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8008c82:	4a05      	ldr	r2, [pc, #20]	; (8008c98 <reg_wizchip_cs_cbfunc+0x40>)
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	6193      	str	r3, [r2, #24]
   }
}
 8008c88:	bf00      	nop
 8008c8a:	bf00      	nop
 8008c8c:	370c      	adds	r7, #12
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop
 8008c98:	200000a8 	.word	0x200000a8
 8008c9c:	08008c05 	.word	0x08008c05
 8008ca0:	08008c13 	.word	0x08008c13

08008ca4 <reg_wizchip_bus_cbfunc>:

//M20150515 : For integrating with W5300
//void reg_wizchip_bus_cbfunc(uint8_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, uint8_t wb))
void reg_wizchip_bus_cbfunc(iodata_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, iodata_t wb))
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_BUS_));
 8008cae:	bf00      	nop
 8008cb0:	4b0f      	ldr	r3, [pc, #60]	; (8008cf0 <reg_wizchip_bus_cbfunc+0x4c>)
 8008cb2:	881b      	ldrh	r3, [r3, #0]
 8008cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d0f9      	beq.n	8008cb0 <reg_wizchip_bus_cbfunc+0xc>
   {
      WIZCHIP.IF.BUS._read_byte   = bus_rb;
      WIZCHIP.IF.BUS._write_byte  = bus_wb;
   }
   */
   if(!bus_rb || !bus_wb)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d002      	beq.n	8008cc8 <reg_wizchip_bus_cbfunc+0x24>
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d106      	bne.n	8008cd6 <reg_wizchip_bus_cbfunc+0x32>
   {
      WIZCHIP.IF.BUS._read_data   = wizchip_bus_readdata;
 8008cc8:	4b09      	ldr	r3, [pc, #36]	; (8008cf0 <reg_wizchip_bus_cbfunc+0x4c>)
 8008cca:	4a0a      	ldr	r2, [pc, #40]	; (8008cf4 <reg_wizchip_bus_cbfunc+0x50>)
 8008ccc:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.BUS._write_data  = wizchip_bus_writedata;
 8008cce:	4b08      	ldr	r3, [pc, #32]	; (8008cf0 <reg_wizchip_bus_cbfunc+0x4c>)
 8008cd0:	4a09      	ldr	r2, [pc, #36]	; (8008cf8 <reg_wizchip_bus_cbfunc+0x54>)
 8008cd2:	621a      	str	r2, [r3, #32]
 8008cd4:	e006      	b.n	8008ce4 <reg_wizchip_bus_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.BUS._read_data   = bus_rb;
 8008cd6:	4a06      	ldr	r2, [pc, #24]	; (8008cf0 <reg_wizchip_bus_cbfunc+0x4c>)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.BUS._write_data  = bus_wb;
 8008cdc:	4a04      	ldr	r2, [pc, #16]	; (8008cf0 <reg_wizchip_bus_cbfunc+0x4c>)
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	6213      	str	r3, [r2, #32]
   }
}
 8008ce2:	bf00      	nop
 8008ce4:	bf00      	nop
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr
 8008cf0:	200000a8 	.word	0x200000a8
 8008cf4:	08008c21 	.word	0x08008c21
 8008cf8:	08008c3b 	.word	0x08008c3b

08008cfc <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	4603      	mov	r3, r0
 8008d04:	6039      	str	r1, [r7, #0]
 8008d06:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
#endif
   uint8_t* ptmp[2] = {0,0};
 8008d08:	2300      	movs	r3, #0
 8008d0a:	60bb      	str	r3, [r7, #8]
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	60fb      	str	r3, [r7, #12]
   switch(cwtype)
 8008d10:	79fb      	ldrb	r3, [r7, #7]
 8008d12:	2b08      	cmp	r3, #8
 8008d14:	d863      	bhi.n	8008dde <ctlwizchip+0xe2>
 8008d16:	a201      	add	r2, pc, #4	; (adr r2, 8008d1c <ctlwizchip+0x20>)
 8008d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d1c:	08008d41 	.word	0x08008d41
 8008d20:	08008d47 	.word	0x08008d47
 8008d24:	08008d73 	.word	0x08008d73
 8008d28:	08008d67 	.word	0x08008d67
 8008d2c:	08008d81 	.word	0x08008d81
 8008d30:	08008d8d 	.word	0x08008d8d
 8008d34:	08008ddf 	.word	0x08008ddf
 8008d38:	08008ddf 	.word	0x08008ddf
 8008d3c:	08008d9b 	.word	0x08008d9b
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8008d40:	f000 f896 	bl	8008e70 <wizchip_sw_reset>
         break;
 8008d44:	e04e      	b.n	8008de4 <ctlwizchip+0xe8>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d004      	beq.n	8008d56 <ctlwizchip+0x5a>
         {
            ptmp[0] = (uint8_t*)arg;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	60bb      	str	r3, [r7, #8]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	3308      	adds	r3, #8
 8008d54:	60fb      	str	r3, [r7, #12]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	68fa      	ldr	r2, [r7, #12]
 8008d5a:	4611      	mov	r1, r2
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f000 f97f 	bl	8009060 <wizchip_init>
 8008d62:	4603      	mov	r3, r0
 8008d64:	e03f      	b.n	8008de6 <ctlwizchip+0xea>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	881b      	ldrh	r3, [r3, #0]
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f000 fa0e 	bl	800918c <wizchip_clrinterrupt>
         break;
 8008d70:	e038      	b.n	8008de4 <ctlwizchip+0xe8>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8008d72:	f000 fa2d 	bl	80091d0 <wizchip_getinterrupt>
 8008d76:	4603      	mov	r3, r0
 8008d78:	461a      	mov	r2, r3
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	801a      	strh	r2, [r3, #0]
         break;
 8008d7e:	e031      	b.n	8008de4 <ctlwizchip+0xe8>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	881b      	ldrh	r3, [r3, #0]
 8008d84:	4618      	mov	r0, r3
 8008d86:	f000 fa47 	bl	8009218 <wizchip_setinterruptmask>
         break;         
 8008d8a:	e02b      	b.n	8008de4 <ctlwizchip+0xe8>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8008d8c:	f000 fa66 	bl	800925c <wizchip_getinterruptmask>
 8008d90:	4603      	mov	r3, r0
 8008d92:	461a      	mov	r2, r3
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	801a      	strh	r2, [r3, #0]
         break;
 8008d98:	e024      	b.n	8008de4 <ctlwizchip+0xe8>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
         break;
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8008d9a:	4b15      	ldr	r3, [pc, #84]	; (8008df0 <ctlwizchip+0xf4>)
 8008d9c:	789a      	ldrb	r2, [r3, #2]
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	3301      	adds	r3, #1
 8008da6:	4a12      	ldr	r2, [pc, #72]	; (8008df0 <ctlwizchip+0xf4>)
 8008da8:	78d2      	ldrb	r2, [r2, #3]
 8008daa:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	3302      	adds	r3, #2
 8008db0:	4a0f      	ldr	r2, [pc, #60]	; (8008df0 <ctlwizchip+0xf4>)
 8008db2:	7912      	ldrb	r2, [r2, #4]
 8008db4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	3303      	adds	r3, #3
 8008dba:	4a0d      	ldr	r2, [pc, #52]	; (8008df0 <ctlwizchip+0xf4>)
 8008dbc:	7952      	ldrb	r2, [r2, #5]
 8008dbe:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	3304      	adds	r3, #4
 8008dc4:	4a0a      	ldr	r2, [pc, #40]	; (8008df0 <ctlwizchip+0xf4>)
 8008dc6:	7992      	ldrb	r2, [r2, #6]
 8008dc8:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	3305      	adds	r3, #5
 8008dce:	4a08      	ldr	r2, [pc, #32]	; (8008df0 <ctlwizchip+0xf4>)
 8008dd0:	79d2      	ldrb	r2, [r2, #7]
 8008dd2:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	3306      	adds	r3, #6
 8008dd8:	2200      	movs	r2, #0
 8008dda:	701a      	strb	r2, [r3, #0]
         break;
 8008ddc:	e002      	b.n	8008de4 <ctlwizchip+0xe8>
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
   #endif      
      default:
         return -1;
 8008dde:	f04f 33ff 	mov.w	r3, #4294967295
 8008de2:	e000      	b.n	8008de6 <ctlwizchip+0xea>
   }
   return 0;
 8008de4:	2300      	movs	r3, #0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	200000a8 	.word	0x200000a8

08008df4 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	6039      	str	r1, [r7, #0]
 8008dfe:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8008e00:	79fb      	ldrb	r3, [r7, #7]
 8008e02:	2b05      	cmp	r3, #5
 8008e04:	d82c      	bhi.n	8008e60 <ctlnetwork+0x6c>
 8008e06:	a201      	add	r2, pc, #4	; (adr r2, 8008e0c <ctlnetwork+0x18>)
 8008e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0c:	08008e25 	.word	0x08008e25
 8008e10:	08008e2d 	.word	0x08008e2d
 8008e14:	08008e35 	.word	0x08008e35
 8008e18:	08008e43 	.word	0x08008e43
 8008e1c:	08008e51 	.word	0x08008e51
 8008e20:	08008e59 	.word	0x08008e59
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8008e24:	6838      	ldr	r0, [r7, #0]
 8008e26:	f000 fa41 	bl	80092ac <wizchip_setnetinfo>
         break;
 8008e2a:	e01c      	b.n	8008e66 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8008e2c:	6838      	ldr	r0, [r7, #0]
 8008e2e:	f000 fadb 	bl	80093e8 <wizchip_getnetinfo>
         break;
 8008e32:	e018      	b.n	8008e66 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f000 fb85 	bl	8009548 <wizchip_setnetmode>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	e012      	b.n	8008e68 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8008e42:	f000 fba4 	bl	800958e <wizchip_getnetmode>
 8008e46:	4603      	mov	r3, r0
 8008e48:	461a      	mov	r2, r3
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	701a      	strb	r2, [r3, #0]
         break;
 8008e4e:	e00a      	b.n	8008e66 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8008e50:	6838      	ldr	r0, [r7, #0]
 8008e52:	f000 fba5 	bl	80095a0 <wizchip_settimeout>
         break;
 8008e56:	e006      	b.n	8008e66 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8008e58:	6838      	ldr	r0, [r7, #0]
 8008e5a:	f000 fbb6 	bl	80095ca <wizchip_gettimeout>
         break;
 8008e5e:	e002      	b.n	8008e66 <ctlnetwork+0x72>
      default:
         return -1;
 8008e60:	f04f 33ff 	mov.w	r3, #4294967295
 8008e64:	e000      	b.n	8008e68 <ctlnetwork+0x74>
   }
   return 0;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b086      	sub	sp, #24
 8008e74:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8008e76:	2008      	movs	r0, #8
 8008e78:	f7ff fd10 	bl	800889c <WIZCHIP_READ>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	0a1b      	lsrs	r3, r3, #8
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	713b      	strb	r3, [r7, #4]
 8008e86:	2008      	movs	r0, #8
 8008e88:	f7ff fd08 	bl	800889c <WIZCHIP_READ>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	717b      	strb	r3, [r7, #5]
 8008e92:	200a      	movs	r0, #10
 8008e94:	f7ff fd02 	bl	800889c <WIZCHIP_READ>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	0a1b      	lsrs	r3, r3, #8
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	71bb      	strb	r3, [r7, #6]
 8008ea2:	200a      	movs	r0, #10
 8008ea4:	f7ff fcfa 	bl	800889c <WIZCHIP_READ>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	71fb      	strb	r3, [r7, #7]
 8008eae:	200c      	movs	r0, #12
 8008eb0:	f7ff fcf4 	bl	800889c <WIZCHIP_READ>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	0a1b      	lsrs	r3, r3, #8
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	723b      	strb	r3, [r7, #8]
 8008ebe:	200c      	movs	r0, #12
 8008ec0:	f7ff fcec 	bl	800889c <WIZCHIP_READ>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	727b      	strb	r3, [r7, #9]
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8008eca:	2010      	movs	r0, #16
 8008ecc:	f7ff fce6 	bl	800889c <WIZCHIP_READ>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	0a1b      	lsrs	r3, r3, #8
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	753b      	strb	r3, [r7, #20]
 8008eda:	2010      	movs	r0, #16
 8008edc:	f7ff fcde 	bl	800889c <WIZCHIP_READ>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	757b      	strb	r3, [r7, #21]
 8008ee6:	2012      	movs	r0, #18
 8008ee8:	f7ff fcd8 	bl	800889c <WIZCHIP_READ>
 8008eec:	4603      	mov	r3, r0
 8008eee:	0a1b      	lsrs	r3, r3, #8
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	75bb      	strb	r3, [r7, #22]
 8008ef6:	2012      	movs	r0, #18
 8008ef8:	f7ff fcd0 	bl	800889c <WIZCHIP_READ>
 8008efc:	4603      	mov	r3, r0
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	75fb      	strb	r3, [r7, #23]
 8008f02:	2014      	movs	r0, #20
 8008f04:	f7ff fcca 	bl	800889c <WIZCHIP_READ>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	0a1b      	lsrs	r3, r3, #8
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	743b      	strb	r3, [r7, #16]
 8008f12:	2014      	movs	r0, #20
 8008f14:	f7ff fcc2 	bl	800889c <WIZCHIP_READ>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	747b      	strb	r3, [r7, #17]
 8008f1e:	2016      	movs	r0, #22
 8008f20:	f7ff fcbc 	bl	800889c <WIZCHIP_READ>
 8008f24:	4603      	mov	r3, r0
 8008f26:	0a1b      	lsrs	r3, r3, #8
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	74bb      	strb	r3, [r7, #18]
 8008f2e:	2016      	movs	r0, #22
 8008f30:	f7ff fcb4 	bl	800889c <WIZCHIP_READ>
 8008f34:	4603      	mov	r3, r0
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	74fb      	strb	r3, [r7, #19]
 8008f3a:	2018      	movs	r0, #24
 8008f3c:	f7ff fcae 	bl	800889c <WIZCHIP_READ>
 8008f40:	4603      	mov	r3, r0
 8008f42:	0a1b      	lsrs	r3, r3, #8
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	733b      	strb	r3, [r7, #12]
 8008f4a:	2018      	movs	r0, #24
 8008f4c:	f7ff fca6 	bl	800889c <WIZCHIP_READ>
 8008f50:	4603      	mov	r3, r0
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	737b      	strb	r3, [r7, #13]
 8008f56:	201a      	movs	r0, #26
 8008f58:	f7ff fca0 	bl	800889c <WIZCHIP_READ>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	0a1b      	lsrs	r3, r3, #8
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	73bb      	strb	r3, [r7, #14]
 8008f66:	201a      	movs	r0, #26
 8008f68:	f7ff fc98 	bl	800889c <WIZCHIP_READ>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	73fb      	strb	r3, [r7, #15]
   setMR(MR_RST);
 8008f72:	2180      	movs	r1, #128	; 0x80
 8008f74:	2000      	movs	r0, #0
 8008f76:	f7ff fc73 	bl	8008860 <WIZCHIP_WRITE>
   getMR(); // for delay
 8008f7a:	2000      	movs	r0, #0
 8008f7c:	f7ff fc8e 	bl	800889c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8008f80:	793b      	ldrb	r3, [r7, #4]
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	021b      	lsls	r3, r3, #8
 8008f86:	b29a      	uxth	r2, r3
 8008f88:	797b      	ldrb	r3, [r7, #5]
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	4413      	add	r3, r2
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	4619      	mov	r1, r3
 8008f92:	2008      	movs	r0, #8
 8008f94:	f7ff fc64 	bl	8008860 <WIZCHIP_WRITE>
 8008f98:	79bb      	ldrb	r3, [r7, #6]
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	021b      	lsls	r3, r3, #8
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	79fb      	ldrb	r3, [r7, #7]
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	4413      	add	r3, r2
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	4619      	mov	r1, r3
 8008faa:	200a      	movs	r0, #10
 8008fac:	f7ff fc58 	bl	8008860 <WIZCHIP_WRITE>
 8008fb0:	7a3b      	ldrb	r3, [r7, #8]
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	021b      	lsls	r3, r3, #8
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	7a7b      	ldrb	r3, [r7, #9]
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	4413      	add	r3, r2
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	200c      	movs	r0, #12
 8008fc4:	f7ff fc4c 	bl	8008860 <WIZCHIP_WRITE>
   setGAR(gw);
 8008fc8:	7d3b      	ldrb	r3, [r7, #20]
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	021b      	lsls	r3, r3, #8
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	7d7b      	ldrb	r3, [r7, #21]
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	4413      	add	r3, r2
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	4619      	mov	r1, r3
 8008fda:	2010      	movs	r0, #16
 8008fdc:	f7ff fc40 	bl	8008860 <WIZCHIP_WRITE>
 8008fe0:	7dbb      	ldrb	r3, [r7, #22]
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	021b      	lsls	r3, r3, #8
 8008fe6:	b29a      	uxth	r2, r3
 8008fe8:	7dfb      	ldrb	r3, [r7, #23]
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	4413      	add	r3, r2
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	2012      	movs	r0, #18
 8008ff4:	f7ff fc34 	bl	8008860 <WIZCHIP_WRITE>
   setSUBR(sn);
 8008ff8:	7c3b      	ldrb	r3, [r7, #16]
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	021b      	lsls	r3, r3, #8
 8008ffe:	b29a      	uxth	r2, r3
 8009000:	7c7b      	ldrb	r3, [r7, #17]
 8009002:	b29b      	uxth	r3, r3
 8009004:	4413      	add	r3, r2
 8009006:	b29b      	uxth	r3, r3
 8009008:	4619      	mov	r1, r3
 800900a:	2014      	movs	r0, #20
 800900c:	f7ff fc28 	bl	8008860 <WIZCHIP_WRITE>
 8009010:	7cbb      	ldrb	r3, [r7, #18]
 8009012:	b29b      	uxth	r3, r3
 8009014:	021b      	lsls	r3, r3, #8
 8009016:	b29a      	uxth	r2, r3
 8009018:	7cfb      	ldrb	r3, [r7, #19]
 800901a:	b29b      	uxth	r3, r3
 800901c:	4413      	add	r3, r2
 800901e:	b29b      	uxth	r3, r3
 8009020:	4619      	mov	r1, r3
 8009022:	2016      	movs	r0, #22
 8009024:	f7ff fc1c 	bl	8008860 <WIZCHIP_WRITE>
   setSIPR(sip);
 8009028:	7b3b      	ldrb	r3, [r7, #12]
 800902a:	b29b      	uxth	r3, r3
 800902c:	021b      	lsls	r3, r3, #8
 800902e:	b29a      	uxth	r2, r3
 8009030:	7b7b      	ldrb	r3, [r7, #13]
 8009032:	b29b      	uxth	r3, r3
 8009034:	4413      	add	r3, r2
 8009036:	b29b      	uxth	r3, r3
 8009038:	4619      	mov	r1, r3
 800903a:	2018      	movs	r0, #24
 800903c:	f7ff fc10 	bl	8008860 <WIZCHIP_WRITE>
 8009040:	7bbb      	ldrb	r3, [r7, #14]
 8009042:	b29b      	uxth	r3, r3
 8009044:	021b      	lsls	r3, r3, #8
 8009046:	b29a      	uxth	r2, r3
 8009048:	7bfb      	ldrb	r3, [r7, #15]
 800904a:	b29b      	uxth	r3, r3
 800904c:	4413      	add	r3, r2
 800904e:	b29b      	uxth	r3, r3
 8009050:	4619      	mov	r1, r3
 8009052:	201a      	movs	r0, #26
 8009054:	f7ff fc04 	bl	8008860 <WIZCHIP_WRITE>
}
 8009058:	bf00      	nop
 800905a:	3718      	adds	r7, #24
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800906a:	2300      	movs	r3, #0
 800906c:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800906e:	f7ff feff 	bl	8008e70 <wizchip_sw_reset>
   if(txsize)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d040      	beq.n	80090fa <wizchip_init+0x9a>
   {
      tmp = 0;
 8009078:	2300      	movs	r3, #0
 800907a:	73bb      	strb	r3, [r7, #14]
//M20150601 : For integrating with W5300
#if _WIZCHIP_ == W5300
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800907c:	2300      	movs	r3, #0
 800907e:	73fb      	strb	r3, [r7, #15]
 8009080:	e018      	b.n	80090b4 <wizchip_init+0x54>
		{
			if(txsize[i] > 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8009082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	4413      	add	r3, r2
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	2b40      	cmp	r3, #64	; 0x40
 800908e:	d902      	bls.n	8009096 <wizchip_init+0x36>
 8009090:	f04f 33ff 	mov.w	r3, #4294967295
 8009094:	e076      	b.n	8009184 <wizchip_init+0x124>
			tmp += txsize[i];
 8009096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	4413      	add	r3, r2
 800909e:	781a      	ldrb	r2, [r3, #0]
 80090a0:	7bbb      	ldrb	r3, [r7, #14]
 80090a2:	4413      	add	r3, r2
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	73bb      	strb	r3, [r7, #14]
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80090a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	3301      	adds	r3, #1
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	73fb      	strb	r3, [r7, #15]
 80090b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090b8:	2b07      	cmp	r3, #7
 80090ba:	dde2      	ble.n	8009082 <wizchip_init+0x22>
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 80090bc:	7bbb      	ldrb	r3, [r7, #14]
 80090be:	f003 0307 	and.w	r3, r3, #7
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d002      	beq.n	80090ce <wizchip_init+0x6e>
 80090c8:	f04f 33ff 	mov.w	r3, #4294967295
 80090cc:	e05a      	b.n	8009184 <wizchip_init+0x124>
#else
			if(tmp > 16) return -1;
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80090ce:	2300      	movs	r3, #0
 80090d0:	73fb      	strb	r3, [r7, #15]
 80090d2:	e00e      	b.n	80090f2 <wizchip_init+0x92>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80090d4:	7bf8      	ldrb	r0, [r7, #15]
 80090d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	4413      	add	r3, r2
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	4619      	mov	r1, r3
 80090e2:	f7ff fbf9 	bl	80088d8 <setTMSR>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80090e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	3301      	adds	r3, #1
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	73fb      	strb	r3, [r7, #15]
 80090f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090f6:	2b07      	cmp	r3, #7
 80090f8:	ddec      	ble.n	80090d4 <wizchip_init+0x74>
#endif
		}	
   }

   if(rxsize)
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d040      	beq.n	8009182 <wizchip_init+0x122>
   {
      tmp = 0;
 8009100:	2300      	movs	r3, #0
 8009102:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ == W5300
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009104:	2300      	movs	r3, #0
 8009106:	73fb      	strb	r3, [r7, #15]
 8009108:	e018      	b.n	800913c <wizchip_init+0xdc>
		{
			if(rxsize[i] > 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 800910a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800910e:	683a      	ldr	r2, [r7, #0]
 8009110:	4413      	add	r3, r2
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	2b40      	cmp	r3, #64	; 0x40
 8009116:	d902      	bls.n	800911e <wizchip_init+0xbe>
 8009118:	f04f 33ff 	mov.w	r3, #4294967295
 800911c:	e032      	b.n	8009184 <wizchip_init+0x124>
			tmp += rxsize[i];
 800911e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009122:	683a      	ldr	r2, [r7, #0]
 8009124:	4413      	add	r3, r2
 8009126:	781a      	ldrb	r2, [r3, #0]
 8009128:	7bbb      	ldrb	r3, [r7, #14]
 800912a:	4413      	add	r3, r2
 800912c:	b2db      	uxtb	r3, r3
 800912e:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009130:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009134:	b2db      	uxtb	r3, r3
 8009136:	3301      	adds	r3, #1
 8009138:	b2db      	uxtb	r3, r3
 800913a:	73fb      	strb	r3, [r7, #15]
 800913c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009140:	2b07      	cmp	r3, #7
 8009142:	dde2      	ble.n	800910a <wizchip_init+0xaa>
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 8009144:	7bbb      	ldrb	r3, [r7, #14]
 8009146:	f003 0307 	and.w	r3, r3, #7
 800914a:	b2db      	uxtb	r3, r3
 800914c:	2b00      	cmp	r3, #0
 800914e:	d002      	beq.n	8009156 <wizchip_init+0xf6>
 8009150:	f04f 33ff 	mov.w	r3, #4294967295
 8009154:	e016      	b.n	8009184 <wizchip_init+0x124>
#else
			if(tmp > 16) return -1;
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009156:	2300      	movs	r3, #0
 8009158:	73fb      	strb	r3, [r7, #15]
 800915a:	e00e      	b.n	800917a <wizchip_init+0x11a>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800915c:	7bf8      	ldrb	r0, [r7, #15]
 800915e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009162:	683a      	ldr	r2, [r7, #0]
 8009164:	4413      	add	r3, r2
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	4619      	mov	r1, r3
 800916a:	f7ff fc11 	bl	8008990 <setRMSR>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800916e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009172:	b2db      	uxtb	r3, r3
 8009174:	3301      	adds	r3, #1
 8009176:	b2db      	uxtb	r3, r3
 8009178:	73fb      	strb	r3, [r7, #15]
 800917a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800917e:	2b07      	cmp	r3, #7
 8009180:	ddec      	ble.n	800915c <wizchip_init+0xfc>
#endif
		}
   }
   return 0;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	4603      	mov	r3, r0
 8009194:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8009196:	88fb      	ldrh	r3, [r7, #6]
 8009198:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 800919a:	88fb      	ldrh	r3, [r7, #6]
 800919c:	0a1b      	lsrs	r3, r3, #8
 800919e:	b29b      	uxth	r3, r3
 80091a0:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   ir |= (1<<4); // IK_WOL
 80091a2:	7bfb      	ldrb	r3, [r7, #15]
 80091a4:	f043 0310 	orr.w	r3, r3, #16
 80091a8:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ <= W5100S
   ir |= sir;
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
 80091aa:	7bfb      	ldrb	r3, [r7, #15]
 80091ac:	021b      	lsls	r3, r3, #8
 80091ae:	b21a      	sxth	r2, r3
 80091b0:	7bbb      	ldrb	r3, [r7, #14]
 80091b2:	b21b      	sxth	r3, r3
 80091b4:	4313      	orrs	r3, r2
 80091b6:	b21b      	sxth	r3, r3
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80091be:	b29b      	uxth	r3, r3
 80091c0:	4619      	mov	r1, r3
 80091c2:	2002      	movs	r0, #2
 80091c4:	f7ff fb4c 	bl	8008860 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
   }

#endif   
}
 80091c8:	bf00      	nop
 80091ca:	3710      	adds	r7, #16
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 80091d6:	2300      	movs	r3, #0
 80091d8:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 80091da:	2300      	movs	r3, #0
 80091dc:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80091de:	2300      	movs	r3, #0
 80091e0:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ <= W5100S
   ir = getIR();
   sir = ir & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_  == W5300
   ret = getIR();
 80091e2:	2002      	movs	r0, #2
 80091e4:	f7ff fb5a 	bl	800889c <WIZCHIP_READ>
 80091e8:	4603      	mov	r3, r0
 80091ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80091ee:	80bb      	strh	r3, [r7, #4]
   ir = (uint8_t)(ret >> 8);
 80091f0:	88bb      	ldrh	r3, [r7, #4]
 80091f2:	0a1b      	lsrs	r3, r3, #8
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	71fb      	strb	r3, [r7, #7]
   sir = (uint8_t)ret;
 80091f8:	88bb      	ldrh	r3, [r7, #4]
 80091fa:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80091fc:	79bb      	ldrb	r3, [r7, #6]
 80091fe:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8009200:	88bb      	ldrh	r3, [r7, #4]
 8009202:	021b      	lsls	r3, r3, #8
 8009204:	b29a      	uxth	r2, r3
 8009206:	79fb      	ldrb	r3, [r7, #7]
 8009208:	b29b      	uxth	r3, r3
 800920a:	4413      	add	r3, r2
 800920c:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 800920e:	88bb      	ldrh	r3, [r7, #4]
}
 8009210:	4618      	mov	r0, r3
 8009212:	3708      	adds	r7, #8
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	4603      	mov	r3, r0
 8009220:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8009222:	88fb      	ldrh	r3, [r7, #6]
 8009224:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8009226:	88fb      	ldrh	r3, [r7, #6]
 8009228:	0a1b      	lsrs	r3, r3, #8
 800922a:	b29b      	uxth	r3, r3
 800922c:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 800922e:	7bfb      	ldrb	r3, [r7, #15]
 8009230:	f023 0310 	bic.w	r3, r3, #16
 8009234:	73fb      	strb	r3, [r7, #15]
   simr &= 0x0F;
   imr |= simr;
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
 8009236:	7bfb      	ldrb	r3, [r7, #15]
 8009238:	021b      	lsls	r3, r3, #8
 800923a:	b21a      	sxth	r2, r3
 800923c:	7bbb      	ldrb	r3, [r7, #14]
 800923e:	b21b      	sxth	r3, r3
 8009240:	4313      	orrs	r3, r2
 8009242:	b21b      	sxth	r3, r3
 8009244:	b29b      	uxth	r3, r3
 8009246:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800924a:	b29b      	uxth	r3, r3
 800924c:	4619      	mov	r1, r3
 800924e:	2004      	movs	r0, #4
 8009250:	f7ff fb06 	bl	8008860 <WIZCHIP_WRITE>
#else
   setIMR(imr);
   setSIMR(simr);
#endif   
}
 8009254:	bf00      	nop
 8009256:	3710      	adds	r7, #16
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8009262:	2300      	movs	r3, #0
 8009264:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8009266:	2300      	movs	r3, #0
 8009268:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800926a:	2300      	movs	r3, #0
 800926c:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ < W5200
   imr  = getIMR();
   simr = imr & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   ret = getIMR();
 800926e:	2004      	movs	r0, #4
 8009270:	f7ff fb14 	bl	800889c <WIZCHIP_READ>
 8009274:	4603      	mov	r3, r0
 8009276:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800927a:	80bb      	strh	r3, [r7, #4]
   imr = (uint8_t)(ret >> 8);
 800927c:	88bb      	ldrh	r3, [r7, #4]
 800927e:	0a1b      	lsrs	r3, r3, #8
 8009280:	b29b      	uxth	r3, r3
 8009282:	71fb      	strb	r3, [r7, #7]
   simr = (uint8_t)ret;
 8009284:	88bb      	ldrh	r3, [r7, #4]
 8009286:	71bb      	strb	r3, [r7, #6]
   imr  = getIMR();
   simr = getSIMR();
#endif         

#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 8009288:	79fb      	ldrb	r3, [r7, #7]
 800928a:	f023 0310 	bic.w	r3, r3, #16
 800928e:	71fb      	strb	r3, [r7, #7]
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8009290:	79bb      	ldrb	r3, [r7, #6]
 8009292:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8009294:	88bb      	ldrh	r3, [r7, #4]
 8009296:	021b      	lsls	r3, r3, #8
 8009298:	b29a      	uxth	r2, r3
 800929a:	79fb      	ldrb	r3, [r7, #7]
 800929c:	b29b      	uxth	r3, r3
 800929e:	4413      	add	r3, r2
 80092a0:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80092a2:	88bb      	ldrh	r3, [r7, #4]
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3708      	adds	r7, #8
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	021b      	lsls	r3, r3, #8
 80092bc:	b29a      	uxth	r2, r3
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	785b      	ldrb	r3, [r3, #1]
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	4413      	add	r3, r2
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	4619      	mov	r1, r3
 80092ca:	2008      	movs	r0, #8
 80092cc:	f7ff fac8 	bl	8008860 <WIZCHIP_WRITE>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	789b      	ldrb	r3, [r3, #2]
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	021b      	lsls	r3, r3, #8
 80092d8:	b29a      	uxth	r2, r3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	78db      	ldrb	r3, [r3, #3]
 80092de:	b29b      	uxth	r3, r3
 80092e0:	4413      	add	r3, r2
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	4619      	mov	r1, r3
 80092e6:	200a      	movs	r0, #10
 80092e8:	f7ff faba 	bl	8008860 <WIZCHIP_WRITE>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	791b      	ldrb	r3, [r3, #4]
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	021b      	lsls	r3, r3, #8
 80092f4:	b29a      	uxth	r2, r3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	795b      	ldrb	r3, [r3, #5]
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	4413      	add	r3, r2
 80092fe:	b29b      	uxth	r3, r3
 8009300:	4619      	mov	r1, r3
 8009302:	200c      	movs	r0, #12
 8009304:	f7ff faac 	bl	8008860 <WIZCHIP_WRITE>
   setGAR(pnetinfo->gw);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	7b9b      	ldrb	r3, [r3, #14]
 800930c:	b29b      	uxth	r3, r3
 800930e:	021b      	lsls	r3, r3, #8
 8009310:	b29a      	uxth	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	7bdb      	ldrb	r3, [r3, #15]
 8009316:	b29b      	uxth	r3, r3
 8009318:	4413      	add	r3, r2
 800931a:	b29b      	uxth	r3, r3
 800931c:	4619      	mov	r1, r3
 800931e:	2010      	movs	r0, #16
 8009320:	f7ff fa9e 	bl	8008860 <WIZCHIP_WRITE>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	7c1b      	ldrb	r3, [r3, #16]
 8009328:	b29b      	uxth	r3, r3
 800932a:	021b      	lsls	r3, r3, #8
 800932c:	b29a      	uxth	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	7c5b      	ldrb	r3, [r3, #17]
 8009332:	b29b      	uxth	r3, r3
 8009334:	4413      	add	r3, r2
 8009336:	b29b      	uxth	r3, r3
 8009338:	4619      	mov	r1, r3
 800933a:	2012      	movs	r0, #18
 800933c:	f7ff fa90 	bl	8008860 <WIZCHIP_WRITE>
   setSUBR(pnetinfo->sn);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	7a9b      	ldrb	r3, [r3, #10]
 8009344:	b29b      	uxth	r3, r3
 8009346:	021b      	lsls	r3, r3, #8
 8009348:	b29a      	uxth	r2, r3
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	7adb      	ldrb	r3, [r3, #11]
 800934e:	b29b      	uxth	r3, r3
 8009350:	4413      	add	r3, r2
 8009352:	b29b      	uxth	r3, r3
 8009354:	4619      	mov	r1, r3
 8009356:	2014      	movs	r0, #20
 8009358:	f7ff fa82 	bl	8008860 <WIZCHIP_WRITE>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	7b1b      	ldrb	r3, [r3, #12]
 8009360:	b29b      	uxth	r3, r3
 8009362:	021b      	lsls	r3, r3, #8
 8009364:	b29a      	uxth	r2, r3
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	7b5b      	ldrb	r3, [r3, #13]
 800936a:	b29b      	uxth	r3, r3
 800936c:	4413      	add	r3, r2
 800936e:	b29b      	uxth	r3, r3
 8009370:	4619      	mov	r1, r3
 8009372:	2016      	movs	r0, #22
 8009374:	f7ff fa74 	bl	8008860 <WIZCHIP_WRITE>
   setSIPR(pnetinfo->ip);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	799b      	ldrb	r3, [r3, #6]
 800937c:	b29b      	uxth	r3, r3
 800937e:	021b      	lsls	r3, r3, #8
 8009380:	b29a      	uxth	r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	79db      	ldrb	r3, [r3, #7]
 8009386:	b29b      	uxth	r3, r3
 8009388:	4413      	add	r3, r2
 800938a:	b29b      	uxth	r3, r3
 800938c:	4619      	mov	r1, r3
 800938e:	2018      	movs	r0, #24
 8009390:	f7ff fa66 	bl	8008860 <WIZCHIP_WRITE>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	7a1b      	ldrb	r3, [r3, #8]
 8009398:	b29b      	uxth	r3, r3
 800939a:	021b      	lsls	r3, r3, #8
 800939c:	b29a      	uxth	r2, r3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	7a5b      	ldrb	r3, [r3, #9]
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	4413      	add	r3, r2
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	4619      	mov	r1, r3
 80093aa:	201a      	movs	r0, #26
 80093ac:	f7ff fa58 	bl	8008860 <WIZCHIP_WRITE>
   _DNS_[0] = pnetinfo->dns[0];
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	7c9a      	ldrb	r2, [r3, #18]
 80093b4:	4b0a      	ldr	r3, [pc, #40]	; (80093e0 <wizchip_setnetinfo+0x134>)
 80093b6:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	7cda      	ldrb	r2, [r3, #19]
 80093bc:	4b08      	ldr	r3, [pc, #32]	; (80093e0 <wizchip_setnetinfo+0x134>)
 80093be:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	7d1a      	ldrb	r2, [r3, #20]
 80093c4:	4b06      	ldr	r3, [pc, #24]	; (80093e0 <wizchip_setnetinfo+0x134>)
 80093c6:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	7d5a      	ldrb	r2, [r3, #21]
 80093cc:	4b04      	ldr	r3, [pc, #16]	; (80093e0 <wizchip_setnetinfo+0x134>)
 80093ce:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	7d9a      	ldrb	r2, [r3, #22]
 80093d4:	4b03      	ldr	r3, [pc, #12]	; (80093e4 <wizchip_setnetinfo+0x138>)
 80093d6:	701a      	strb	r2, [r3, #0]
}
 80093d8:	bf00      	nop
 80093da:	3708      	adds	r7, #8
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	200014e0 	.word	0x200014e0
 80093e4:	200014e4 	.word	0x200014e4

080093e8 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80093f0:	2008      	movs	r0, #8
 80093f2:	f7ff fa53 	bl	800889c <WIZCHIP_READ>
 80093f6:	4603      	mov	r3, r0
 80093f8:	0a1b      	lsrs	r3, r3, #8
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	b2da      	uxtb	r2, r3
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	701a      	strb	r2, [r3, #0]
 8009402:	2008      	movs	r0, #8
 8009404:	f7ff fa4a 	bl	800889c <WIZCHIP_READ>
 8009408:	4603      	mov	r3, r0
 800940a:	b2da      	uxtb	r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	705a      	strb	r2, [r3, #1]
 8009410:	200a      	movs	r0, #10
 8009412:	f7ff fa43 	bl	800889c <WIZCHIP_READ>
 8009416:	4603      	mov	r3, r0
 8009418:	0a1b      	lsrs	r3, r3, #8
 800941a:	b29b      	uxth	r3, r3
 800941c:	b2da      	uxtb	r2, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	709a      	strb	r2, [r3, #2]
 8009422:	200a      	movs	r0, #10
 8009424:	f7ff fa3a 	bl	800889c <WIZCHIP_READ>
 8009428:	4603      	mov	r3, r0
 800942a:	b2da      	uxtb	r2, r3
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	70da      	strb	r2, [r3, #3]
 8009430:	200c      	movs	r0, #12
 8009432:	f7ff fa33 	bl	800889c <WIZCHIP_READ>
 8009436:	4603      	mov	r3, r0
 8009438:	0a1b      	lsrs	r3, r3, #8
 800943a:	b29b      	uxth	r3, r3
 800943c:	b2da      	uxtb	r2, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	711a      	strb	r2, [r3, #4]
 8009442:	200c      	movs	r0, #12
 8009444:	f7ff fa2a 	bl	800889c <WIZCHIP_READ>
 8009448:	4603      	mov	r3, r0
 800944a:	b2da      	uxtb	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	715a      	strb	r2, [r3, #5]
   getGAR(pnetinfo->gw);
 8009450:	2010      	movs	r0, #16
 8009452:	f7ff fa23 	bl	800889c <WIZCHIP_READ>
 8009456:	4603      	mov	r3, r0
 8009458:	0a1b      	lsrs	r3, r3, #8
 800945a:	b29b      	uxth	r3, r3
 800945c:	b2da      	uxtb	r2, r3
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	739a      	strb	r2, [r3, #14]
 8009462:	2010      	movs	r0, #16
 8009464:	f7ff fa1a 	bl	800889c <WIZCHIP_READ>
 8009468:	4603      	mov	r3, r0
 800946a:	b2da      	uxtb	r2, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	73da      	strb	r2, [r3, #15]
 8009470:	2012      	movs	r0, #18
 8009472:	f7ff fa13 	bl	800889c <WIZCHIP_READ>
 8009476:	4603      	mov	r3, r0
 8009478:	0a1b      	lsrs	r3, r3, #8
 800947a:	b29b      	uxth	r3, r3
 800947c:	b2da      	uxtb	r2, r3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	741a      	strb	r2, [r3, #16]
 8009482:	2012      	movs	r0, #18
 8009484:	f7ff fa0a 	bl	800889c <WIZCHIP_READ>
 8009488:	4603      	mov	r3, r0
 800948a:	b2da      	uxtb	r2, r3
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	745a      	strb	r2, [r3, #17]
   getSUBR(pnetinfo->sn);
 8009490:	2014      	movs	r0, #20
 8009492:	f7ff fa03 	bl	800889c <WIZCHIP_READ>
 8009496:	4603      	mov	r3, r0
 8009498:	0a1b      	lsrs	r3, r3, #8
 800949a:	b29b      	uxth	r3, r3
 800949c:	b2da      	uxtb	r2, r3
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	729a      	strb	r2, [r3, #10]
 80094a2:	2014      	movs	r0, #20
 80094a4:	f7ff f9fa 	bl	800889c <WIZCHIP_READ>
 80094a8:	4603      	mov	r3, r0
 80094aa:	b2da      	uxtb	r2, r3
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	72da      	strb	r2, [r3, #11]
 80094b0:	2016      	movs	r0, #22
 80094b2:	f7ff f9f3 	bl	800889c <WIZCHIP_READ>
 80094b6:	4603      	mov	r3, r0
 80094b8:	0a1b      	lsrs	r3, r3, #8
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	b2da      	uxtb	r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	731a      	strb	r2, [r3, #12]
 80094c2:	2016      	movs	r0, #22
 80094c4:	f7ff f9ea 	bl	800889c <WIZCHIP_READ>
 80094c8:	4603      	mov	r3, r0
 80094ca:	b2da      	uxtb	r2, r3
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	735a      	strb	r2, [r3, #13]
   getSIPR(pnetinfo->ip);
 80094d0:	2018      	movs	r0, #24
 80094d2:	f7ff f9e3 	bl	800889c <WIZCHIP_READ>
 80094d6:	4603      	mov	r3, r0
 80094d8:	0a1b      	lsrs	r3, r3, #8
 80094da:	b29b      	uxth	r3, r3
 80094dc:	b2da      	uxtb	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	719a      	strb	r2, [r3, #6]
 80094e2:	2018      	movs	r0, #24
 80094e4:	f7ff f9da 	bl	800889c <WIZCHIP_READ>
 80094e8:	4603      	mov	r3, r0
 80094ea:	b2da      	uxtb	r2, r3
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	71da      	strb	r2, [r3, #7]
 80094f0:	201a      	movs	r0, #26
 80094f2:	f7ff f9d3 	bl	800889c <WIZCHIP_READ>
 80094f6:	4603      	mov	r3, r0
 80094f8:	0a1b      	lsrs	r3, r3, #8
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	b2da      	uxtb	r2, r3
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	721a      	strb	r2, [r3, #8]
 8009502:	201a      	movs	r0, #26
 8009504:	f7ff f9ca 	bl	800889c <WIZCHIP_READ>
 8009508:	4603      	mov	r3, r0
 800950a:	b2da      	uxtb	r2, r3
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	725a      	strb	r2, [r3, #9]
   pnetinfo->dns[0]= _DNS_[0];
 8009510:	4b0b      	ldr	r3, [pc, #44]	; (8009540 <wizchip_getnetinfo+0x158>)
 8009512:	781a      	ldrb	r2, [r3, #0]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8009518:	4b09      	ldr	r3, [pc, #36]	; (8009540 <wizchip_getnetinfo+0x158>)
 800951a:	785a      	ldrb	r2, [r3, #1]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8009520:	4b07      	ldr	r3, [pc, #28]	; (8009540 <wizchip_getnetinfo+0x158>)
 8009522:	789a      	ldrb	r2, [r3, #2]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8009528:	4b05      	ldr	r3, [pc, #20]	; (8009540 <wizchip_getnetinfo+0x158>)
 800952a:	78da      	ldrb	r2, [r3, #3]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8009530:	4b04      	ldr	r3, [pc, #16]	; (8009544 <wizchip_getnetinfo+0x15c>)
 8009532:	781a      	ldrb	r2, [r3, #0]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	759a      	strb	r2, [r3, #22]
}
 8009538:	bf00      	nop
 800953a:	3708      	adds	r7, #8
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	200014e0 	.word	0x200014e0
 8009544:	200014e4 	.word	0x200014e4

08009548 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	4603      	mov	r3, r0
 8009550:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8009552:	2300      	movs	r3, #0
 8009554:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
 8009556:	79fb      	ldrb	r3, [r7, #7]
 8009558:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800955c:	2b00      	cmp	r3, #0
 800955e:	d002      	beq.n	8009566 <wizchip_setnetmode+0x1e>
 8009560:	f04f 33ff 	mov.w	r3, #4294967295
 8009564:	e00f      	b.n	8009586 <wizchip_setnetmode+0x3e>
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
#endif      
   tmp = getMR();
 8009566:	2000      	movs	r0, #0
 8009568:	f7ff f998 	bl	800889c <WIZCHIP_READ>
 800956c:	4603      	mov	r3, r0
 800956e:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8009570:	7bfa      	ldrb	r2, [r7, #15]
 8009572:	79fb      	ldrb	r3, [r7, #7]
 8009574:	4313      	orrs	r3, r2
 8009576:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8009578:	7bfb      	ldrb	r3, [r7, #15]
 800957a:	b29b      	uxth	r3, r3
 800957c:	4619      	mov	r1, r3
 800957e:	2000      	movs	r0, #0
 8009580:	f7ff f96e 	bl	8008860 <WIZCHIP_WRITE>
   return 0;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8009592:	2000      	movs	r0, #0
 8009594:	f7ff f982 	bl	800889c <WIZCHIP_READ>
 8009598:	4603      	mov	r3, r0
 800959a:	b2db      	uxtb	r3, r3
}
 800959c:	4618      	mov	r0, r3
 800959e:	bd80      	pop	{r7, pc}

080095a0 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	4619      	mov	r1, r3
 80095b0:	201e      	movs	r0, #30
 80095b2:	f7ff f955 	bl	8008860 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	885b      	ldrh	r3, [r3, #2]
 80095ba:	4619      	mov	r1, r3
 80095bc:	201c      	movs	r0, #28
 80095be:	f7ff f94f 	bl	8008860 <WIZCHIP_WRITE>
}
 80095c2:	bf00      	nop
 80095c4:	3708      	adds	r7, #8
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b082      	sub	sp, #8
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 80095d2:	201e      	movs	r0, #30
 80095d4:	f7ff f962 	bl	800889c <WIZCHIP_READ>
 80095d8:	4603      	mov	r3, r0
 80095da:	b2da      	uxtb	r2, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 80095e0:	201c      	movs	r0, #28
 80095e2:	f7ff f95b 	bl	800889c <WIZCHIP_READ>
 80095e6:	4603      	mov	r3, r0
 80095e8:	461a      	mov	r2, r3
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	805a      	strh	r2, [r3, #2]
}
 80095ee:	bf00      	nop
 80095f0:	3708      	adds	r7, #8
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <NewMessageData>:
 * Contributors:
 *    Allan Stockdill-Mander/Ian Craggs - initial API and implementation and/or initial documentation
 *******************************************************************************/
#include "MQTTClient.h"

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 80095f6:	b480      	push	{r7}
 80095f8:	b085      	sub	sp, #20
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	60f8      	str	r0, [r7, #12]
 80095fe:	60b9      	str	r1, [r7, #8]
 8009600:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	68ba      	ldr	r2, [r7, #8]
 8009606:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	601a      	str	r2, [r3, #0]
}
 800960e:	bf00      	nop
 8009610:	3714      	adds	r7, #20
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr

0800961a <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 800961a:	b480      	push	{r7}
 800961c:	b083      	sub	sp, #12
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800962a:	4293      	cmp	r3, r2
 800962c:	d003      	beq.n	8009636 <getNextPacketId+0x1c>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	3301      	adds	r3, #1
 8009634:	e000      	b.n	8009638 <getNextPacketId+0x1e>
 8009636:	2301      	movs	r3, #1
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	6013      	str	r3, [r2, #0]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
}
 8009640:	4618      	mov	r0, r3
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 800964c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800964e:	b087      	sub	sp, #28
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 8009658:	f04f 33ff 	mov.w	r3, #4294967295
 800965c:	617b      	str	r3, [r7, #20]
        sent = 0;
 800965e:	2300      	movs	r3, #0
 8009660:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 8009662:	e018      	b.n	8009696 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009668:	689c      	ldr	r4, [r3, #8]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	691a      	ldr	r2, [r3, #16]
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	18d6      	adds	r6, r2, r3
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 fda6 	bl	800a1c8 <TimerLeftMS>
 800967c:	4603      	mov	r3, r0
 800967e:	68ba      	ldr	r2, [r7, #8]
 8009680:	4631      	mov	r1, r6
 8009682:	4628      	mov	r0, r5
 8009684:	47a0      	blx	r4
 8009686:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	2b00      	cmp	r3, #0
 800968c:	db0e      	blt.n	80096ac <sendPacket+0x60>
            break;
        sent += rc;
 800968e:	693a      	ldr	r2, [r7, #16]
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	4413      	add	r3, r2
 8009694:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 8009696:	693a      	ldr	r2, [r7, #16]
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	429a      	cmp	r2, r3
 800969c:	da07      	bge.n	80096ae <sendPacket+0x62>
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 fd50 	bl	800a144 <TimerIsExpired>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d0dc      	beq.n	8009664 <sendPacket+0x18>
 80096aa:	e000      	b.n	80096ae <sendPacket+0x62>
            break;
 80096ac:	bf00      	nop
    }
    if (sent == length)
 80096ae:	693a      	ldr	r2, [r7, #16]
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d10b      	bne.n	80096ce <sendPacket+0x82>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	699b      	ldr	r3, [r3, #24]
 80096c0:	4619      	mov	r1, r3
 80096c2:	4610      	mov	r0, r2
 80096c4:	f000 fd68 	bl	800a198 <TimerCountdown>
        rc = SUCCESSS;
 80096c8:	2300      	movs	r3, #0
 80096ca:	617b      	str	r3, [r7, #20]
 80096cc:	e002      	b.n	80096d4 <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 80096ce:	f04f 33ff 	mov.w	r3, #4294967295
 80096d2:	617b      	str	r3, [r7, #20]
    return rc;
 80096d4:	697b      	ldr	r3, [r7, #20]
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	371c      	adds	r7, #28
 80096da:	46bd      	mov	sp, r7
 80096dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080096de <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b086      	sub	sp, #24
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	60f8      	str	r0, [r7, #12]
 80096e6:	60b9      	str	r1, [r7, #8]
 80096e8:	607a      	str	r2, [r7, #4]
 80096ea:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	68ba      	ldr	r2, [r7, #8]
 80096f0:	651a      	str	r2, [r3, #80]	; 0x50

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80096f2:	2300      	movs	r3, #0
 80096f4:	617b      	str	r3, [r7, #20]
 80096f6:	e009      	b.n	800970c <MQTTClientInit+0x2e>
        c->messageHandlers[i].topicFilter = 0;
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	3304      	adds	r3, #4
 80096fe:	00db      	lsls	r3, r3, #3
 8009700:	4413      	add	r3, r2
 8009702:	2200      	movs	r2, #0
 8009704:	605a      	str	r2, [r3, #4]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	3301      	adds	r3, #1
 800970a:	617b      	str	r3, [r7, #20]
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	2b04      	cmp	r3, #4
 8009710:	ddf2      	ble.n	80096f8 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	683a      	ldr	r2, [r7, #0]
 800971c:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	6a3a      	ldr	r2, [r7, #32]
 8009722:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009728:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800972e:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2200      	movs	r2, #0
 8009734:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2200      	movs	r2, #0
 800973a:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2200      	movs	r2, #0
 8009740:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2201      	movs	r2, #1
 8009746:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	3354      	adds	r3, #84	; 0x54
 800974c:	4618      	mov	r0, r3
 800974e:	f000 fceb 	bl	800a128 <TimerInit>
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
 8009752:	bf00      	nop
 8009754:	3718      	adds	r7, #24
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 800975a:	b590      	push	{r4, r7, lr}
 800975c:	b08b      	sub	sp, #44	; 0x2c
 800975e:	af00      	add	r7, sp, #0
 8009760:	60f8      	str	r0, [r7, #12]
 8009762:	60b9      	str	r1, [r7, #8]
 8009764:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 8009766:	2301      	movs	r3, #1
 8009768:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 800976a:	2300      	movs	r3, #0
 800976c:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 800976e:	2304      	movs	r3, #4
 8009770:	61fb      	str	r3, [r7, #28]

    *value = 0;
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	2200      	movs	r2, #0
 8009776:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 8009778:	f04f 33ff 	mov.w	r3, #4294967295
 800977c:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800977e:	6a3b      	ldr	r3, [r7, #32]
 8009780:	3301      	adds	r3, #1
 8009782:	623b      	str	r3, [r7, #32]
 8009784:	6a3a      	ldr	r2, [r7, #32]
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	429a      	cmp	r2, r3
 800978a:	dd03      	ble.n	8009794 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 800978c:	f04f 33ff 	mov.w	r3, #4294967295
 8009790:	61bb      	str	r3, [r7, #24]
            goto exit;
 8009792:	e021      	b.n	80097d8 <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009798:	685c      	ldr	r4, [r3, #4]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800979e:	f107 0117 	add.w	r1, r7, #23
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2201      	movs	r2, #1
 80097a6:	47a0      	blx	r4
 80097a8:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 80097aa:	69bb      	ldr	r3, [r7, #24]
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d112      	bne.n	80097d6 <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	7dfb      	ldrb	r3, [r7, #23]
 80097b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80097bc:	fb01 f303 	mul.w	r3, r1, r3
 80097c0:	441a      	add	r2, r3
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 80097c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c8:	01db      	lsls	r3, r3, #7
 80097ca:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 80097cc:	7dfb      	ldrb	r3, [r7, #23]
 80097ce:	b25b      	sxtb	r3, r3
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	dbd1      	blt.n	8009778 <decodePacket+0x1e>
exit:
 80097d4:	e000      	b.n	80097d8 <decodePacket+0x7e>
            goto exit;
 80097d6:	bf00      	nop
    return len;
 80097d8:	6a3b      	ldr	r3, [r7, #32]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	372c      	adds	r7, #44	; 0x2c
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd90      	pop	{r4, r7, pc}

080097e2 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 80097e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097e4:	b089      	sub	sp, #36	; 0x24
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	60f8      	str	r0, [r7, #12]
 80097ea:	60b9      	str	r1, [r7, #8]
    int rc = FAILURE;
 80097ec:	f04f 33ff 	mov.w	r3, #4294967295
 80097f0:	61fb      	str	r3, [r7, #28]
    MQTTHeader header = {0};
 80097f2:	2300      	movs	r3, #0
 80097f4:	617b      	str	r3, [r7, #20]
    int len = 0;
 80097f6:	2300      	movs	r3, #0
 80097f8:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 80097fa:	2300      	movs	r3, #0
 80097fc:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009802:	685c      	ldr	r4, [r3, #4]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	695e      	ldr	r6, [r3, #20]
 800980c:	68b8      	ldr	r0, [r7, #8]
 800980e:	f000 fcdb 	bl	800a1c8 <TimerLeftMS>
 8009812:	4603      	mov	r3, r0
 8009814:	2201      	movs	r2, #1
 8009816:	4631      	mov	r1, r6
 8009818:	4628      	mov	r0, r5
 800981a:	47a0      	blx	r4
 800981c:	4603      	mov	r3, r0
 800981e:	2b01      	cmp	r3, #1
 8009820:	d13b      	bne.n	800989a <readPacket+0xb8>
        goto exit;

    len = 1;
 8009822:	2301      	movs	r3, #1
 8009824:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 8009826:	68b8      	ldr	r0, [r7, #8]
 8009828:	f000 fcce 	bl	800a1c8 <TimerLeftMS>
 800982c:	4602      	mov	r2, r0
 800982e:	f107 0310 	add.w	r3, r7, #16
 8009832:	4619      	mov	r1, r3
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f7ff ff90 	bl	800975a <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	695b      	ldr	r3, [r3, #20]
 800983e:	3301      	adds	r3, #1
 8009840:	693a      	ldr	r2, [r7, #16]
 8009842:	4611      	mov	r1, r2
 8009844:	4618      	mov	r0, r3
 8009846:	f001 f822 	bl	800a88e <MQTTPacket_encode>
 800984a:	4602      	mov	r2, r0
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	4413      	add	r3, r2
 8009850:	61bb      	str	r3, [r7, #24]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	2b00      	cmp	r3, #0
 8009856:	dd16      	ble.n	8009886 <readPacket+0xa4>
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800985c:	685c      	ldr	r4, [r3, #4]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	695a      	ldr	r2, [r3, #20]
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	18d6      	adds	r6, r2, r3
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	607b      	str	r3, [r7, #4]
 800986e:	68b8      	ldr	r0, [r7, #8]
 8009870:	f000 fcaa 	bl	800a1c8 <TimerLeftMS>
 8009874:	4603      	mov	r3, r0
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	4631      	mov	r1, r6
 800987a:	4628      	mov	r0, r5
 800987c:	47a0      	blx	r4
 800987e:	4602      	mov	r2, r0
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	429a      	cmp	r2, r3
 8009884:	d10b      	bne.n	800989e <readPacket+0xbc>
        goto exit;

    header.byte = c->readbuf[0];
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	695b      	ldr	r3, [r3, #20]
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 800988e:	7d3b      	ldrb	r3, [r7, #20]
 8009890:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009894:	b2db      	uxtb	r3, r3
 8009896:	61fb      	str	r3, [r7, #28]
 8009898:	e002      	b.n	80098a0 <readPacket+0xbe>
        goto exit;
 800989a:	bf00      	nop
 800989c:	e000      	b.n	80098a0 <readPacket+0xbe>
        goto exit;
 800989e:	bf00      	nop
exit:
    return rc;
 80098a0:	69fb      	ldr	r3, [r7, #28]
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3724      	adds	r7, #36	; 0x24
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080098aa <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 80098aa:	b480      	push	{r7}
 80098ac:	b087      	sub	sp, #28
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
 80098b2:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	461a      	mov	r2, r3
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	4413      	add	r3, r2
 80098c8:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 80098ca:	e039      	b.n	8009940 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	2b2f      	cmp	r3, #47	; 0x2f
 80098d2:	d103      	bne.n	80098dc <isTopicMatched+0x32>
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	2b2f      	cmp	r3, #47	; 0x2f
 80098da:	d13a      	bne.n	8009952 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	2b2b      	cmp	r3, #43	; 0x2b
 80098e2:	d009      	beq.n	80098f8 <isTopicMatched+0x4e>
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	2b23      	cmp	r3, #35	; 0x23
 80098ea:	d005      	beq.n	80098f8 <isTopicMatched+0x4e>
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	781a      	ldrb	r2, [r3, #0]
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d12e      	bne.n	8009956 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	2b2b      	cmp	r3, #43	; 0x2b
 80098fe:	d112      	bne.n	8009926 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	3301      	adds	r3, #1
 8009904:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8009906:	e005      	b.n	8009914 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	3301      	adds	r3, #1
 800990c:	613b      	str	r3, [r7, #16]
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	3301      	adds	r3, #1
 8009912:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	429a      	cmp	r2, r3
 800991a:	d20b      	bcs.n	8009934 <isTopicMatched+0x8a>
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	2b2f      	cmp	r3, #47	; 0x2f
 8009922:	d1f1      	bne.n	8009908 <isTopicMatched+0x5e>
 8009924:	e006      	b.n	8009934 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	2b23      	cmp	r3, #35	; 0x23
 800992c:	d102      	bne.n	8009934 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	3b01      	subs	r3, #1
 8009932:	613b      	str	r3, [r7, #16]
        curf++;
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	3301      	adds	r3, #1
 8009938:	617b      	str	r3, [r7, #20]
        curn++;
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	3301      	adds	r3, #1
 800993e:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d007      	beq.n	8009958 <isTopicMatched+0xae>
 8009948:	693a      	ldr	r2, [r7, #16]
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	429a      	cmp	r2, r3
 800994e:	d3bd      	bcc.n	80098cc <isTopicMatched+0x22>
 8009950:	e002      	b.n	8009958 <isTopicMatched+0xae>
            break;
 8009952:	bf00      	nop
 8009954:	e000      	b.n	8009958 <isTopicMatched+0xae>
            break;
 8009956:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 8009958:	693a      	ldr	r2, [r7, #16]
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	429a      	cmp	r2, r3
 800995e:	d105      	bne.n	800996c <isTopicMatched+0xc2>
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d101      	bne.n	800996c <isTopicMatched+0xc2>
 8009968:	2301      	movs	r3, #1
 800996a:	e000      	b.n	800996e <isTopicMatched+0xc4>
 800996c:	2300      	movs	r3, #0
 800996e:	b2db      	uxtb	r3, r3
}
 8009970:	4618      	mov	r0, r3
 8009972:	371c      	adds	r7, #28
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b08a      	sub	sp, #40	; 0x28
 8009980:	af00      	add	r7, sp, #0
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	60b9      	str	r1, [r7, #8]
 8009986:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 8009988:	f04f 33ff 	mov.w	r3, #4294967295
 800998c:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800998e:	2300      	movs	r3, #0
 8009990:	627b      	str	r3, [r7, #36]	; 0x24
 8009992:	e03f      	b.n	8009a14 <deliverMessage+0x98>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009998:	3304      	adds	r3, #4
 800999a:	00db      	lsls	r3, r3, #3
 800999c:	4413      	add	r3, r2
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d034      	beq.n	8009a0e <deliverMessage+0x92>
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a8:	3304      	adds	r3, #4
 80099aa:	00db      	lsls	r3, r3, #3
 80099ac:	4413      	add	r3, r2
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	4619      	mov	r1, r3
 80099b2:	68b8      	ldr	r0, [r7, #8]
 80099b4:	f001 f93a 	bl	800ac2c <MQTTPacket_equals>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d10c      	bne.n	80099d8 <deliverMessage+0x5c>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 80099be:	68fa      	ldr	r2, [r7, #12]
 80099c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c2:	3304      	adds	r3, #4
 80099c4:	00db      	lsls	r3, r3, #3
 80099c6:	4413      	add	r3, r2
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	68b9      	ldr	r1, [r7, #8]
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7ff ff6c 	bl	80098aa <isTopicMatched>
 80099d2:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d01a      	beq.n	8009a0e <deliverMessage+0x92>
        {
            if (c->messageHandlers[i].fp != NULL)
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099dc:	3304      	adds	r3, #4
 80099de:	00db      	lsls	r3, r3, #3
 80099e0:	4413      	add	r3, r2
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d012      	beq.n	8009a0e <deliverMessage+0x92>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 80099e8:	f107 0318 	add.w	r3, r7, #24
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	68b9      	ldr	r1, [r7, #8]
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7ff fe00 	bl	80095f6 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 80099f6:	68fa      	ldr	r2, [r7, #12]
 80099f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fa:	3304      	adds	r3, #4
 80099fc:	00db      	lsls	r3, r3, #3
 80099fe:	4413      	add	r3, r2
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	f107 0218 	add.w	r2, r7, #24
 8009a06:	4610      	mov	r0, r2
 8009a08:	4798      	blx	r3
                rc = SUCCESSS;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8009a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a10:	3301      	adds	r3, #1
 8009a12:	627b      	str	r3, [r7, #36]	; 0x24
 8009a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a16:	2b04      	cmp	r3, #4
 8009a18:	ddbc      	ble.n	8009994 <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 8009a1a:	6a3b      	ldr	r3, [r7, #32]
 8009a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a20:	d112      	bne.n	8009a48 <deliverMessage+0xcc>
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00e      	beq.n	8009a48 <deliverMessage+0xcc>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 8009a2a:	f107 0310 	add.w	r3, r7, #16
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	68b9      	ldr	r1, [r7, #8]
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7ff fddf 	bl	80095f6 <NewMessageData>
        c->defaultMessageHandler(&md);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a3c:	f107 0210 	add.w	r2, r7, #16
 8009a40:	4610      	mov	r0, r2
 8009a42:	4798      	blx	r3
        rc = SUCCESSS;
 8009a44:	2300      	movs	r3, #0
 8009a46:	623b      	str	r3, [r7, #32]
    }

    return rc;
 8009a48:	6a3b      	ldr	r3, [r7, #32]
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3728      	adds	r7, #40	; 0x28
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <keepalive>:


int keepalive(MQTTClient* c)
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b086      	sub	sp, #24
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 8009a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a5e:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	699b      	ldr	r3, [r3, #24]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d102      	bne.n	8009a6e <keepalive+0x1c>
    {
        rc = SUCCESSS;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	617b      	str	r3, [r7, #20]
        goto exit;
 8009a6c:	e033      	b.n	8009ad6 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	3354      	adds	r3, #84	; 0x54
 8009a72:	4618      	mov	r0, r3
 8009a74:	f000 fb66 	bl	800a144 <TimerIsExpired>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d02a      	beq.n	8009ad4 <keepalive+0x82>
    {
        if (!c->ping_outstanding)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	7f1b      	ldrb	r3, [r3, #28]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d126      	bne.n	8009ad4 <keepalive+0x82>
        {
            Timer timer;
            TimerInit(&timer);
 8009a86:	f107 0308 	add.w	r3, r7, #8
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f000 fb4c 	bl	800a128 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 8009a90:	f107 0308 	add.w	r3, r7, #8
 8009a94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f000 fb69 	bl	800a170 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	691a      	ldr	r2, [r3, #16]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	4610      	mov	r0, r2
 8009aaa:	f000 fe24 	bl	800a6f6 <MQTTSerialize_pingreq>
 8009aae:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESSS) // send the ping packet
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	dd0f      	ble.n	8009ad6 <keepalive+0x84>
 8009ab6:	f107 0308 	add.w	r3, r7, #8
 8009aba:	461a      	mov	r2, r3
 8009abc:	6939      	ldr	r1, [r7, #16]
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f7ff fdc4 	bl	800964c <sendPacket>
 8009ac4:	6178      	str	r0, [r7, #20]
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d104      	bne.n	8009ad6 <keepalive+0x84>
                c->ping_outstanding = 1;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	771a      	strb	r2, [r3, #28]
 8009ad2:	e000      	b.n	8009ad6 <keepalive+0x84>
        }
    }

exit:
 8009ad4:	bf00      	nop
    return rc;
 8009ad6:	697b      	ldr	r3, [r7, #20]
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3718      	adds	r7, #24
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 8009ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ae2:	b095      	sub	sp, #84	; 0x54
 8009ae4:	af06      	add	r7, sp, #24
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
 8009aea:	6839      	ldr	r1, [r7, #0]
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f7ff fe78 	bl	80097e2 <readPacket>
 8009af2:	4603      	mov	r3, r0
 8009af4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    int len = 0,
 8009af6:	2300      	movs	r3, #0
 8009af8:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESSS;
 8009afa:	2300      	movs	r3, #0
 8009afc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
 8009afe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009b00:	3b02      	subs	r3, #2
 8009b02:	2b0b      	cmp	r3, #11
 8009b04:	f200 80c0 	bhi.w	8009c88 <cycle+0x1a8>
 8009b08:	a201      	add	r2, pc, #4	; (adr r2, 8009b10 <cycle+0x30>)
 8009b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b0e:	bf00      	nop
 8009b10:	08009c89 	.word	0x08009c89
 8009b14:	08009b41 	.word	0x08009b41
 8009b18:	08009c89 	.word	0x08009c89
 8009b1c:	08009c09 	.word	0x08009c09
 8009b20:	08009c89 	.word	0x08009c89
 8009b24:	08009c89 	.word	0x08009c89
 8009b28:	08009c89 	.word	0x08009c89
 8009b2c:	08009c89 	.word	0x08009c89
 8009b30:	08009c89 	.word	0x08009c89
 8009b34:	08009c89 	.word	0x08009c89
 8009b38:	08009c89 	.word	0x08009c89
 8009b3c:	08009c7b 	.word	0x08009c7b
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8009b48:	4616      	mov	r6, r2
 8009b4a:	f107 0210 	add.w	r2, r7, #16
 8009b4e:	1d15      	adds	r5, r2, #4
 8009b50:	f107 0210 	add.w	r2, r7, #16
 8009b54:	1c54      	adds	r4, r2, #1
 8009b56:	f107 010c 	add.w	r1, r7, #12
 8009b5a:	f107 0210 	add.w	r2, r7, #16
 8009b5e:	1c90      	adds	r0, r2, #2
 8009b60:	9604      	str	r6, [sp, #16]
 8009b62:	9303      	str	r3, [sp, #12]
 8009b64:	f107 0310 	add.w	r3, r7, #16
 8009b68:	330c      	adds	r3, #12
 8009b6a:	9302      	str	r3, [sp, #8]
 8009b6c:	f107 0310 	add.w	r3, r7, #16
 8009b70:	3308      	adds	r3, #8
 8009b72:	9301      	str	r3, [sp, #4]
 8009b74:	f107 0320 	add.w	r3, r7, #32
 8009b78:	9300      	str	r3, [sp, #0]
 8009b7a:	462b      	mov	r3, r5
 8009b7c:	4622      	mov	r2, r4
 8009b7e:	f000 fdc9 	bl	800a714 <MQTTDeserialize_publish>
 8009b82:	4603      	mov	r3, r0
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	f040 8083 	bne.w	8009c90 <cycle+0x1b0>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 8009b90:	f107 0210 	add.w	r2, r7, #16
 8009b94:	f107 0320 	add.w	r3, r7, #32
 8009b98:	4619      	mov	r1, r3
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f7ff feee 	bl	800997c <deliverMessage>
            if (msg.qos != QOS0)
 8009ba0:	7c3b      	ldrb	r3, [r7, #16]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d06d      	beq.n	8009c82 <cycle+0x1a2>
            {
                if (msg.qos == QOS1)
 8009ba6:	7c3b      	ldrb	r3, [r7, #16]
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d10c      	bne.n	8009bc6 <cycle+0xe6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6918      	ldr	r0, [r3, #16]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	8abb      	ldrh	r3, [r7, #20]
 8009bb8:	9300      	str	r3, [sp, #0]
 8009bba:	2300      	movs	r3, #0
 8009bbc:	2204      	movs	r2, #4
 8009bbe:	f001 f902 	bl	800adc6 <MQTTSerialize_ack>
 8009bc2:	6378      	str	r0, [r7, #52]	; 0x34
 8009bc4:	e00e      	b.n	8009be4 <cycle+0x104>
                else if (msg.qos == QOS2)
 8009bc6:	7c3b      	ldrb	r3, [r7, #16]
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	d10b      	bne.n	8009be4 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6918      	ldr	r0, [r3, #16]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	689b      	ldr	r3, [r3, #8]
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	8abb      	ldrh	r3, [r7, #20]
 8009bd8:	9300      	str	r3, [sp, #0]
 8009bda:	2300      	movs	r3, #0
 8009bdc:	2205      	movs	r2, #5
 8009bde:	f001 f8f2 	bl	800adc6 <MQTTSerialize_ack>
 8009be2:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 8009be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	dc03      	bgt.n	8009bf2 <cycle+0x112>
                    rc = FAILURE;
 8009bea:	f04f 33ff 	mov.w	r3, #4294967295
 8009bee:	633b      	str	r3, [r7, #48]	; 0x30
 8009bf0:	e005      	b.n	8009bfe <cycle+0x11e>
                else
                    rc = sendPacket(c, len, timer);
 8009bf2:	683a      	ldr	r2, [r7, #0]
 8009bf4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f7ff fd28 	bl	800964c <sendPacket>
 8009bfc:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 8009bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c04:	d13d      	bne.n	8009c82 <cycle+0x1a2>
                    goto exit; // there was a problem
 8009c06:	e044      	b.n	8009c92 <cycle+0x1b2>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	695c      	ldr	r4, [r3, #20]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	68db      	ldr	r3, [r3, #12]
 8009c10:	f107 020a 	add.w	r2, r7, #10
 8009c14:	f107 0109 	add.w	r1, r7, #9
 8009c18:	f107 0008 	add.w	r0, r7, #8
 8009c1c:	9300      	str	r3, [sp, #0]
 8009c1e:	4623      	mov	r3, r4
 8009c20:	f000 fdea 	bl	800a7f8 <MQTTDeserialize_ack>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d003      	beq.n	8009c32 <cycle+0x152>
                rc = FAILURE;
 8009c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c2e:	633b      	str	r3, [r7, #48]	; 0x30
 8009c30:	e01e      	b.n	8009c70 <cycle+0x190>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6918      	ldr	r0, [r3, #16]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	689b      	ldr	r3, [r3, #8]
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	897b      	ldrh	r3, [r7, #10]
 8009c3e:	9300      	str	r3, [sp, #0]
 8009c40:	2300      	movs	r3, #0
 8009c42:	2206      	movs	r2, #6
 8009c44:	f001 f8bf 	bl	800adc6 <MQTTSerialize_ack>
 8009c48:	6378      	str	r0, [r7, #52]	; 0x34
 8009c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	dc03      	bgt.n	8009c58 <cycle+0x178>
                rc = FAILURE;
 8009c50:	f04f 33ff 	mov.w	r3, #4294967295
 8009c54:	633b      	str	r3, [r7, #48]	; 0x30
 8009c56:	e00b      	b.n	8009c70 <cycle+0x190>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESSS) // send the PUBREL packet
 8009c58:	683a      	ldr	r2, [r7, #0]
 8009c5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f7ff fcf5 	bl	800964c <sendPacket>
 8009c62:	6338      	str	r0, [r7, #48]	; 0x30
 8009c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d002      	beq.n	8009c70 <cycle+0x190>
                rc = FAILURE; // there was a problem
 8009c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c6e:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 8009c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c76:	d106      	bne.n	8009c86 <cycle+0x1a6>
                goto exit; // there was a problem
 8009c78:	e00b      	b.n	8009c92 <cycle+0x1b2>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	771a      	strb	r2, [r3, #28]
            break;
 8009c80:	e002      	b.n	8009c88 <cycle+0x1a8>
            break;
 8009c82:	bf00      	nop
 8009c84:	e000      	b.n	8009c88 <cycle+0x1a8>
            break;
 8009c86:	bf00      	nop
    }
    keepalive(c);
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f7ff fee2 	bl	8009a52 <keepalive>
 8009c8e:	e000      	b.n	8009c92 <cycle+0x1b2>
                goto exit;
 8009c90:	bf00      	nop
exit:
    if (rc == SUCCESSS)
 8009c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d101      	bne.n	8009c9c <cycle+0x1bc>
        rc = packet_type;
 8009c98:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009c9a:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
 8009c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	373c      	adds	r7, #60	; 0x3c
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ca6:	bf00      	nop

08009ca8 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b086      	sub	sp, #24
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
    int rc = SUCCESSS;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 8009cb6:	f107 030c 	add.w	r3, r7, #12
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f000 fa34 	bl	800a128 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 8009cc0:	683a      	ldr	r2, [r7, #0]
 8009cc2:	f107 030c 	add.w	r3, r7, #12
 8009cc6:	4611      	mov	r1, r2
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f000 fa51 	bl	800a170 <TimerCountdownMS>

    if (cycle(c, &timer) == FAILURE)
 8009cce:	f107 030c 	add.w	r3, r7, #12
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f7ff ff03 	bl	8009ae0 <cycle>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ce0:	d102      	bne.n	8009ce8 <MQTTYield+0x40>
    {
        rc = FAILURE;
 8009ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ce6:	617b      	str	r3, [r7, #20]
    }

    return rc;
 8009ce8:	697b      	ldr	r3, [r7, #20]
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3718      	adds	r7, #24
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b086      	sub	sp, #24
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	60f8      	str	r0, [r7, #12]
 8009cfa:	60b9      	str	r1, [r7, #8]
 8009cfc:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8009cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8009d02:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 fa1d 	bl	800a144 <TimerIsExpired>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d109      	bne.n	8009d24 <waitfor+0x32>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);
 8009d10:	6879      	ldr	r1, [r7, #4]
 8009d12:	68f8      	ldr	r0, [r7, #12]
 8009d14:	f7ff fee4 	bl	8009ae0 <cycle>
 8009d18:	6178      	str	r0, [r7, #20]
 8009d1a:	697a      	ldr	r2, [r7, #20]
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	d1f0      	bne.n	8009d04 <waitfor+0x12>
 8009d22:	e000      	b.n	8009d26 <waitfor+0x34>
            break; // we timed out
 8009d24:	bf00      	nop

    return rc;
 8009d26:	697b      	ldr	r3, [r7, #20]
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3718      	adds	r7, #24
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b09e      	sub	sp, #120	; 0x78
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
 8009d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8009d3e:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 8009d40:	4a3d      	ldr	r2, [pc, #244]	; (8009e38 <MQTTConnect+0x108>)
 8009d42:	f107 0310 	add.w	r3, r7, #16
 8009d46:	4611      	mov	r1, r2
 8009d48:	2258      	movs	r2, #88	; 0x58
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f001 ffde 	bl	800bd0c <memcpy>
    int len = 0;
 8009d50:	2300      	movs	r3, #0
 8009d52:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6a1b      	ldr	r3, [r3, #32]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d15d      	bne.n	8009e18 <MQTTConnect+0xe8>
		goto exit;

    TimerInit(&connect_timer);
 8009d5c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009d60:	4618      	mov	r0, r3
 8009d62:	f000 f9e1 	bl	800a128 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	685a      	ldr	r2, [r3, #4]
 8009d6a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009d6e:	4611      	mov	r1, r2
 8009d70:	4618      	mov	r0, r3
 8009d72:	f000 f9fd 	bl	800a170 <TimerCountdownMS>

    if (options == 0)
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d102      	bne.n	8009d82 <MQTTConnect+0x52>
        options = &default_options; /* set default options if none were supplied */
 8009d7c:	f107 0310 	add.w	r3, r7, #16
 8009d80:	603b      	str	r3, [r7, #0]

    c->keepAliveInterval = options->keepAliveInterval;
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	8b1b      	ldrh	r3, [r3, #24]
 8009d86:	461a      	mov	r2, r3
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	699b      	ldr	r3, [r3, #24]
 8009d96:	4619      	mov	r1, r3
 8009d98:	4610      	mov	r0, r2
 8009d9a:	f000 f9fd 	bl	800a198 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6918      	ldr	r0, [r3, #16]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	689b      	ldr	r3, [r3, #8]
 8009da6:	683a      	ldr	r2, [r7, #0]
 8009da8:	4619      	mov	r1, r3
 8009daa:	f000 fb2b 	bl	800a404 <MQTTSerialize_connect>
 8009dae:	6738      	str	r0, [r7, #112]	; 0x70
 8009db0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	dd32      	ble.n	8009e1c <MQTTConnect+0xec>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESSS)  // send the connect packet
 8009db6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009dba:	461a      	mov	r2, r3
 8009dbc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f7ff fc44 	bl	800964c <sendPacket>
 8009dc4:	6778      	str	r0, [r7, #116]	; 0x74
 8009dc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d129      	bne.n	8009e20 <MQTTConnect+0xf0>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 8009dcc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	2102      	movs	r1, #2
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f7ff ff8c 	bl	8009cf2 <waitfor>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b02      	cmp	r3, #2
 8009dde:	d117      	bne.n	8009e10 <MQTTConnect+0xe0>
    {
        unsigned char connack_rc = 255;
 8009de0:	23ff      	movs	r3, #255	; 0xff
 8009de2:	73fb      	strb	r3, [r7, #15]
        unsigned char sessionPresent = 0;
 8009de4:	2300      	movs	r3, #0
 8009de6:	73bb      	strb	r3, [r7, #14]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	695a      	ldr	r2, [r3, #20]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	68db      	ldr	r3, [r3, #12]
 8009df0:	f107 010f 	add.w	r1, r7, #15
 8009df4:	f107 000e 	add.w	r0, r7, #14
 8009df8:	f000 fbf0 	bl	800a5dc <MQTTDeserialize_connack>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d102      	bne.n	8009e08 <MQTTConnect+0xd8>
            rc = connack_rc;
 8009e02:	7bfb      	ldrb	r3, [r7, #15]
 8009e04:	677b      	str	r3, [r7, #116]	; 0x74
 8009e06:	e00c      	b.n	8009e22 <MQTTConnect+0xf2>
        else
            rc = FAILURE;
 8009e08:	f04f 33ff 	mov.w	r3, #4294967295
 8009e0c:	677b      	str	r3, [r7, #116]	; 0x74
 8009e0e:	e008      	b.n	8009e22 <MQTTConnect+0xf2>
    }
    else
        rc = FAILURE;
 8009e10:	f04f 33ff 	mov.w	r3, #4294967295
 8009e14:	677b      	str	r3, [r7, #116]	; 0x74
 8009e16:	e004      	b.n	8009e22 <MQTTConnect+0xf2>
		goto exit;
 8009e18:	bf00      	nop
 8009e1a:	e002      	b.n	8009e22 <MQTTConnect+0xf2>
        goto exit;
 8009e1c:	bf00      	nop
 8009e1e:	e000      	b.n	8009e22 <MQTTConnect+0xf2>
        goto exit; // there was a problem
 8009e20:	bf00      	nop

exit:
    if (rc == SUCCESSS)
 8009e22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d102      	bne.n	8009e2e <MQTTConnect+0xfe>
        c->isconnected = 1;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
 8009e2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3778      	adds	r7, #120	; 0x78
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	0800cb10 	.word	0x0800cb10

08009e3c <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler messageHandler)
{
 8009e3c:	b5b0      	push	{r4, r5, r7, lr}
 8009e3e:	b094      	sub	sp, #80	; 0x50
 8009e40:	af04      	add	r7, sp, #16
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	603b      	str	r3, [r7, #0]
 8009e48:	4613      	mov	r3, r2
 8009e4a:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;
 8009e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e50:	63fb      	str	r3, [r7, #60]	; 0x3c
    Timer timer;
    int len = 0;
 8009e52:	2300      	movs	r3, #0
 8009e54:	637b      	str	r3, [r7, #52]	; 0x34
    MQTTString topic = MQTTString_initializer;
 8009e56:	2300      	movs	r3, #0
 8009e58:	623b      	str	r3, [r7, #32]
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8009e5e:	2300      	movs	r3, #0
 8009e60:	62bb      	str	r3, [r7, #40]	; 0x28
    topic.cstring = (char *)topicFilter;
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	623b      	str	r3, [r7, #32]
    // This was added because enum QoS was previously typed to *int which resulted in HardFault and unaligned integer read.
    // This coping below makes sure the parameter for MQTTSerialize_subscribe is always char no matter what compiler is using for enums
    char charQos = (char)qos;
 8009e66:	79fb      	ldrb	r3, [r7, #7]
 8009e68:	77fb      	strb	r3, [r7, #31]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	6a1b      	ldr	r3, [r3, #32]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	f000 8083 	beq.w	8009f7a <MQTTSubscribe+0x13e>
		goto exit;

    TimerInit(&timer);
 8009e74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f000 f955 	bl	800a128 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	685a      	ldr	r2, [r3, #4]
 8009e82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009e86:	4611      	mov	r1, r2
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f000 f971 	bl	800a170 <TimerCountdownMS>

    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, &charQos);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	691c      	ldr	r4, [r3, #16]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	461d      	mov	r5, r3
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f7ff fbbe 	bl	800961a <getNextPacketId>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	b29a      	uxth	r2, r3
 8009ea2:	f107 031f 	add.w	r3, r7, #31
 8009ea6:	9302      	str	r3, [sp, #8]
 8009ea8:	f107 0320 	add.w	r3, r7, #32
 8009eac:	9301      	str	r3, [sp, #4]
 8009eae:	2301      	movs	r3, #1
 8009eb0:	9300      	str	r3, [sp, #0]
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	4629      	mov	r1, r5
 8009eb8:	4620      	mov	r0, r4
 8009eba:	f001 f800 	bl	800aebe <MQTTSerialize_subscribe>
 8009ebe:	6378      	str	r0, [r7, #52]	; 0x34
    if (len <= 0)
 8009ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	dd5b      	ble.n	8009f7e <MQTTSubscribe+0x142>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 8009ec6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009eca:	461a      	mov	r2, r3
 8009ecc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009ece:	68f8      	ldr	r0, [r7, #12]
 8009ed0:	f7ff fbbc 	bl	800964c <sendPacket>
 8009ed4:	63f8      	str	r0, [r7, #60]	; 0x3c
 8009ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d152      	bne.n	8009f82 <MQTTSubscribe+0x146>
        goto exit;             // there was a problem

    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 8009edc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	2109      	movs	r1, #9
 8009ee4:	68f8      	ldr	r0, [r7, #12]
 8009ee6:	f7ff ff04 	bl	8009cf2 <waitfor>
 8009eea:	4603      	mov	r3, r0
 8009eec:	2b09      	cmp	r3, #9
 8009eee:	d140      	bne.n	8009f72 <MQTTSubscribe+0x136>
    {
        int count = 0, grantedQoS = -1;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	61bb      	str	r3, [r7, #24]
 8009ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ef8:	617b      	str	r3, [r7, #20]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	695b      	ldr	r3, [r3, #20]
 8009efe:	68fa      	ldr	r2, [r7, #12]
 8009f00:	68d2      	ldr	r2, [r2, #12]
 8009f02:	4614      	mov	r4, r2
 8009f04:	f107 0114 	add.w	r1, r7, #20
 8009f08:	f107 0218 	add.w	r2, r7, #24
 8009f0c:	f107 0012 	add.w	r0, r7, #18
 8009f10:	9401      	str	r4, [sp, #4]
 8009f12:	9300      	str	r3, [sp, #0]
 8009f14:	460b      	mov	r3, r1
 8009f16:	2101      	movs	r1, #1
 8009f18:	f001 f84b 	bl	800afb2 <MQTTDeserialize_suback>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d101      	bne.n	8009f26 <MQTTSubscribe+0xea>
            rc = grantedQoS; // 0, 1, 2 or 0x80
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (rc != 0x80)
 8009f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f28:	2b80      	cmp	r3, #128	; 0x80
 8009f2a:	d02b      	beq.n	8009f84 <MQTTSubscribe+0x148>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f30:	e01b      	b.n	8009f6a <MQTTSubscribe+0x12e>
            {
                if (c->messageHandlers[i].topicFilter == 0)
 8009f32:	68fa      	ldr	r2, [r7, #12]
 8009f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f36:	3304      	adds	r3, #4
 8009f38:	00db      	lsls	r3, r3, #3
 8009f3a:	4413      	add	r3, r2
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d110      	bne.n	8009f64 <MQTTSubscribe+0x128>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
 8009f42:	68fa      	ldr	r2, [r7, #12]
 8009f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f46:	3304      	adds	r3, #4
 8009f48:	00db      	lsls	r3, r3, #3
 8009f4a:	4413      	add	r3, r2
 8009f4c:	68ba      	ldr	r2, [r7, #8]
 8009f4e:	605a      	str	r2, [r3, #4]
                    c->messageHandlers[i].fp = messageHandler;
 8009f50:	68fa      	ldr	r2, [r7, #12]
 8009f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f54:	3304      	adds	r3, #4
 8009f56:	00db      	lsls	r3, r3, #3
 8009f58:	4413      	add	r3, r2
 8009f5a:	683a      	ldr	r2, [r7, #0]
 8009f5c:	609a      	str	r2, [r3, #8]
                    rc = 0;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8009f62:	e00f      	b.n	8009f84 <MQTTSubscribe+0x148>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8009f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f66:	3301      	adds	r3, #1
 8009f68:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6c:	2b04      	cmp	r3, #4
 8009f6e:	dde0      	ble.n	8009f32 <MQTTSubscribe+0xf6>
 8009f70:	e008      	b.n	8009f84 <MQTTSubscribe+0x148>
                }
            }
        }
    }
    else
        rc = FAILURE;
 8009f72:	f04f 33ff 	mov.w	r3, #4294967295
 8009f76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f78:	e004      	b.n	8009f84 <MQTTSubscribe+0x148>
		goto exit;
 8009f7a:	bf00      	nop
 8009f7c:	e002      	b.n	8009f84 <MQTTSubscribe+0x148>
        goto exit;
 8009f7e:	bf00      	nop
 8009f80:	e000      	b.n	8009f84 <MQTTSubscribe+0x148>
        goto exit;             // there was a problem
 8009f82:	bf00      	nop

exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 8009f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3740      	adds	r7, #64	; 0x40
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bdb0      	pop	{r4, r5, r7, pc}

08009f8e <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 8009f8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f90:	b097      	sub	sp, #92	; 0x5c
 8009f92:	af08      	add	r7, sp, #32
 8009f94:	60f8      	str	r0, [r7, #12]
 8009f96:	60b9      	str	r1, [r7, #8]
 8009f98:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8009f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f9e:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	61fb      	str	r3, [r7, #28]
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	623b      	str	r3, [r7, #32]
 8009fa8:	2300      	movs	r3, #0
 8009faa:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	61fb      	str	r3, [r7, #28]
    int len = 0;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	6a1b      	ldr	r3, [r3, #32]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	f000 809b 	beq.w	800a0f4 <MQTTPublish+0x166>
		goto exit;

    TimerInit(&timer);
 8009fbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f000 f8b0 	bl	800a128 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	685a      	ldr	r2, [r3, #4]
 8009fcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009fd0:	4611      	mov	r1, r2
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f000 f8cc 	bl	800a170 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d003      	beq.n	8009fe8 <MQTTPublish+0x5a>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	2b02      	cmp	r3, #2
 8009fe6:	d106      	bne.n	8009ff6 <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f7ff fb16 	bl	800961a <getNextPacketId>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	b29a      	uxth	r2, r3
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	691b      	ldr	r3, [r3, #16]
 8009ffa:	603b      	str	r3, [r7, #0]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	469c      	mov	ip, r3
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	469e      	mov	lr, r3
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	785d      	ldrb	r5, [r3, #1]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	689b      	ldr	r3, [r3, #8]
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 800a018:	9206      	str	r2, [sp, #24]
 800a01a:	9305      	str	r3, [sp, #20]
 800a01c:	ac02      	add	r4, sp, #8
 800a01e:	f107 031c 	add.w	r3, r7, #28
 800a022:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a026:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a02a:	9601      	str	r6, [sp, #4]
 800a02c:	9500      	str	r5, [sp, #0]
 800a02e:	4673      	mov	r3, lr
 800a030:	2200      	movs	r2, #0
 800a032:	4661      	mov	r1, ip
 800a034:	6838      	ldr	r0, [r7, #0]
 800a036:	f000 fe50 	bl	800acda <MQTTSerialize_publish>
 800a03a:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 800a03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03e:	2b00      	cmp	r3, #0
 800a040:	dd5a      	ble.n	800a0f8 <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 800a042:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a046:	461a      	mov	r2, r3
 800a048:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a04a:	68f8      	ldr	r0, [r7, #12]
 800a04c:	f7ff fafe 	bl	800964c <sendPacket>
 800a050:	6378      	str	r0, [r7, #52]	; 0x34
 800a052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a054:	2b00      	cmp	r3, #0
 800a056:	d151      	bne.n	800a0fc <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d122      	bne.n	800a0a6 <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 800a060:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a064:	461a      	mov	r2, r3
 800a066:	2104      	movs	r1, #4
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f7ff fe42 	bl	8009cf2 <waitfor>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b04      	cmp	r3, #4
 800a072:	d114      	bne.n	800a09e <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	695c      	ldr	r4, [r3, #20]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	f107 021a 	add.w	r2, r7, #26
 800a080:	f107 0119 	add.w	r1, r7, #25
 800a084:	f107 0018 	add.w	r0, r7, #24
 800a088:	9300      	str	r3, [sp, #0]
 800a08a:	4623      	mov	r3, r4
 800a08c:	f000 fbb4 	bl	800a7f8 <MQTTDeserialize_ack>
 800a090:	4603      	mov	r3, r0
 800a092:	2b01      	cmp	r3, #1
 800a094:	d035      	beq.n	800a102 <MQTTPublish+0x174>
                rc = FAILURE;
 800a096:	f04f 33ff 	mov.w	r3, #4294967295
 800a09a:	637b      	str	r3, [r7, #52]	; 0x34
 800a09c:	e031      	b.n	800a102 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 800a09e:	f04f 33ff 	mov.w	r3, #4294967295
 800a0a2:	637b      	str	r3, [r7, #52]	; 0x34
 800a0a4:	e02d      	b.n	800a102 <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	2b02      	cmp	r3, #2
 800a0ac:	d128      	bne.n	800a100 <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 800a0ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	2107      	movs	r1, #7
 800a0b6:	68f8      	ldr	r0, [r7, #12]
 800a0b8:	f7ff fe1b 	bl	8009cf2 <waitfor>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b07      	cmp	r3, #7
 800a0c0:	d114      	bne.n	800a0ec <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	695c      	ldr	r4, [r3, #20]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	68db      	ldr	r3, [r3, #12]
 800a0ca:	f107 0216 	add.w	r2, r7, #22
 800a0ce:	f107 0115 	add.w	r1, r7, #21
 800a0d2:	f107 0014 	add.w	r0, r7, #20
 800a0d6:	9300      	str	r3, [sp, #0]
 800a0d8:	4623      	mov	r3, r4
 800a0da:	f000 fb8d 	bl	800a7f8 <MQTTDeserialize_ack>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d00e      	beq.n	800a102 <MQTTPublish+0x174>
                rc = FAILURE;
 800a0e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a0e8:	637b      	str	r3, [r7, #52]	; 0x34
 800a0ea:	e00a      	b.n	800a102 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 800a0ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a0f0:	637b      	str	r3, [r7, #52]	; 0x34
 800a0f2:	e006      	b.n	800a102 <MQTTPublish+0x174>
		goto exit;
 800a0f4:	bf00      	nop
 800a0f6:	e004      	b.n	800a102 <MQTTPublish+0x174>
        goto exit;
 800a0f8:	bf00      	nop
 800a0fa:	e002      	b.n	800a102 <MQTTPublish+0x174>
        goto exit; // there was a problem
 800a0fc:	bf00      	nop
 800a0fe:	e000      	b.n	800a102 <MQTTPublish+0x174>
    }

exit:
 800a100:	bf00      	nop
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 800a102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a104:	4618      	mov	r0, r3
 800a106:	373c      	adds	r7, #60	; 0x3c
 800a108:	46bd      	mov	sp, r7
 800a10a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a10c <MilliTimer_Handler>:

/*
 * @brief MQTT MilliTimer handler
 * @note MUST BE register to your system 1m Tick timer handler.
 */
void MilliTimer_Handler(void) {
 800a10c:	b480      	push	{r7}
 800a10e:	af00      	add	r7, sp, #0
	MilliTimer++;
 800a110:	4b04      	ldr	r3, [pc, #16]	; (800a124 <MilliTimer_Handler+0x18>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	3301      	adds	r3, #1
 800a116:	4a03      	ldr	r2, [pc, #12]	; (800a124 <MilliTimer_Handler+0x18>)
 800a118:	6013      	str	r3, [r2, #0]
}
 800a11a:	bf00      	nop
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr
 800a124:	200014e8 	.word	0x200014e8

0800a128 <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2200      	movs	r2, #0
 800a134:	605a      	str	r2, [r3, #4]
}
 800a136:	bf00      	nop
 800a138:	370c      	adds	r7, #12
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr
	...

0800a144 <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 800a144:	b480      	push	{r7}
 800a146:	b085      	sub	sp, #20
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	685a      	ldr	r2, [r3, #4]
 800a150:	4b06      	ldr	r3, [pc, #24]	; (800a16c <TimerIsExpired+0x28>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	1ad3      	subs	r3, r2, r3
 800a156:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	0fdb      	lsrs	r3, r3, #31
 800a15c:	b2db      	uxtb	r3, r3
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3714      	adds	r7, #20
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr
 800a16a:	bf00      	nop
 800a16c:	200014e8 	.word	0x200014e8

0800a170 <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 800a170:	b480      	push	{r7}
 800a172:	b083      	sub	sp, #12
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 800a17a:	4b06      	ldr	r3, [pc, #24]	; (800a194 <TimerCountdownMS+0x24>)
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	441a      	add	r2, r3
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	605a      	str	r2, [r3, #4]
}
 800a186:	bf00      	nop
 800a188:	370c      	adds	r7, #12
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop
 800a194:	200014e8 	.word	0x200014e8

0800a198 <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a1a8:	fb03 f202 	mul.w	r2, r3, r2
 800a1ac:	4b05      	ldr	r3, [pc, #20]	; (800a1c4 <TimerCountdown+0x2c>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	441a      	add	r2, r3
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	605a      	str	r2, [r3, #4]
}
 800a1b6:	bf00      	nop
 800a1b8:	370c      	adds	r7, #12
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr
 800a1c2:	bf00      	nop
 800a1c4:	200014e8 	.word	0x200014e8

0800a1c8 <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 800a1c8:	b480      	push	{r7}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	685a      	ldr	r2, [r3, #4]
 800a1d4:	4b06      	ldr	r3, [pc, #24]	; (800a1f0 <TimerLeftMS+0x28>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	1ad3      	subs	r3, r2, r3
 800a1da:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3714      	adds	r7, #20
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr
 800a1ee:	bf00      	nop
 800a1f0:	200014e8 	.word	0x200014e8

0800a1f4 <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	683a      	ldr	r2, [r7, #0]
 800a202:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	4a07      	ldr	r2, [pc, #28]	; (800a224 <NewNetwork+0x30>)
 800a208:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	4a06      	ldr	r2, [pc, #24]	; (800a228 <NewNetwork+0x34>)
 800a20e:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4a06      	ldr	r2, [pc, #24]	; (800a22c <NewNetwork+0x38>)
 800a214:	60da      	str	r2, [r3, #12]
}
 800a216:	bf00      	nop
 800a218:	370c      	adds	r7, #12
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr
 800a222:	bf00      	nop
 800a224:	0800a231 	.word	0x0800a231
 800a228:	0800a289 	.word	0x0800a289
 800a22c:	0800a2cf 	.word	0x0800a2cf

0800a230 <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	607a      	str	r2, [r7, #4]
 800a23c:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	3308      	adds	r3, #8
 800a244:	019b      	lsls	r3, r3, #6
 800a246:	3308      	adds	r3, #8
 800a248:	4618      	mov	r0, r3
 800a24a:	f7fe fb27 	bl	800889c <WIZCHIP_READ>
 800a24e:	4603      	mov	r3, r0
 800a250:	b2db      	uxtb	r3, r3
 800a252:	2b17      	cmp	r3, #23
 800a254:	d113      	bne.n	800a27e <w5x00_read+0x4e>
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	4618      	mov	r0, r3
 800a25e:	f7fe fc1d 	bl	8008a9c <getSn_RX_RSR>
 800a262:	4603      	mov	r3, r0
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00a      	beq.n	800a27e <w5x00_read+0x4e>
		return recv(n->my_socket, buffer, len);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	b292      	uxth	r2, r2
 800a272:	68b9      	ldr	r1, [r7, #8]
 800a274:	4618      	mov	r0, r3
 800a276:	f7fd ff87 	bl	8008188 <recv>
 800a27a:	4603      	mov	r3, r0
 800a27c:	e000      	b.n	800a280 <w5x00_read+0x50>

	return SOCK_ERROR;
 800a27e:	2300      	movs	r3, #0
}
 800a280:	4618      	mov	r0, r3
 800a282:	3710      	adds	r7, #16
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	60f8      	str	r0, [r7, #12]
 800a290:	60b9      	str	r1, [r7, #8]
 800a292:	607a      	str	r2, [r7, #4]
 800a294:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	3308      	adds	r3, #8
 800a29c:	019b      	lsls	r3, r3, #6
 800a29e:	3308      	adds	r3, #8
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f7fe fafb 	bl	800889c <WIZCHIP_READ>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	2b17      	cmp	r3, #23
 800a2ac:	d10a      	bne.n	800a2c4 <w5x00_write+0x3c>
		return send(n->my_socket, buffer, len);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	b2db      	uxtb	r3, r3
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	b292      	uxth	r2, r2
 800a2b8:	68b9      	ldr	r1, [r7, #8]
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7fd fe68 	bl	8007f90 <send>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	e000      	b.n	800a2c6 <w5x00_write+0x3e>

	return SOCK_ERROR;
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}

0800a2ce <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 800a2ce:	b580      	push	{r7, lr}
 800a2d0:	b082      	sub	sp, #8
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f7fd fde7 	bl	8007eb0 <disconnect>
}
 800a2e2:	bf00      	nop
 800a2e4:	3708      	adds	r7, #8
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}

0800a2ea <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 800a2ea:	b580      	push	{r7, lr}
 800a2ec:	b086      	sub	sp, #24
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	60f8      	str	r0, [r7, #12]
 800a2f2:	60b9      	str	r1, [r7, #8]
 800a2f4:	4613      	mov	r3, r2
 800a2f6:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 800a2f8:	f243 0339 	movw	r3, #12345	; 0x3039
 800a2fc:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	b2d8      	uxtb	r0, r3
 800a304:	8afa      	ldrh	r2, [r7, #22]
 800a306:	2300      	movs	r3, #0
 800a308:	2101      	movs	r1, #1
 800a30a:	f7fd fb1d 	bl	8007948 <socket>
 800a30e:	4603      	mov	r3, r0
 800a310:	461a      	mov	r2, r3
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	429a      	cmp	r2, r3
 800a318:	d001      	beq.n	800a31e <ConnectNetwork+0x34>
		return SOCK_ERROR;
 800a31a:	2300      	movs	r3, #0
 800a31c:	e00d      	b.n	800a33a <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	b2db      	uxtb	r3, r3
 800a324:	88fa      	ldrh	r2, [r7, #6]
 800a326:	68b9      	ldr	r1, [r7, #8]
 800a328:	4618      	mov	r0, r3
 800a32a:	f7fd fce5 	bl	8007cf8 <connect>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b01      	cmp	r3, #1
 800a332:	d001      	beq.n	800a338 <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 800a334:	2300      	movs	r3, #0
 800a336:	e000      	b.n	800a33a <ConnectNetwork+0x50>

	return SOCK_OK;
 800a338:	2301      	movs	r3, #1
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3718      	adds	r7, #24
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}

0800a342 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 800a342:	b590      	push	{r4, r7, lr}
 800a344:	b085      	sub	sp, #20
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
	int len = 0;
 800a34a:	2300      	movs	r3, #0
 800a34c:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	7a1b      	ldrb	r3, [r3, #8]
 800a352:	2b03      	cmp	r3, #3
 800a354:	d102      	bne.n	800a35c <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 800a356:	230c      	movs	r3, #12
 800a358:	60fb      	str	r3, [r7, #12]
 800a35a:	e005      	b.n	800a368 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	7a1b      	ldrb	r3, [r3, #8]
 800a360:	2b04      	cmp	r3, #4
 800a362:	d101      	bne.n	800a368 <MQTTSerialize_connectLength+0x26>
		len = 10;
 800a364:	230a      	movs	r3, #10
 800a366:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	330c      	adds	r3, #12
 800a36c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a370:	f000 fc43 	bl	800abfa <MQTTstrlen>
 800a374:	4603      	mov	r3, r0
 800a376:	3302      	adds	r3, #2
 800a378:	68fa      	ldr	r2, [r7, #12]
 800a37a:	4413      	add	r3, r2
 800a37c:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	7edb      	ldrb	r3, [r3, #27]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d013      	beq.n	800a3ae <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	3324      	adds	r3, #36	; 0x24
 800a38a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a38e:	f000 fc34 	bl	800abfa <MQTTstrlen>
 800a392:	4603      	mov	r3, r0
 800a394:	1c9c      	adds	r4, r3, #2
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	3330      	adds	r3, #48	; 0x30
 800a39a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a39e:	f000 fc2c 	bl	800abfa <MQTTstrlen>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	4423      	add	r3, r4
 800a3a6:	3302      	adds	r3, #2
 800a3a8:	68fa      	ldr	r2, [r7, #12]
 800a3aa:	4413      	add	r3, r2
 800a3ac:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d103      	bne.n	800a3be <MQTTSerialize_connectLength+0x7c>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d00a      	beq.n	800a3d4 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	3340      	adds	r3, #64	; 0x40
 800a3c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a3c6:	f000 fc18 	bl	800abfa <MQTTstrlen>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	3302      	adds	r3, #2
 800a3ce:	68fa      	ldr	r2, [r7, #12]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d103      	bne.n	800a3e4 <MQTTSerialize_connectLength+0xa2>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d00a      	beq.n	800a3fa <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	334c      	adds	r3, #76	; 0x4c
 800a3e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a3ec:	f000 fc05 	bl	800abfa <MQTTstrlen>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	3302      	adds	r3, #2
 800a3f4:	68fa      	ldr	r2, [r7, #12]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3714      	adds	r7, #20
 800a400:	46bd      	mov	sp, r7
 800a402:	bd90      	pop	{r4, r7, pc}

0800a404 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b08a      	sub	sp, #40	; 0x28
 800a408:	af00      	add	r7, sp, #0
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 800a414:	2300      	movs	r3, #0
 800a416:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 800a418:	2300      	movs	r3, #0
 800a41a:	617b      	str	r3, [r7, #20]
	int len = 0;
 800a41c:	2300      	movs	r3, #0
 800a41e:	623b      	str	r3, [r7, #32]
	int rc = -1;
 800a420:	f04f 33ff 	mov.w	r3, #4294967295
 800a424:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f7ff ff8b 	bl	800a342 <MQTTSerialize_connectLength>
 800a42c:	6238      	str	r0, [r7, #32]
 800a42e:	6a38      	ldr	r0, [r7, #32]
 800a430:	f000 fa98 	bl	800a964 <MQTTPacket_len>
 800a434:	4602      	mov	r2, r0
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	4293      	cmp	r3, r2
 800a43a:	da03      	bge.n	800a444 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800a43c:	f06f 0301 	mvn.w	r3, #1
 800a440:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 800a442:	e0c2      	b.n	800a5ca <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 800a444:	2300      	movs	r3, #0
 800a446:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 800a448:	7e3b      	ldrb	r3, [r7, #24]
 800a44a:	2201      	movs	r2, #1
 800a44c:	f362 1307 	bfi	r3, r2, #4, #4
 800a450:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800a452:	7e3a      	ldrb	r2, [r7, #24]
 800a454:	f107 031c 	add.w	r3, r7, #28
 800a458:	4611      	mov	r1, r2
 800a45a:	4618      	mov	r0, r3
 800a45c:	f000 fb11 	bl	800aa82 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 800a460:	69fb      	ldr	r3, [r7, #28]
 800a462:	6a39      	ldr	r1, [r7, #32]
 800a464:	4618      	mov	r0, r3
 800a466:	f000 fa12 	bl	800a88e <MQTTPacket_encode>
 800a46a:	4602      	mov	r2, r0
 800a46c:	69fb      	ldr	r3, [r7, #28]
 800a46e:	4413      	add	r3, r2
 800a470:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	7a1b      	ldrb	r3, [r3, #8]
 800a476:	2b04      	cmp	r3, #4
 800a478:	d10c      	bne.n	800a494 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 800a47a:	f107 031c 	add.w	r3, r7, #28
 800a47e:	4955      	ldr	r1, [pc, #340]	; (800a5d4 <MQTTSerialize_connect+0x1d0>)
 800a480:	4618      	mov	r0, r3
 800a482:	f000 fb3c 	bl	800aafe <writeCString>
		writeChar(&ptr, (char) 4);
 800a486:	f107 031c 	add.w	r3, r7, #28
 800a48a:	2104      	movs	r1, #4
 800a48c:	4618      	mov	r0, r3
 800a48e:	f000 faf8 	bl	800aa82 <writeChar>
 800a492:	e00b      	b.n	800a4ac <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 800a494:	f107 031c 	add.w	r3, r7, #28
 800a498:	494f      	ldr	r1, [pc, #316]	; (800a5d8 <MQTTSerialize_connect+0x1d4>)
 800a49a:	4618      	mov	r0, r3
 800a49c:	f000 fb2f 	bl	800aafe <writeCString>
		writeChar(&ptr, (char) 3);
 800a4a0:	f107 031c 	add.w	r3, r7, #28
 800a4a4:	2103      	movs	r1, #3
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f000 faeb 	bl	800aa82 <writeChar>
	}

	flags.all = 0;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	7e9b      	ldrb	r3, [r3, #26]
 800a4b4:	f003 0301 	and.w	r3, r3, #1
 800a4b8:	b2da      	uxtb	r2, r3
 800a4ba:	7d3b      	ldrb	r3, [r7, #20]
 800a4bc:	f362 0341 	bfi	r3, r2, #1, #1
 800a4c0:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	7edb      	ldrb	r3, [r3, #27]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	bf14      	ite	ne
 800a4ca:	2301      	movne	r3, #1
 800a4cc:	2300      	moveq	r3, #0
 800a4ce:	b2da      	uxtb	r2, r3
 800a4d0:	7d3b      	ldrb	r3, [r7, #20]
 800a4d2:	f362 0382 	bfi	r3, r2, #2, #1
 800a4d6:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 800a4d8:	7d3b      	ldrb	r3, [r7, #20]
 800a4da:	f003 0304 	and.w	r3, r3, #4
 800a4de:	b2db      	uxtb	r3, r3
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d013      	beq.n	800a50c <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4ea:	f003 0303 	and.w	r3, r3, #3
 800a4ee:	b2da      	uxtb	r2, r3
 800a4f0:	7d3b      	ldrb	r3, [r7, #20]
 800a4f2:	f362 03c4 	bfi	r3, r2, #3, #2
 800a4f6:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4fe:	f003 0301 	and.w	r3, r3, #1
 800a502:	b2da      	uxtb	r2, r3
 800a504:	7d3b      	ldrb	r3, [r7, #20]
 800a506:	f362 1345 	bfi	r3, r2, #5, #1
 800a50a:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a510:	2b00      	cmp	r3, #0
 800a512:	d103      	bne.n	800a51c <MQTTSerialize_connect+0x118>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d003      	beq.n	800a524 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 800a51c:	7d3b      	ldrb	r3, [r7, #20]
 800a51e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a522:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d103      	bne.n	800a534 <MQTTSerialize_connect+0x130>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a530:	2b00      	cmp	r3, #0
 800a532:	d003      	beq.n	800a53c <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 800a534:	7d3b      	ldrb	r3, [r7, #20]
 800a536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a53a:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 800a53c:	7d3a      	ldrb	r2, [r7, #20]
 800a53e:	f107 031c 	add.w	r3, r7, #28
 800a542:	4611      	mov	r1, r2
 800a544:	4618      	mov	r0, r3
 800a546:	f000 fa9c 	bl	800aa82 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	8b1b      	ldrh	r3, [r3, #24]
 800a54e:	461a      	mov	r2, r3
 800a550:	f107 031c 	add.w	r3, r7, #28
 800a554:	4611      	mov	r1, r2
 800a556:	4618      	mov	r0, r3
 800a558:	f000 faa8 	bl	800aaac <writeInt>
	writeMQTTString(&ptr, options->clientID);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f107 001c 	add.w	r0, r7, #28
 800a562:	330c      	adds	r3, #12
 800a564:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a566:	f000 fae9 	bl	800ab3c <writeMQTTString>
	if (options->willFlag)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	7edb      	ldrb	r3, [r3, #27]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00d      	beq.n	800a58e <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f107 001c 	add.w	r0, r7, #28
 800a578:	3324      	adds	r3, #36	; 0x24
 800a57a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a57c:	f000 fade 	bl	800ab3c <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f107 001c 	add.w	r0, r7, #28
 800a586:	3330      	adds	r3, #48	; 0x30
 800a588:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a58a:	f000 fad7 	bl	800ab3c <writeMQTTString>
	}
	if (flags.bits.username)
 800a58e:	7d3b      	ldrb	r3, [r7, #20]
 800a590:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a594:	b2db      	uxtb	r3, r3
 800a596:	2b00      	cmp	r3, #0
 800a598:	d006      	beq.n	800a5a8 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f107 001c 	add.w	r0, r7, #28
 800a5a0:	3340      	adds	r3, #64	; 0x40
 800a5a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a5a4:	f000 faca 	bl	800ab3c <writeMQTTString>
	if (flags.bits.password)
 800a5a8:	7d3b      	ldrb	r3, [r7, #20]
 800a5aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d006      	beq.n	800a5c2 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f107 001c 	add.w	r0, r7, #28
 800a5ba:	334c      	adds	r3, #76	; 0x4c
 800a5bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a5be:	f000 fabd 	bl	800ab3c <writeMQTTString>

	rc = ptr - buf;
 800a5c2:	69fa      	ldr	r2, [r7, #28]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	1ad3      	subs	r3, r2, r3
 800a5c8:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3728      	adds	r7, #40	; 0x28
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	0800cb68 	.word	0x0800cb68
 800a5d8:	0800cb70 	.word	0x0800cb70

0800a5dc <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b08a      	sub	sp, #40	; 0x28
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	60b9      	str	r1, [r7, #8]
 800a5e6:	607a      	str	r2, [r7, #4]
 800a5e8:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800a5fe:	f107 0318 	add.w	r3, r7, #24
 800a602:	4618      	mov	r0, r3
 800a604:	f000 fa29 	bl	800aa5a <readChar>
 800a608:	4603      	mov	r3, r0
 800a60a:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 800a60c:	7f3b      	ldrb	r3, [r7, #28]
 800a60e:	f023 030f 	bic.w	r3, r3, #15
 800a612:	b2db      	uxtb	r3, r3
 800a614:	2b20      	cmp	r3, #32
 800a616:	d12e      	bne.n	800a676 <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800a618:	69bb      	ldr	r3, [r7, #24]
 800a61a:	f107 0214 	add.w	r2, r7, #20
 800a61e:	4611      	mov	r1, r2
 800a620:	4618      	mov	r0, r3
 800a622:	f000 f9e9 	bl	800a9f8 <MQTTPacket_decodeBuf>
 800a626:	6278      	str	r0, [r7, #36]	; 0x24
 800a628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a62a:	69bb      	ldr	r3, [r7, #24]
 800a62c:	4413      	add	r3, r2
 800a62e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800a630:	69bb      	ldr	r3, [r7, #24]
 800a632:	697a      	ldr	r2, [r7, #20]
 800a634:	4413      	add	r3, r2
 800a636:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 800a638:	69bb      	ldr	r3, [r7, #24]
 800a63a:	6a3a      	ldr	r2, [r7, #32]
 800a63c:	1ad3      	subs	r3, r2, r3
 800a63e:	2b01      	cmp	r3, #1
 800a640:	dd1b      	ble.n	800a67a <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 800a642:	f107 0318 	add.w	r3, r7, #24
 800a646:	4618      	mov	r0, r3
 800a648:	f000 fa07 	bl	800aa5a <readChar>
 800a64c:	4603      	mov	r3, r0
 800a64e:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 800a650:	7c3b      	ldrb	r3, [r7, #16]
 800a652:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a656:	b2db      	uxtb	r3, r3
 800a658:	461a      	mov	r2, r3
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 800a65e:	f107 0318 	add.w	r3, r7, #24
 800a662:	4618      	mov	r0, r3
 800a664:	f000 f9f9 	bl	800aa5a <readChar>
 800a668:	4603      	mov	r3, r0
 800a66a:	461a      	mov	r2, r3
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	701a      	strb	r2, [r3, #0]

	rc = 1;
 800a670:	2301      	movs	r3, #1
 800a672:	627b      	str	r3, [r7, #36]	; 0x24
 800a674:	e002      	b.n	800a67c <MQTTDeserialize_connack+0xa0>
		goto exit;
 800a676:	bf00      	nop
 800a678:	e000      	b.n	800a67c <MQTTDeserialize_connack+0xa0>
		goto exit;
 800a67a:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800a67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3728      	adds	r7, #40	; 0x28
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b088      	sub	sp, #32
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	60f8      	str	r0, [r7, #12]
 800a68e:	60b9      	str	r1, [r7, #8]
 800a690:	4613      	mov	r3, r2
 800a692:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 800a694:	2300      	movs	r3, #0
 800a696:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 800a698:	f04f 33ff 	mov.w	r3, #4294967295
 800a69c:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	dc03      	bgt.n	800a6b0 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800a6a8:	f06f 0301 	mvn.w	r3, #1
 800a6ac:	61fb      	str	r3, [r7, #28]
		goto exit;
 800a6ae:	e01d      	b.n	800a6ec <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 800a6b4:	79fb      	ldrb	r3, [r7, #7]
 800a6b6:	f003 030f 	and.w	r3, r3, #15
 800a6ba:	b2da      	uxtb	r2, r3
 800a6bc:	7e3b      	ldrb	r3, [r7, #24]
 800a6be:	f362 1307 	bfi	r3, r2, #4, #4
 800a6c2:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800a6c4:	7e3a      	ldrb	r2, [r7, #24]
 800a6c6:	f107 0314 	add.w	r3, r7, #20
 800a6ca:	4611      	mov	r1, r2
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f000 f9d8 	bl	800aa82 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f000 f8d9 	bl	800a88e <MQTTPacket_encode>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 800a6e4:	697a      	ldr	r2, [r7, #20]
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	1ad3      	subs	r3, r2, r3
 800a6ea:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800a6ec:	69fb      	ldr	r3, [r7, #28]
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3720      	adds	r7, #32
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}

0800a6f6 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 800a6f6:	b580      	push	{r7, lr}
 800a6f8:	b082      	sub	sp, #8
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
 800a6fe:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 800a700:	220c      	movs	r2, #12
 800a702:	6839      	ldr	r1, [r7, #0]
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f7ff ffbe 	bl	800a686 <MQTTSerialize_zero>
 800a70a:	4603      	mov	r3, r0
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3708      	adds	r7, #8
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b08a      	sub	sp, #40	; 0x28
 800a718:	af00      	add	r7, sp, #0
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	607a      	str	r2, [r7, #4]
 800a720:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800a722:	2300      	movs	r3, #0
 800a724:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800a726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a728:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800a72a:	2300      	movs	r3, #0
 800a72c:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800a72e:	2300      	movs	r3, #0
 800a730:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 800a732:	2300      	movs	r3, #0
 800a734:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800a736:	f107 0318 	add.w	r3, r7, #24
 800a73a:	4618      	mov	r0, r3
 800a73c:	f000 f98d 	bl	800aa5a <readChar>
 800a740:	4603      	mov	r3, r0
 800a742:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 800a744:	7f3b      	ldrb	r3, [r7, #28]
 800a746:	f023 030f 	bic.w	r3, r3, #15
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	2b30      	cmp	r3, #48	; 0x30
 800a74e:	d14b      	bne.n	800a7e8 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 800a750:	7f3b      	ldrb	r3, [r7, #28]
 800a752:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a756:	b2db      	uxtb	r3, r3
 800a758:	461a      	mov	r2, r3
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 800a75e:	7f3b      	ldrb	r3, [r7, #28]
 800a760:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800a764:	b2db      	uxtb	r3, r3
 800a766:	461a      	mov	r2, r3
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 800a76c:	7f3b      	ldrb	r3, [r7, #28]
 800a76e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a772:	b2db      	uxtb	r3, r3
 800a774:	461a      	mov	r2, r3
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	f107 0214 	add.w	r2, r7, #20
 800a780:	4611      	mov	r1, r2
 800a782:	4618      	mov	r0, r3
 800a784:	f000 f938 	bl	800a9f8 <MQTTPacket_decodeBuf>
 800a788:	6278      	str	r0, [r7, #36]	; 0x24
 800a78a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a78c:	69bb      	ldr	r3, [r7, #24]
 800a78e:	4413      	add	r3, r2
 800a790:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	697a      	ldr	r2, [r7, #20]
 800a796:	4413      	add	r3, r2
 800a798:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800a79a:	f107 0318 	add.w	r3, r7, #24
 800a79e:	6a3a      	ldr	r2, [r7, #32]
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7a4:	f000 f9f8 	bl	800ab98 <readMQTTLenString>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d01e      	beq.n	800a7ec <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 800a7ae:	69bb      	ldr	r3, [r7, #24]
 800a7b0:	6a3a      	ldr	r2, [r7, #32]
 800a7b2:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	db19      	blt.n	800a7ec <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	dd08      	ble.n	800a7d2 <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 800a7c0:	f107 0318 	add.w	r3, r7, #24
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f000 f92d 	bl	800aa24 <readInt>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	b29a      	uxth	r2, r3
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	6a3a      	ldr	r2, [r7, #32]
 800a7d6:	1ad2      	subs	r2, r2, r3
 800a7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7da:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 800a7dc:	69ba      	ldr	r2, [r7, #24]
 800a7de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7e0:	601a      	str	r2, [r3, #0]
	rc = 1;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	627b      	str	r3, [r7, #36]	; 0x24
 800a7e6:	e002      	b.n	800a7ee <MQTTDeserialize_publish+0xda>
		goto exit;
 800a7e8:	bf00      	nop
 800a7ea:	e000      	b.n	800a7ee <MQTTDeserialize_publish+0xda>
		goto exit;
 800a7ec:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800a7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3728      	adds	r7, #40	; 0x28
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b08a      	sub	sp, #40	; 0x28
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	607a      	str	r2, [r7, #4]
 800a804:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800a806:	2300      	movs	r3, #0
 800a808:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800a80e:	2300      	movs	r3, #0
 800a810:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800a812:	2300      	movs	r3, #0
 800a814:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800a816:	f107 0318 	add.w	r3, r7, #24
 800a81a:	4618      	mov	r0, r3
 800a81c:	f000 f91d 	bl	800aa5a <readChar>
 800a820:	4603      	mov	r3, r0
 800a822:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 800a824:	7f3b      	ldrb	r3, [r7, #28]
 800a826:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a82a:	b2db      	uxtb	r3, r3
 800a82c:	461a      	mov	r2, r3
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 800a832:	7f3b      	ldrb	r3, [r7, #28]
 800a834:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a838:	b2db      	uxtb	r3, r3
 800a83a:	461a      	mov	r2, r3
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	f107 0214 	add.w	r2, r7, #20
 800a846:	4611      	mov	r1, r2
 800a848:	4618      	mov	r0, r3
 800a84a:	f000 f8d5 	bl	800a9f8 <MQTTPacket_decodeBuf>
 800a84e:	6278      	str	r0, [r7, #36]	; 0x24
 800a850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	4413      	add	r3, r2
 800a856:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	697a      	ldr	r2, [r7, #20]
 800a85c:	4413      	add	r3, r2
 800a85e:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 800a860:	69bb      	ldr	r3, [r7, #24]
 800a862:	6a3a      	ldr	r2, [r7, #32]
 800a864:	1ad3      	subs	r3, r2, r3
 800a866:	2b01      	cmp	r3, #1
 800a868:	dd0b      	ble.n	800a882 <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 800a86a:	f107 0318 	add.w	r3, r7, #24
 800a86e:	4618      	mov	r0, r3
 800a870:	f000 f8d8 	bl	800aa24 <readInt>
 800a874:	4603      	mov	r3, r0
 800a876:	b29a      	uxth	r2, r3
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	801a      	strh	r2, [r3, #0]

	rc = 1;
 800a87c:	2301      	movs	r3, #1
 800a87e:	627b      	str	r3, [r7, #36]	; 0x24
 800a880:	e000      	b.n	800a884 <MQTTDeserialize_ack+0x8c>
		goto exit;
 800a882:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800a884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a886:	4618      	mov	r0, r3
 800a888:	3728      	adds	r7, #40	; 0x28
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}

0800a88e <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 800a88e:	b480      	push	{r7}
 800a890:	b085      	sub	sp, #20
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
 800a896:	6039      	str	r1, [r7, #0]
	int rc = 0;
 800a898:	2300      	movs	r3, #0
 800a89a:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	425a      	negs	r2, r3
 800a8a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a8a8:	bf58      	it	pl
 800a8aa:	4253      	negpl	r3, r2
 800a8ac:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	da00      	bge.n	800a8b6 <MQTTPacket_encode+0x28>
 800a8b4:	337f      	adds	r3, #127	; 0x7f
 800a8b6:	11db      	asrs	r3, r3, #7
 800a8b8:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	dd03      	ble.n	800a8c8 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 800a8c0:	7afb      	ldrb	r3, [r7, #11]
 800a8c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a8c6:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	1c5a      	adds	r2, r3, #1
 800a8cc:	60fa      	str	r2, [r7, #12]
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	4413      	add	r3, r2
 800a8d4:	7afa      	ldrb	r2, [r7, #11]
 800a8d6:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	dcde      	bgt.n	800a89c <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 800a8de:	68fb      	ldr	r3, [r7, #12]
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3714      	adds	r7, #20
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr

0800a8ec <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b086      	sub	sp, #24
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	617b      	str	r3, [r7, #20]
	int len = 0;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	2200      	movs	r2, #0
 800a902:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 800a904:	f04f 33ff 	mov.w	r3, #4294967295
 800a908:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	3301      	adds	r3, #1
 800a90e:	613b      	str	r3, [r7, #16]
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	2b04      	cmp	r3, #4
 800a914:	dd03      	ble.n	800a91e <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 800a916:	f04f 33ff 	mov.w	r3, #4294967295
 800a91a:	60fb      	str	r3, [r7, #12]
			goto exit;
 800a91c:	e01d      	b.n	800a95a <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 800a91e:	f107 020b 	add.w	r2, r7, #11
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2101      	movs	r1, #1
 800a926:	4610      	mov	r0, r2
 800a928:	4798      	blx	r3
 800a92a:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d112      	bne.n	800a958 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	7afb      	ldrb	r3, [r7, #11]
 800a938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a93c:	6979      	ldr	r1, [r7, #20]
 800a93e:	fb01 f303 	mul.w	r3, r1, r3
 800a942:	441a      	add	r2, r3
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	01db      	lsls	r3, r3, #7
 800a94c:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 800a94e:	7afb      	ldrb	r3, [r7, #11]
 800a950:	b25b      	sxtb	r3, r3
 800a952:	2b00      	cmp	r3, #0
 800a954:	dbd6      	blt.n	800a904 <MQTTPacket_decode+0x18>
exit:
 800a956:	e000      	b.n	800a95a <MQTTPacket_decode+0x6e>
			goto exit;
 800a958:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 800a95a:	693b      	ldr	r3, [r7, #16]
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3718      	adds	r7, #24
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	3301      	adds	r3, #1
 800a970:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2b7f      	cmp	r3, #127	; 0x7f
 800a976:	dc03      	bgt.n	800a980 <MQTTPacket_len+0x1c>
		rem_len += 1;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	3301      	adds	r3, #1
 800a97c:	607b      	str	r3, [r7, #4]
 800a97e:	e012      	b.n	800a9a6 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a986:	da03      	bge.n	800a990 <MQTTPacket_len+0x2c>
		rem_len += 2;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	3302      	adds	r3, #2
 800a98c:	607b      	str	r3, [r7, #4]
 800a98e:	e00a      	b.n	800a9a6 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	4a08      	ldr	r2, [pc, #32]	; (800a9b4 <MQTTPacket_len+0x50>)
 800a994:	4293      	cmp	r3, r2
 800a996:	dc03      	bgt.n	800a9a0 <MQTTPacket_len+0x3c>
		rem_len += 3;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	3303      	adds	r3, #3
 800a99c:	607b      	str	r3, [r7, #4]
 800a99e:	e002      	b.n	800a9a6 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	3304      	adds	r3, #4
 800a9a4:	607b      	str	r3, [r7, #4]
	return rem_len;
 800a9a6:	687b      	ldr	r3, [r7, #4]
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	370c      	adds	r7, #12
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr
 800a9b4:	001ffffe 	.word	0x001ffffe

0800a9b8 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b085      	sub	sp, #20
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	60fb      	str	r3, [r7, #12]
 800a9c6:	e00a      	b.n	800a9de <bufchar+0x26>
		*c = *bufptr++;
 800a9c8:	4b0a      	ldr	r3, [pc, #40]	; (800a9f4 <bufchar+0x3c>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	1c5a      	adds	r2, r3, #1
 800a9ce:	4909      	ldr	r1, [pc, #36]	; (800a9f4 <bufchar+0x3c>)
 800a9d0:	600a      	str	r2, [r1, #0]
 800a9d2:	781a      	ldrb	r2, [r3, #0]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	3301      	adds	r3, #1
 800a9dc:	60fb      	str	r3, [r7, #12]
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	dbf0      	blt.n	800a9c8 <bufchar+0x10>
	return count;
 800a9e6:	683b      	ldr	r3, [r7, #0]
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3714      	adds	r7, #20
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr
 800a9f4:	200014ec 	.word	0x200014ec

0800a9f8 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 800aa02:	4a06      	ldr	r2, [pc, #24]	; (800aa1c <MQTTPacket_decodeBuf+0x24>)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 800aa08:	6839      	ldr	r1, [r7, #0]
 800aa0a:	4805      	ldr	r0, [pc, #20]	; (800aa20 <MQTTPacket_decodeBuf+0x28>)
 800aa0c:	f7ff ff6e 	bl	800a8ec <MQTTPacket_decode>
 800aa10:	4603      	mov	r3, r0
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3708      	adds	r7, #8
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
 800aa1a:	bf00      	nop
 800aa1c:	200014ec 	.word	0x200014ec
 800aa20:	0800a9b9 	.word	0x0800a9b9

0800aa24 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b085      	sub	sp, #20
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	781b      	ldrb	r3, [r3, #0]
 800aa36:	021b      	lsls	r3, r3, #8
 800aa38:	68fa      	ldr	r2, [r7, #12]
 800aa3a:	3201      	adds	r2, #1
 800aa3c:	7812      	ldrb	r2, [r2, #0]
 800aa3e:	4413      	add	r3, r2
 800aa40:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	1c9a      	adds	r2, r3, #2
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	601a      	str	r2, [r3, #0]
	return len;
 800aa4c:	68bb      	ldr	r3, [r7, #8]
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3714      	adds	r7, #20
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr

0800aa5a <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 800aa5a:	b480      	push	{r7}
 800aa5c:	b085      	sub	sp, #20
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	1c5a      	adds	r2, r3, #1
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	601a      	str	r2, [r3, #0]
	return c;
 800aa74:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3714      	adds	r7, #20
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa80:	4770      	bx	lr

0800aa82 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 800aa82:	b480      	push	{r7}
 800aa84:	b083      	sub	sp, #12
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	6078      	str	r0, [r7, #4]
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	78fa      	ldrb	r2, [r7, #3]
 800aa94:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	1c5a      	adds	r2, r3, #1
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	601a      	str	r2, [r3, #0]
}
 800aaa0:	bf00      	nop
 800aaa2:	370c      	adds	r7, #12
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr

0800aaac <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b083      	sub	sp, #12
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	da00      	bge.n	800aabe <writeInt+0x12>
 800aabc:	33ff      	adds	r3, #255	; 0xff
 800aabe:	121b      	asrs	r3, r3, #8
 800aac0:	461a      	mov	r2, r3
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	b2d2      	uxtb	r2, r2
 800aac8:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	1c5a      	adds	r2, r3, #1
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	425a      	negs	r2, r3
 800aad8:	b2db      	uxtb	r3, r3
 800aada:	b2d2      	uxtb	r2, r2
 800aadc:	bf58      	it	pl
 800aade:	4253      	negpl	r3, r2
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	6812      	ldr	r2, [r2, #0]
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	1c5a      	adds	r2, r3, #1
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	601a      	str	r2, [r3, #0]
}
 800aaf2:	bf00      	nop
 800aaf4:	370c      	adds	r7, #12
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr

0800aafe <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 800aafe:	b580      	push	{r7, lr}
 800ab00:	b084      	sub	sp, #16
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
 800ab06:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 800ab08:	6838      	ldr	r0, [r7, #0]
 800ab0a:	f7f5 fb93 	bl	8000234 <strlen>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 800ab12:	68f9      	ldr	r1, [r7, #12]
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f7ff ffc9 	bl	800aaac <writeInt>
	memcpy(*pptr, string, len);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	6839      	ldr	r1, [r7, #0]
 800ab22:	4618      	mov	r0, r3
 800ab24:	f001 f8f2 	bl	800bd0c <memcpy>
	*pptr += len;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	441a      	add	r2, r3
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	601a      	str	r2, [r3, #0]
}
 800ab34:	bf00      	nop
 800ab36:	3710      	adds	r7, #16
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	4638      	mov	r0, r7
 800ab46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	dd12      	ble.n	800ab76 <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	4619      	mov	r1, r3
 800ab54:	68f8      	ldr	r0, [r7, #12]
 800ab56:	f7ff ffa9 	bl	800aaac <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	68b9      	ldr	r1, [r7, #8]
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	4618      	mov	r0, r3
 800ab64:	f001 f8d2 	bl	800bd0c <memcpy>
		*pptr += mqttstring.lenstring.len;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	441a      	add	r2, r3
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 800ab74:	e00c      	b.n	800ab90 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d005      	beq.n	800ab88 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	4619      	mov	r1, r3
 800ab80:	68f8      	ldr	r0, [r7, #12]
 800ab82:	f7ff ffbc 	bl	800aafe <writeCString>
}
 800ab86:	e003      	b.n	800ab90 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 800ab88:	2100      	movs	r1, #0
 800ab8a:	68f8      	ldr	r0, [r7, #12]
 800ab8c:	f7ff ff8e 	bl	800aaac <writeInt>
}
 800ab90:	bf00      	nop
 800ab92:	3710      	adds	r7, #16
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b086      	sub	sp, #24
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	60b9      	str	r1, [r7, #8]
 800aba2:	607a      	str	r2, [r7, #4]
	int rc = 0;
 800aba4:	2300      	movs	r3, #0
 800aba6:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	1ad3      	subs	r3, r2, r3
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	dd1a      	ble.n	800abea <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 800abb4:	68b8      	ldr	r0, [r7, #8]
 800abb6:	f7ff ff35 	bl	800aa24 <readInt>
 800abba:	4602      	mov	r2, r0
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	68fa      	ldr	r2, [r7, #12]
 800abc6:	6852      	ldr	r2, [r2, #4]
 800abc8:	4413      	add	r3, r2
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	429a      	cmp	r2, r3
 800abce:	d30c      	bcc.n	800abea <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	681a      	ldr	r2, [r3, #0]
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	68fa      	ldr	r2, [r7, #12]
 800abde:	6852      	ldr	r2, [r2, #4]
 800abe0:	441a      	add	r2, r3
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	601a      	str	r2, [r3, #0]
			rc = 1;
 800abe6:	2301      	movs	r3, #1
 800abe8:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2200      	movs	r2, #0
 800abee:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 800abf0:	697b      	ldr	r3, [r7, #20]
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3718      	adds	r7, #24
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b086      	sub	sp, #24
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	1d3b      	adds	r3, r7, #4
 800ac02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 800ac06:	2300      	movs	r3, #0
 800ac08:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d006      	beq.n	800ac1e <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7f5 fb0e 	bl	8000234 <strlen>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	617b      	str	r3, [r7, #20]
 800ac1c:	e001      	b.n	800ac22 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	617b      	str	r3, [r7, #20]
	return rc;
 800ac22:	697b      	ldr	r3, [r7, #20]
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3718      	adds	r7, #24
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b086      	sub	sp, #24
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
	int alen = 0,
 800ac36:	2300      	movs	r3, #0
 800ac38:	617b      	str	r3, [r7, #20]
		blen = 0;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d00a      	beq.n	800ac5c <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4618      	mov	r0, r3
 800ac52:	f7f5 faef 	bl	8000234 <strlen>
 800ac56:	4603      	mov	r3, r0
 800ac58:	617b      	str	r3, [r7, #20]
 800ac5a:	e005      	b.n	800ac68 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	689b      	ldr	r3, [r3, #8]
 800ac60:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 800ac68:	6838      	ldr	r0, [r7, #0]
 800ac6a:	f7f5 fae3 	bl	8000234 <strlen>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 800ac72:	697a      	ldr	r2, [r7, #20]
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d10a      	bne.n	800ac90 <MQTTPacket_equals+0x64>
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	461a      	mov	r2, r3
 800ac7e:	6839      	ldr	r1, [r7, #0]
 800ac80:	6938      	ldr	r0, [r7, #16]
 800ac82:	f000 ffaf 	bl	800bbe4 <strncmp>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d101      	bne.n	800ac90 <MQTTPacket_equals+0x64>
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	e000      	b.n	800ac92 <MQTTPacket_equals+0x66>
 800ac90:	2300      	movs	r3, #0
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3718      	adds	r7, #24
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b086      	sub	sp, #24
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	60f8      	str	r0, [r7, #12]
 800aca2:	4638      	mov	r0, r7
 800aca4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 800aca8:	2300      	movs	r3, #0
 800acaa:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 800acac:	463b      	mov	r3, r7
 800acae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800acb2:	f7ff ffa2 	bl	800abfa <MQTTstrlen>
 800acb6:	4603      	mov	r3, r0
 800acb8:	1c9a      	adds	r2, r3, #2
 800acba:	6a3b      	ldr	r3, [r7, #32]
 800acbc:	4413      	add	r3, r2
 800acbe:	697a      	ldr	r2, [r7, #20]
 800acc0:	4413      	add	r3, r2
 800acc2:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	dd02      	ble.n	800acd0 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	3302      	adds	r3, #2
 800acce:	617b      	str	r3, [r7, #20]
	return len;
 800acd0:	697b      	ldr	r3, [r7, #20]
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3718      	adds	r7, #24
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 800acda:	b580      	push	{r7, lr}
 800acdc:	b08a      	sub	sp, #40	; 0x28
 800acde:	af02      	add	r7, sp, #8
 800ace0:	60f8      	str	r0, [r7, #12]
 800ace2:	60b9      	str	r1, [r7, #8]
 800ace4:	603b      	str	r3, [r7, #0]
 800ace6:	4613      	mov	r3, r2
 800ace8:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 800acee:	2300      	movs	r3, #0
 800acf0:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 800acf2:	2300      	movs	r3, #0
 800acf4:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 800acf6:	2300      	movs	r3, #0
 800acf8:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 800acfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acfc:	9300      	str	r3, [sp, #0]
 800acfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ad02:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ad04:	6838      	ldr	r0, [r7, #0]
 800ad06:	f7ff ffc8 	bl	800ac9a <MQTTSerialize_publishLength>
 800ad0a:	61b8      	str	r0, [r7, #24]
 800ad0c:	69b8      	ldr	r0, [r7, #24]
 800ad0e:	f7ff fe29 	bl	800a964 <MQTTPacket_len>
 800ad12:	4602      	mov	r2, r0
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	4293      	cmp	r3, r2
 800ad18:	da03      	bge.n	800ad22 <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800ad1a:	f06f 0301 	mvn.w	r3, #1
 800ad1e:	61fb      	str	r3, [r7, #28]
		goto exit;
 800ad20:	e04c      	b.n	800adbc <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 800ad22:	7c3b      	ldrb	r3, [r7, #16]
 800ad24:	2203      	movs	r2, #3
 800ad26:	f362 1307 	bfi	r3, r2, #4, #4
 800ad2a:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 800ad2c:	79fb      	ldrb	r3, [r7, #7]
 800ad2e:	f003 0301 	and.w	r3, r3, #1
 800ad32:	b2da      	uxtb	r2, r3
 800ad34:	7c3b      	ldrb	r3, [r7, #16]
 800ad36:	f362 03c3 	bfi	r3, r2, #3, #1
 800ad3a:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	f003 0303 	and.w	r3, r3, #3
 800ad42:	b2da      	uxtb	r2, r3
 800ad44:	7c3b      	ldrb	r3, [r7, #16]
 800ad46:	f362 0342 	bfi	r3, r2, #1, #2
 800ad4a:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 800ad4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ad50:	f003 0301 	and.w	r3, r3, #1
 800ad54:	b2da      	uxtb	r2, r3
 800ad56:	7c3b      	ldrb	r3, [r7, #16]
 800ad58:	f362 0300 	bfi	r3, r2, #0, #1
 800ad5c:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 800ad5e:	7c3a      	ldrb	r2, [r7, #16]
 800ad60:	f107 0314 	add.w	r3, r7, #20
 800ad64:	4611      	mov	r1, r2
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7ff fe8b 	bl	800aa82 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	69b9      	ldr	r1, [r7, #24]
 800ad70:	4618      	mov	r0, r3
 800ad72:	f7ff fd8c 	bl	800a88e <MQTTPacket_encode>
 800ad76:	4602      	mov	r2, r0
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	4413      	add	r3, r2
 800ad7c:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 800ad7e:	f107 0014 	add.w	r0, r7, #20
 800ad82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ad86:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ad88:	f7ff fed8 	bl	800ab3c <writeMQTTString>

	if (qos > 0)
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	dd06      	ble.n	800ada0 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 800ad92:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800ad94:	f107 0314 	add.w	r3, r7, #20
 800ad98:	4611      	mov	r1, r2
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f7ff fe86 	bl	800aaac <writeInt>

	memcpy(ptr, payload, payloadlen);
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ada4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ada6:	4618      	mov	r0, r3
 800ada8:	f000 ffb0 	bl	800bd0c <memcpy>
	ptr += payloadlen;
 800adac:	697a      	ldr	r2, [r7, #20]
 800adae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adb0:	4413      	add	r3, r2
 800adb2:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 800adb4:	697a      	ldr	r2, [r7, #20]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	1ad3      	subs	r3, r2, r3
 800adba:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800adbc:	69fb      	ldr	r3, [r7, #28]
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3720      	adds	r7, #32
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}

0800adc6 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b088      	sub	sp, #32
 800adca:	af00      	add	r7, sp, #0
 800adcc:	60f8      	str	r0, [r7, #12]
 800adce:	60b9      	str	r1, [r7, #8]
 800add0:	4611      	mov	r1, r2
 800add2:	461a      	mov	r2, r3
 800add4:	460b      	mov	r3, r1
 800add6:	71fb      	strb	r3, [r7, #7]
 800add8:	4613      	mov	r3, r2
 800adda:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 800addc:	2300      	movs	r3, #0
 800adde:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 800ade0:	2300      	movs	r3, #0
 800ade2:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	2b03      	cmp	r3, #3
 800adec:	dc03      	bgt.n	800adf6 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800adee:	f06f 0301 	mvn.w	r3, #1
 800adf2:	61fb      	str	r3, [r7, #28]
		goto exit;
 800adf4:	e037      	b.n	800ae66 <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 800adf6:	79fb      	ldrb	r3, [r7, #7]
 800adf8:	f003 030f 	and.w	r3, r3, #15
 800adfc:	b2da      	uxtb	r2, r3
 800adfe:	7e3b      	ldrb	r3, [r7, #24]
 800ae00:	f362 1307 	bfi	r3, r2, #4, #4
 800ae04:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 800ae06:	79bb      	ldrb	r3, [r7, #6]
 800ae08:	f003 0301 	and.w	r3, r3, #1
 800ae0c:	b2da      	uxtb	r2, r3
 800ae0e:	7e3b      	ldrb	r3, [r7, #24]
 800ae10:	f362 03c3 	bfi	r3, r2, #3, #1
 800ae14:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 800ae16:	79fb      	ldrb	r3, [r7, #7]
 800ae18:	2b06      	cmp	r3, #6
 800ae1a:	bf0c      	ite	eq
 800ae1c:	2301      	moveq	r3, #1
 800ae1e:	2300      	movne	r3, #0
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	f003 0303 	and.w	r3, r3, #3
 800ae26:	b2da      	uxtb	r2, r3
 800ae28:	7e3b      	ldrb	r3, [r7, #24]
 800ae2a:	f362 0342 	bfi	r3, r2, #1, #2
 800ae2e:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800ae30:	7e3a      	ldrb	r2, [r7, #24]
 800ae32:	f107 0314 	add.w	r3, r7, #20
 800ae36:	4611      	mov	r1, r2
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f7ff fe22 	bl	800aa82 <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	2102      	movs	r1, #2
 800ae42:	4618      	mov	r0, r3
 800ae44:	f7ff fd23 	bl	800a88e <MQTTPacket_encode>
 800ae48:	4602      	mov	r2, r0
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	4413      	add	r3, r2
 800ae4e:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 800ae50:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ae52:	f107 0314 	add.w	r3, r7, #20
 800ae56:	4611      	mov	r1, r2
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f7ff fe27 	bl	800aaac <writeInt>
	rc = ptr - buf;
 800ae5e:	697a      	ldr	r2, [r7, #20]
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	1ad3      	subs	r3, r2, r3
 800ae64:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800ae66:	69fb      	ldr	r3, [r7, #28]
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3720      	adds	r7, #32
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 800ae7a:	2302      	movs	r3, #2
 800ae7c:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 800ae7e:	2300      	movs	r3, #0
 800ae80:	60fb      	str	r3, [r7, #12]
 800ae82:	e013      	b.n	800aeac <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 800ae84:	68fa      	ldr	r2, [r7, #12]
 800ae86:	4613      	mov	r3, r2
 800ae88:	005b      	lsls	r3, r3, #1
 800ae8a:	4413      	add	r3, r2
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	461a      	mov	r2, r3
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	4413      	add	r3, r2
 800ae94:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ae98:	f7ff feaf 	bl	800abfa <MQTTstrlen>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	3303      	adds	r3, #3
 800aea0:	68ba      	ldr	r2, [r7, #8]
 800aea2:	4413      	add	r3, r2
 800aea4:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	3301      	adds	r3, #1
 800aeaa:	60fb      	str	r3, [r7, #12]
 800aeac:	68fa      	ldr	r2, [r7, #12]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	dbe7      	blt.n	800ae84 <MQTTSerialize_subscribeLength+0x14>
	return len;
 800aeb4:	68bb      	ldr	r3, [r7, #8]
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3710      	adds	r7, #16
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], char requestedQoSs[])
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b08a      	sub	sp, #40	; 0x28
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	60f8      	str	r0, [r7, #12]
 800aec6:	60b9      	str	r1, [r7, #8]
 800aec8:	4611      	mov	r1, r2
 800aeca:	461a      	mov	r2, r3
 800aecc:	460b      	mov	r3, r1
 800aece:	71fb      	strb	r3, [r7, #7]
 800aed0:	4613      	mov	r3, r2
 800aed2:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 800aed8:	2300      	movs	r3, #0
 800aeda:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 800aedc:	2300      	movs	r3, #0
 800aede:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 800aee0:	2300      	movs	r3, #0
 800aee2:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 800aee4:	2300      	movs	r3, #0
 800aee6:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 800aee8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aeea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aeec:	f7ff ffc0 	bl	800ae70 <MQTTSerialize_subscribeLength>
 800aef0:	61f8      	str	r0, [r7, #28]
 800aef2:	69f8      	ldr	r0, [r7, #28]
 800aef4:	f7ff fd36 	bl	800a964 <MQTTPacket_len>
 800aef8:	4602      	mov	r2, r0
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	4293      	cmp	r3, r2
 800aefe:	da03      	bge.n	800af08 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800af00:	f06f 0301 	mvn.w	r3, #1
 800af04:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 800af06:	e04f      	b.n	800afa8 <MQTTSerialize_subscribe+0xea>
	}

	header.byte = 0;
 800af08:	2300      	movs	r3, #0
 800af0a:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 800af0c:	7d3b      	ldrb	r3, [r7, #20]
 800af0e:	2208      	movs	r2, #8
 800af10:	f362 1307 	bfi	r3, r2, #4, #4
 800af14:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 800af16:	79fb      	ldrb	r3, [r7, #7]
 800af18:	f003 0301 	and.w	r3, r3, #1
 800af1c:	b2da      	uxtb	r2, r3
 800af1e:	7d3b      	ldrb	r3, [r7, #20]
 800af20:	f362 03c3 	bfi	r3, r2, #3, #1
 800af24:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 800af26:	7d3b      	ldrb	r3, [r7, #20]
 800af28:	2201      	movs	r2, #1
 800af2a:	f362 0342 	bfi	r3, r2, #1, #2
 800af2e:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 800af30:	7d3a      	ldrb	r2, [r7, #20]
 800af32:	f107 0318 	add.w	r3, r7, #24
 800af36:	4611      	mov	r1, r2
 800af38:	4618      	mov	r0, r3
 800af3a:	f7ff fda2 	bl	800aa82 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800af3e:	69bb      	ldr	r3, [r7, #24]
 800af40:	69f9      	ldr	r1, [r7, #28]
 800af42:	4618      	mov	r0, r3
 800af44:	f7ff fca3 	bl	800a88e <MQTTPacket_encode>
 800af48:	4602      	mov	r2, r0
 800af4a:	69bb      	ldr	r3, [r7, #24]
 800af4c:	4413      	add	r3, r2
 800af4e:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 800af50:	88ba      	ldrh	r2, [r7, #4]
 800af52:	f107 0318 	add.w	r3, r7, #24
 800af56:	4611      	mov	r1, r2
 800af58:	4618      	mov	r0, r3
 800af5a:	f7ff fda7 	bl	800aaac <writeInt>

	for (i = 0; i < count; ++i)
 800af5e:	2300      	movs	r3, #0
 800af60:	623b      	str	r3, [r7, #32]
 800af62:	e019      	b.n	800af98 <MQTTSerialize_subscribe+0xda>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 800af64:	6a3a      	ldr	r2, [r7, #32]
 800af66:	4613      	mov	r3, r2
 800af68:	005b      	lsls	r3, r3, #1
 800af6a:	4413      	add	r3, r2
 800af6c:	009b      	lsls	r3, r3, #2
 800af6e:	461a      	mov	r2, r3
 800af70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af72:	4413      	add	r3, r2
 800af74:	f107 0018 	add.w	r0, r7, #24
 800af78:	cb0e      	ldmia	r3, {r1, r2, r3}
 800af7a:	f7ff fddf 	bl	800ab3c <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 800af7e:	6a3b      	ldr	r3, [r7, #32]
 800af80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af82:	4413      	add	r3, r2
 800af84:	781a      	ldrb	r2, [r3, #0]
 800af86:	f107 0318 	add.w	r3, r7, #24
 800af8a:	4611      	mov	r1, r2
 800af8c:	4618      	mov	r0, r3
 800af8e:	f7ff fd78 	bl	800aa82 <writeChar>
	for (i = 0; i < count; ++i)
 800af92:	6a3b      	ldr	r3, [r7, #32]
 800af94:	3301      	adds	r3, #1
 800af96:	623b      	str	r3, [r7, #32]
 800af98:	6a3a      	ldr	r2, [r7, #32]
 800af9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9c:	429a      	cmp	r2, r3
 800af9e:	dbe1      	blt.n	800af64 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 800afa0:	69ba      	ldr	r2, [r7, #24]
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	1ad3      	subs	r3, r2, r3
 800afa6:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800afa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3728      	adds	r7, #40	; 0x28
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b08a      	sub	sp, #40	; 0x28
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	60f8      	str	r0, [r7, #12]
 800afba:	60b9      	str	r1, [r7, #8]
 800afbc:	607a      	str	r2, [r7, #4]
 800afbe:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800afc0:	2300      	movs	r3, #0
 800afc2:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800afc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc6:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800afc8:	2300      	movs	r3, #0
 800afca:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800afcc:	2300      	movs	r3, #0
 800afce:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800afd0:	f107 0318 	add.w	r3, r7, #24
 800afd4:	4618      	mov	r0, r3
 800afd6:	f7ff fd40 	bl	800aa5a <readChar>
 800afda:	4603      	mov	r3, r0
 800afdc:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 800afde:	7f3b      	ldrb	r3, [r7, #28]
 800afe0:	f023 030f 	bic.w	r3, r3, #15
 800afe4:	b2db      	uxtb	r3, r3
 800afe6:	2b90      	cmp	r3, #144	; 0x90
 800afe8:	d142      	bne.n	800b070 <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800afea:	69bb      	ldr	r3, [r7, #24]
 800afec:	f107 0214 	add.w	r2, r7, #20
 800aff0:	4611      	mov	r1, r2
 800aff2:	4618      	mov	r0, r3
 800aff4:	f7ff fd00 	bl	800a9f8 <MQTTPacket_decodeBuf>
 800aff8:	6278      	str	r0, [r7, #36]	; 0x24
 800affa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800affc:	69bb      	ldr	r3, [r7, #24]
 800affe:	4413      	add	r3, r2
 800b000:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800b002:	69bb      	ldr	r3, [r7, #24]
 800b004:	697a      	ldr	r2, [r7, #20]
 800b006:	4413      	add	r3, r2
 800b008:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 800b00a:	69bb      	ldr	r3, [r7, #24]
 800b00c:	6a3a      	ldr	r2, [r7, #32]
 800b00e:	1ad3      	subs	r3, r2, r3
 800b010:	2b01      	cmp	r3, #1
 800b012:	dd2f      	ble.n	800b074 <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 800b014:	f107 0318 	add.w	r3, r7, #24
 800b018:	4618      	mov	r0, r3
 800b01a:	f7ff fd03 	bl	800aa24 <readInt>
 800b01e:	4603      	mov	r3, r0
 800b020:	b29a      	uxth	r2, r3
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	801a      	strh	r2, [r3, #0]

	*count = 0;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2200      	movs	r2, #0
 800b02a:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 800b02c:	e019      	b.n	800b062 <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	68ba      	ldr	r2, [r7, #8]
 800b034:	429a      	cmp	r2, r3
 800b036:	da03      	bge.n	800b040 <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 800b038:	f04f 33ff 	mov.w	r3, #4294967295
 800b03c:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
 800b03e:	e01a      	b.n	800b076 <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 800b040:	f107 0318 	add.w	r3, r7, #24
 800b044:	4618      	mov	r0, r3
 800b046:	f7ff fd08 	bl	800aa5a <readChar>
 800b04a:	4603      	mov	r3, r0
 800b04c:	4618      	mov	r0, r3
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	1c59      	adds	r1, r3, #1
 800b054:	687a      	ldr	r2, [r7, #4]
 800b056:	6011      	str	r1, [r2, #0]
 800b058:	009b      	lsls	r3, r3, #2
 800b05a:	683a      	ldr	r2, [r7, #0]
 800b05c:	4413      	add	r3, r2
 800b05e:	4602      	mov	r2, r0
 800b060:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 800b062:	69bb      	ldr	r3, [r7, #24]
 800b064:	6a3a      	ldr	r2, [r7, #32]
 800b066:	429a      	cmp	r2, r3
 800b068:	d8e1      	bhi.n	800b02e <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 800b06a:	2301      	movs	r3, #1
 800b06c:	627b      	str	r3, [r7, #36]	; 0x24
 800b06e:	e002      	b.n	800b076 <MQTTDeserialize_suback+0xc4>
		goto exit;
 800b070:	bf00      	nop
 800b072:	e000      	b.n	800b076 <MQTTDeserialize_suback+0xc4>
		goto exit;
 800b074:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800b076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3728      	adds	r7, #40	; 0x28
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <wizchip_select>:
 * ----------------------------------------------------------------------------------------------------
 * Functions
 * ----------------------------------------------------------------------------------------------------
 */
static inline void wizchip_select(void)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 800b084:	2200      	movs	r2, #0
 800b086:	2180      	movs	r1, #128	; 0x80
 800b088:	4802      	ldr	r0, [pc, #8]	; (800b094 <wizchip_select+0x14>)
 800b08a:	f7f9 fc9b 	bl	80049c4 <HAL_GPIO_WritePin>
}
 800b08e:	bf00      	nop
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	40020c00 	.word	0x40020c00

0800b098 <wizchip_deselect>:

static inline void wizchip_deselect(void)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 800b09c:	2201      	movs	r2, #1
 800b09e:	2180      	movs	r1, #128	; 0x80
 800b0a0:	4802      	ldr	r0, [pc, #8]	; (800b0ac <wizchip_deselect+0x14>)
 800b0a2:	f7f9 fc8f 	bl	80049c4 <HAL_GPIO_WritePin>
}
 800b0a6:	bf00      	nop
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	bf00      	nop
 800b0ac:	40020c00 	.word	0x40020c00

0800b0b0 <wizchip_read>:

static inline uint16_t wizchip_read(uint32_t addr)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b083      	sub	sp, #12
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
  return _W5300_DATA(addr);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	005b      	lsls	r3, r3, #1
 800b0bc:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 800b0c0:	881b      	ldrh	r3, [r3, #0]
 800b0c2:	b29b      	uxth	r3, r3
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	370c      	adds	r7, #12
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr

0800b0d0 <wizchip_write>:

static inline void wizchip_write(uint32_t addr, uint16_t tx_data)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	460b      	mov	r3, r1
 800b0da:	807b      	strh	r3, [r7, #2]
  _W5300_DATA(addr) = tx_data;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	005b      	lsls	r3, r3, #1
 800b0e0:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	887b      	ldrh	r3, [r7, #2]
 800b0e8:	8013      	strh	r3, [r2, #0]
}
 800b0ea:	bf00      	nop
 800b0ec:	370c      	adds	r7, #12
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr
	...

0800b0f8 <wizchip_initialize>:

void wizchip_initialize(void)
{
 800b0f8:	b590      	push	{r4, r7, lr}
 800b0fa:	b085      	sub	sp, #20
 800b0fc:	af00      	add	r7, sp, #0
  /* Deselect the FLASH : chip select high */
  wizchip_deselect();
 800b0fe:	f7ff ffcb 	bl	800b098 <wizchip_deselect>

  /* CS function register */
  reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 800b102:	490e      	ldr	r1, [pc, #56]	; (800b13c <wizchip_initialize+0x44>)
 800b104:	480e      	ldr	r0, [pc, #56]	; (800b140 <wizchip_initialize+0x48>)
 800b106:	f7fd fda7 	bl	8008c58 <reg_wizchip_cs_cbfunc>

  /* BUS function register */
  reg_wizchip_bus_cbfunc(wizchip_read, wizchip_write);
 800b10a:	490e      	ldr	r1, [pc, #56]	; (800b144 <wizchip_initialize+0x4c>)
 800b10c:	480e      	ldr	r0, [pc, #56]	; (800b148 <wizchip_initialize+0x50>)
 800b10e:	f7fd fdc9 	bl	8008ca4 <reg_wizchip_bus_cbfunc>

  /* W5x00 initialize */
#if (_WIZCHIP_ == W5100S)
  uint8_t memsize[2][4] = {{2, 2, 2, 2}, {2, 2, 2, 2}};
#elif (_WIZCHIP_ == W5300)
  uint8_t memsize[2][8] = {{8, 8, 8, 8, 8, 8, 8, 8}, {8, 8, 8, 8, 8, 8, 8, 8}};
 800b112:	4b0e      	ldr	r3, [pc, #56]	; (800b14c <wizchip_initialize+0x54>)
 800b114:	463c      	mov	r4, r7
 800b116:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b118:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#elif (_WIZCHIP_ == W5500)
  uint8_t memsize[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2}, {2, 2, 2, 2, 2, 2, 2, 2}};
#endif

  if (ctlwizchip(CW_INIT_WIZCHIP, (void *)memsize) == -1)
 800b11c:	463b      	mov	r3, r7
 800b11e:	4619      	mov	r1, r3
 800b120:	2001      	movs	r0, #1
 800b122:	f7fd fdeb 	bl	8008cfc <ctlwizchip>
 800b126:	4603      	mov	r3, r0
 800b128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b12c:	d102      	bne.n	800b134 <wizchip_initialize+0x3c>
  {
    printf(" W5x00 initialized fail\n");
 800b12e:	4808      	ldr	r0, [pc, #32]	; (800b150 <wizchip_initialize+0x58>)
 800b130:	f000 fc3c 	bl	800b9ac <puts>

      return;
    }
  } while (temp == PHY_LINK_OFF);
#endif
}
 800b134:	3714      	adds	r7, #20
 800b136:	46bd      	mov	sp, r7
 800b138:	bd90      	pop	{r4, r7, pc}
 800b13a:	bf00      	nop
 800b13c:	0800b099 	.word	0x0800b099
 800b140:	0800b081 	.word	0x0800b081
 800b144:	0800b0d1 	.word	0x0800b0d1
 800b148:	0800b0b1 	.word	0x0800b0b1
 800b14c:	0800cb90 	.word	0x0800cb90
 800b150:	0800cb78 	.word	0x0800cb78

0800b154 <wizchip_reset>:

void wizchip_reset(void)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800b158:	2200      	movs	r2, #0
 800b15a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b15e:	4808      	ldr	r0, [pc, #32]	; (800b180 <wizchip_reset+0x2c>)
 800b160:	f7f9 fc30 	bl	80049c4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800b164:	2064      	movs	r0, #100	; 0x64
 800b166:	f7f8 f9a1 	bl	80034ac <HAL_Delay>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800b16a:	2201      	movs	r2, #1
 800b16c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b170:	4803      	ldr	r0, [pc, #12]	; (800b180 <wizchip_reset+0x2c>)
 800b172:	f7f9 fc27 	bl	80049c4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800b176:	2064      	movs	r0, #100	; 0x64
 800b178:	f7f8 f998 	bl	80034ac <HAL_Delay>
}
 800b17c:	bf00      	nop
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	40020800 	.word	0x40020800

0800b184 <wizchip_check>:

void wizchip_check(void)
{
 800b184:	b480      	push	{r7}
 800b186:	af00      	add	r7, sp, #0

    while (1)
      ;
  }
#endif
}
 800b188:	bf00      	nop
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr

0800b192 <wizchip_network_initialize>:
 * ----------------------------------------------------------------------------------------------------
 * Functions
 * ----------------------------------------------------------------------------------------------------
 */
void wizchip_network_initialize(wiz_NetInfo *net_info)
{
 800b192:	b580      	push	{r7, lr}
 800b194:	b082      	sub	sp, #8
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
  wizchip_initialize();
 800b19a:	f7ff ffad 	bl	800b0f8 <wizchip_initialize>
  wizchip_reset();
 800b19e:	f7ff ffd9 	bl	800b154 <wizchip_reset>
  wizchip_check();
 800b1a2:	f7ff ffef 	bl	800b184 <wizchip_check>

  ctlnetwork(CN_SET_NETINFO, (void *)net_info);
 800b1a6:	6879      	ldr	r1, [r7, #4]
 800b1a8:	2000      	movs	r0, #0
 800b1aa:	f7fd fe23 	bl	8008df4 <ctlnetwork>
}
 800b1ae:	bf00      	nop
 800b1b0:	3708      	adds	r7, #8
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
	...

0800b1b8 <wizchip_network_information>:

void wizchip_network_information(wiz_NetInfo *net_info)
{
 800b1b8:	b5b0      	push	{r4, r5, r7, lr}
 800b1ba:	b088      	sub	sp, #32
 800b1bc:	af04      	add	r7, sp, #16
 800b1be:	6078      	str	r0, [r7, #4]
  uint8_t tmp_str[8] = {
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	60bb      	str	r3, [r7, #8]
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	60fb      	str	r3, [r7, #12]
      0,
  };

  ctlnetwork(CN_GET_NETINFO, (void *)net_info);
 800b1c8:	6879      	ldr	r1, [r7, #4]
 800b1ca:	2001      	movs	r0, #1
 800b1cc:	f7fd fe12 	bl	8008df4 <ctlnetwork>
  ctlwizchip(CW_GET_ID, (void *)tmp_str);
 800b1d0:	f107 0308 	add.w	r3, r7, #8
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	2008      	movs	r0, #8
 800b1d8:	f7fd fd90 	bl	8008cfc <ctlwizchip>

  if (net_info->dhcp == NETINFO_DHCP)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	7d9b      	ldrb	r3, [r3, #22]
 800b1e0:	2b02      	cmp	r3, #2
 800b1e2:	d109      	bne.n	800b1f8 <wizchip_network_information+0x40>
  {
    printf("====================================================================================================\n");
 800b1e4:	4839      	ldr	r0, [pc, #228]	; (800b2cc <wizchip_network_information+0x114>)
 800b1e6:	f000 fbe1 	bl	800b9ac <puts>
    printf(" %s network configuration : DHCP\n\n", (char *)tmp_str);
 800b1ea:	f107 0308 	add.w	r3, r7, #8
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	4837      	ldr	r0, [pc, #220]	; (800b2d0 <wizchip_network_information+0x118>)
 800b1f2:	f000 fb75 	bl	800b8e0 <iprintf>
 800b1f6:	e008      	b.n	800b20a <wizchip_network_information+0x52>
  }
  else
  {
    printf("====================================================================================================\n");
 800b1f8:	4834      	ldr	r0, [pc, #208]	; (800b2cc <wizchip_network_information+0x114>)
 800b1fa:	f000 fbd7 	bl	800b9ac <puts>
    printf(" %s network configuration : static\n\n", (char *)tmp_str);
 800b1fe:	f107 0308 	add.w	r3, r7, #8
 800b202:	4619      	mov	r1, r3
 800b204:	4833      	ldr	r0, [pc, #204]	; (800b2d4 <wizchip_network_information+0x11c>)
 800b206:	f000 fb6b 	bl	800b8e0 <iprintf>
  }

  printf(" MAC         : %02X:%02X:%02X:%02X:%02X:%02X\n", net_info->mac[0], net_info->mac[1], net_info->mac[2], net_info->mac[3], net_info->mac[4], net_info->mac[5]);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	781b      	ldrb	r3, [r3, #0]
 800b20e:	4618      	mov	r0, r3
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	785b      	ldrb	r3, [r3, #1]
 800b214:	461c      	mov	r4, r3
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	789b      	ldrb	r3, [r3, #2]
 800b21a:	461d      	mov	r5, r3
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	78db      	ldrb	r3, [r3, #3]
 800b220:	461a      	mov	r2, r3
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	791b      	ldrb	r3, [r3, #4]
 800b226:	4619      	mov	r1, r3
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	795b      	ldrb	r3, [r3, #5]
 800b22c:	9302      	str	r3, [sp, #8]
 800b22e:	9101      	str	r1, [sp, #4]
 800b230:	9200      	str	r2, [sp, #0]
 800b232:	462b      	mov	r3, r5
 800b234:	4622      	mov	r2, r4
 800b236:	4601      	mov	r1, r0
 800b238:	4827      	ldr	r0, [pc, #156]	; (800b2d8 <wizchip_network_information+0x120>)
 800b23a:	f000 fb51 	bl	800b8e0 <iprintf>
  printf(" IP          : %d.%d.%d.%d\n", net_info->ip[0], net_info->ip[1], net_info->ip[2], net_info->ip[3]);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	799b      	ldrb	r3, [r3, #6]
 800b242:	4619      	mov	r1, r3
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	79db      	ldrb	r3, [r3, #7]
 800b248:	461a      	mov	r2, r3
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	7a1b      	ldrb	r3, [r3, #8]
 800b24e:	4618      	mov	r0, r3
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	7a5b      	ldrb	r3, [r3, #9]
 800b254:	9300      	str	r3, [sp, #0]
 800b256:	4603      	mov	r3, r0
 800b258:	4820      	ldr	r0, [pc, #128]	; (800b2dc <wizchip_network_information+0x124>)
 800b25a:	f000 fb41 	bl	800b8e0 <iprintf>
  printf(" Subnet Mask : %d.%d.%d.%d\n", net_info->sn[0], net_info->sn[1], net_info->sn[2], net_info->sn[3]);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	7a9b      	ldrb	r3, [r3, #10]
 800b262:	4619      	mov	r1, r3
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	7adb      	ldrb	r3, [r3, #11]
 800b268:	461a      	mov	r2, r3
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	7b1b      	ldrb	r3, [r3, #12]
 800b26e:	4618      	mov	r0, r3
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	7b5b      	ldrb	r3, [r3, #13]
 800b274:	9300      	str	r3, [sp, #0]
 800b276:	4603      	mov	r3, r0
 800b278:	4819      	ldr	r0, [pc, #100]	; (800b2e0 <wizchip_network_information+0x128>)
 800b27a:	f000 fb31 	bl	800b8e0 <iprintf>
  printf(" Gateway     : %d.%d.%d.%d\n", net_info->gw[0], net_info->gw[1], net_info->gw[2], net_info->gw[3]);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	7b9b      	ldrb	r3, [r3, #14]
 800b282:	4619      	mov	r1, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	7bdb      	ldrb	r3, [r3, #15]
 800b288:	461a      	mov	r2, r3
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	7c1b      	ldrb	r3, [r3, #16]
 800b28e:	4618      	mov	r0, r3
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	7c5b      	ldrb	r3, [r3, #17]
 800b294:	9300      	str	r3, [sp, #0]
 800b296:	4603      	mov	r3, r0
 800b298:	4812      	ldr	r0, [pc, #72]	; (800b2e4 <wizchip_network_information+0x12c>)
 800b29a:	f000 fb21 	bl	800b8e0 <iprintf>
  printf(" DNS         : %d.%d.%d.%d\n", net_info->dns[0], net_info->dns[1], net_info->dns[2], net_info->dns[3]);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	7c9b      	ldrb	r3, [r3, #18]
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	7cdb      	ldrb	r3, [r3, #19]
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	7d1b      	ldrb	r3, [r3, #20]
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	7d5b      	ldrb	r3, [r3, #21]
 800b2b4:	9300      	str	r3, [sp, #0]
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	480b      	ldr	r0, [pc, #44]	; (800b2e8 <wizchip_network_information+0x130>)
 800b2ba:	f000 fb11 	bl	800b8e0 <iprintf>
  printf("====================================================================================================\n\n");
 800b2be:	480b      	ldr	r0, [pc, #44]	; (800b2ec <wizchip_network_information+0x134>)
 800b2c0:	f000 fb74 	bl	800b9ac <puts>
}
 800b2c4:	bf00      	nop
 800b2c6:	3710      	adds	r7, #16
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bdb0      	pop	{r4, r5, r7, pc}
 800b2cc:	0800cba0 	.word	0x0800cba0
 800b2d0:	0800cc08 	.word	0x0800cc08
 800b2d4:	0800cc2c 	.word	0x0800cc2c
 800b2d8:	0800cc54 	.word	0x0800cc54
 800b2dc:	0800cc84 	.word	0x0800cc84
 800b2e0:	0800cca0 	.word	0x0800cca0
 800b2e4:	0800ccbc 	.word	0x0800ccbc
 800b2e8:	0800ccd8 	.word	0x0800ccd8
 800b2ec:	0800ccf4 	.word	0x0800ccf4

0800b2f0 <HAL_SYSTICK_Callback>:
 * ----------------------------------------------------------------------------------------------------
 * Functions
 * ----------------------------------------------------------------------------------------------------
 */
void HAL_SYSTICK_Callback(void)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	af00      	add	r7, sp, #0
  g_time_base++;
 800b2f4:	4b10      	ldr	r3, [pc, #64]	; (800b338 <HAL_SYSTICK_Callback+0x48>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	4a0f      	ldr	r2, [pc, #60]	; (800b338 <HAL_SYSTICK_Callback+0x48>)
 800b2fc:	6013      	str	r3, [r2, #0]

  if ((g_time_base % 1) == 0) // uint : 1 millisecond, repeat every millisecond
  {
    g_msec++;
 800b2fe:	4b0f      	ldr	r3, [pc, #60]	; (800b33c <HAL_SYSTICK_Callback+0x4c>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	3301      	adds	r3, #1
 800b304:	4a0d      	ldr	r2, [pc, #52]	; (800b33c <HAL_SYSTICK_Callback+0x4c>)
 800b306:	6013      	str	r3, [r2, #0]

    wizchip_1msec_timer_callback();
 800b308:	f000 f82e 	bl	800b368 <wizchip_1msec_timer_callback>
  }

  if ((g_time_base % 1000) == 0) // uint : 1 second, repeat every second
 800b30c:	4b0a      	ldr	r3, [pc, #40]	; (800b338 <HAL_SYSTICK_Callback+0x48>)
 800b30e:	681a      	ldr	r2, [r3, #0]
 800b310:	4b0b      	ldr	r3, [pc, #44]	; (800b340 <HAL_SYSTICK_Callback+0x50>)
 800b312:	fba3 1302 	umull	r1, r3, r3, r2
 800b316:	099b      	lsrs	r3, r3, #6
 800b318:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b31c:	fb01 f303 	mul.w	r3, r1, r3
 800b320:	1ad3      	subs	r3, r2, r3
 800b322:	2b00      	cmp	r3, #0
 800b324:	d106      	bne.n	800b334 <HAL_SYSTICK_Callback+0x44>
  {
    g_sec++;
 800b326:	4b07      	ldr	r3, [pc, #28]	; (800b344 <HAL_SYSTICK_Callback+0x54>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	3301      	adds	r3, #1
 800b32c:	4a05      	ldr	r2, [pc, #20]	; (800b344 <HAL_SYSTICK_Callback+0x54>)
 800b32e:	6013      	str	r3, [r2, #0]

    wizchip_1sec_timer_callback();
 800b330:	f000 f828 	bl	800b384 <wizchip_1sec_timer_callback>
  }
}
 800b334:	bf00      	nop
 800b336:	bd80      	pop	{r7, pc}
 800b338:	200014f0 	.word	0x200014f0
 800b33c:	200014f8 	.word	0x200014f8
 800b340:	10624dd3 	.word	0x10624dd3
 800b344:	200014f4 	.word	0x200014f4

0800b348 <wizchip_1msec_timer_initialize>:

void wizchip_1msec_timer_initialize(void (*callback)(void))
{
 800b348:	b480      	push	{r7}
 800b34a:	b083      	sub	sp, #12
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  msec_timer_callback_ptr = callback;
 800b350:	4a04      	ldr	r2, [pc, #16]	; (800b364 <wizchip_1msec_timer_initialize+0x1c>)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6013      	str	r3, [r2, #0]
}
 800b356:	bf00      	nop
 800b358:	370c      	adds	r7, #12
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr
 800b362:	bf00      	nop
 800b364:	200014fc 	.word	0x200014fc

0800b368 <wizchip_1msec_timer_callback>:

void wizchip_1msec_timer_callback(void)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	af00      	add	r7, sp, #0
  if (msec_timer_callback_ptr != NULL)
 800b36c:	4b04      	ldr	r3, [pc, #16]	; (800b380 <wizchip_1msec_timer_callback+0x18>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d002      	beq.n	800b37a <wizchip_1msec_timer_callback+0x12>
  {
    msec_timer_callback_ptr();
 800b374:	4b02      	ldr	r3, [pc, #8]	; (800b380 <wizchip_1msec_timer_callback+0x18>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4798      	blx	r3
  }
}
 800b37a:	bf00      	nop
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop
 800b380:	200014fc 	.word	0x200014fc

0800b384 <wizchip_1sec_timer_callback>:
{
  sec_timer_callback_ptr = callback;
}

void wizchip_1sec_timer_callback(void)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	af00      	add	r7, sp, #0
  if (sec_timer_callback_ptr != NULL)
 800b388:	4b04      	ldr	r3, [pc, #16]	; (800b39c <wizchip_1sec_timer_callback+0x18>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d002      	beq.n	800b396 <wizchip_1sec_timer_callback+0x12>
  {
    sec_timer_callback_ptr();
 800b390:	4b02      	ldr	r3, [pc, #8]	; (800b39c <wizchip_1sec_timer_callback+0x18>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4798      	blx	r3
  }
}
 800b396:	bf00      	nop
 800b398:	bd80      	pop	{r7, pc}
 800b39a:	bf00      	nop
 800b39c:	20001500 	.word	0x20001500

0800b3a0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b087      	sub	sp, #28
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	60b9      	str	r1, [r7, #8]
 800b3aa:	4613      	mov	r3, r2
 800b3ac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b3b6:	4b1f      	ldr	r3, [pc, #124]	; (800b434 <FATFS_LinkDriverEx+0x94>)
 800b3b8:	7a5b      	ldrb	r3, [r3, #9]
 800b3ba:	b2db      	uxtb	r3, r3
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d131      	bne.n	800b424 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b3c0:	4b1c      	ldr	r3, [pc, #112]	; (800b434 <FATFS_LinkDriverEx+0x94>)
 800b3c2:	7a5b      	ldrb	r3, [r3, #9]
 800b3c4:	b2db      	uxtb	r3, r3
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	4b1a      	ldr	r3, [pc, #104]	; (800b434 <FATFS_LinkDriverEx+0x94>)
 800b3ca:	2100      	movs	r1, #0
 800b3cc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b3ce:	4b19      	ldr	r3, [pc, #100]	; (800b434 <FATFS_LinkDriverEx+0x94>)
 800b3d0:	7a5b      	ldrb	r3, [r3, #9]
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	4a17      	ldr	r2, [pc, #92]	; (800b434 <FATFS_LinkDriverEx+0x94>)
 800b3d6:	009b      	lsls	r3, r3, #2
 800b3d8:	4413      	add	r3, r2
 800b3da:	68fa      	ldr	r2, [r7, #12]
 800b3dc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b3de:	4b15      	ldr	r3, [pc, #84]	; (800b434 <FATFS_LinkDriverEx+0x94>)
 800b3e0:	7a5b      	ldrb	r3, [r3, #9]
 800b3e2:	b2db      	uxtb	r3, r3
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	4b13      	ldr	r3, [pc, #76]	; (800b434 <FATFS_LinkDriverEx+0x94>)
 800b3e8:	4413      	add	r3, r2
 800b3ea:	79fa      	ldrb	r2, [r7, #7]
 800b3ec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b3ee:	4b11      	ldr	r3, [pc, #68]	; (800b434 <FATFS_LinkDriverEx+0x94>)
 800b3f0:	7a5b      	ldrb	r3, [r3, #9]
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	1c5a      	adds	r2, r3, #1
 800b3f6:	b2d1      	uxtb	r1, r2
 800b3f8:	4a0e      	ldr	r2, [pc, #56]	; (800b434 <FATFS_LinkDriverEx+0x94>)
 800b3fa:	7251      	strb	r1, [r2, #9]
 800b3fc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b3fe:	7dbb      	ldrb	r3, [r7, #22]
 800b400:	3330      	adds	r3, #48	; 0x30
 800b402:	b2da      	uxtb	r2, r3
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	3301      	adds	r3, #1
 800b40c:	223a      	movs	r2, #58	; 0x3a
 800b40e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	3302      	adds	r3, #2
 800b414:	222f      	movs	r2, #47	; 0x2f
 800b416:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	3303      	adds	r3, #3
 800b41c:	2200      	movs	r2, #0
 800b41e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b420:	2300      	movs	r3, #0
 800b422:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b424:	7dfb      	ldrb	r3, [r7, #23]
}
 800b426:	4618      	mov	r0, r3
 800b428:	371c      	adds	r7, #28
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr
 800b432:	bf00      	nop
 800b434:	20001504 	.word	0x20001504

0800b438 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b082      	sub	sp, #8
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b442:	2200      	movs	r2, #0
 800b444:	6839      	ldr	r1, [r7, #0]
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f7ff ffaa 	bl	800b3a0 <FATFS_LinkDriverEx>
 800b44c:	4603      	mov	r3, r0
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3708      	adds	r7, #8
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
	...

0800b458 <trunc>:
 800b458:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 800b45c:	ec5c bb10 	vmov	fp, ip, d0
 800b460:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800b464:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 800b468:	2913      	cmp	r1, #19
 800b46a:	4664      	mov	r4, ip
 800b46c:	dc11      	bgt.n	800b492 <trunc+0x3a>
 800b46e:	2900      	cmp	r1, #0
 800b470:	bfa7      	ittee	ge
 800b472:	4b15      	ldrge	r3, [pc, #84]	; (800b4c8 <trunc+0x70>)
 800b474:	fa43 f101 	asrge.w	r1, r3, r1
 800b478:	2200      	movlt	r2, #0
 800b47a:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 800b47e:	bfa4      	itt	ge
 800b480:	2200      	movge	r2, #0
 800b482:	ea01 030c 	andge.w	r3, r1, ip
 800b486:	4693      	mov	fp, r2
 800b488:	469c      	mov	ip, r3
 800b48a:	ec4c bb10 	vmov	d0, fp, ip
 800b48e:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 800b492:	2933      	cmp	r1, #51	; 0x33
 800b494:	dd0d      	ble.n	800b4b2 <trunc+0x5a>
 800b496:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b49a:	d1f6      	bne.n	800b48a <trunc+0x32>
 800b49c:	4663      	mov	r3, ip
 800b49e:	ee10 2a10 	vmov	r2, s0
 800b4a2:	ee10 0a10 	vmov	r0, s0
 800b4a6:	4621      	mov	r1, r4
 800b4a8:	f7f4 ff28 	bl	80002fc <__adddf3>
 800b4ac:	4683      	mov	fp, r0
 800b4ae:	468c      	mov	ip, r1
 800b4b0:	e7eb      	b.n	800b48a <trunc+0x32>
 800b4b2:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 800b4b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ba:	40c3      	lsrs	r3, r0
 800b4bc:	ea2b 0603 	bic.w	r6, fp, r3
 800b4c0:	46b3      	mov	fp, r6
 800b4c2:	46a4      	mov	ip, r4
 800b4c4:	e7e1      	b.n	800b48a <trunc+0x32>
 800b4c6:	bf00      	nop
 800b4c8:	fff00000 	.word	0xfff00000

0800b4cc <sbrk_aligned>:
 800b4cc:	b570      	push	{r4, r5, r6, lr}
 800b4ce:	4e0e      	ldr	r6, [pc, #56]	; (800b508 <sbrk_aligned+0x3c>)
 800b4d0:	460c      	mov	r4, r1
 800b4d2:	6831      	ldr	r1, [r6, #0]
 800b4d4:	4605      	mov	r5, r0
 800b4d6:	b911      	cbnz	r1, 800b4de <sbrk_aligned+0x12>
 800b4d8:	f000 fbca 	bl	800bc70 <_sbrk_r>
 800b4dc:	6030      	str	r0, [r6, #0]
 800b4de:	4621      	mov	r1, r4
 800b4e0:	4628      	mov	r0, r5
 800b4e2:	f000 fbc5 	bl	800bc70 <_sbrk_r>
 800b4e6:	1c43      	adds	r3, r0, #1
 800b4e8:	d00a      	beq.n	800b500 <sbrk_aligned+0x34>
 800b4ea:	1cc4      	adds	r4, r0, #3
 800b4ec:	f024 0403 	bic.w	r4, r4, #3
 800b4f0:	42a0      	cmp	r0, r4
 800b4f2:	d007      	beq.n	800b504 <sbrk_aligned+0x38>
 800b4f4:	1a21      	subs	r1, r4, r0
 800b4f6:	4628      	mov	r0, r5
 800b4f8:	f000 fbba 	bl	800bc70 <_sbrk_r>
 800b4fc:	3001      	adds	r0, #1
 800b4fe:	d101      	bne.n	800b504 <sbrk_aligned+0x38>
 800b500:	f04f 34ff 	mov.w	r4, #4294967295
 800b504:	4620      	mov	r0, r4
 800b506:	bd70      	pop	{r4, r5, r6, pc}
 800b508:	20001514 	.word	0x20001514

0800b50c <_malloc_r>:
 800b50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b510:	1ccd      	adds	r5, r1, #3
 800b512:	f025 0503 	bic.w	r5, r5, #3
 800b516:	3508      	adds	r5, #8
 800b518:	2d0c      	cmp	r5, #12
 800b51a:	bf38      	it	cc
 800b51c:	250c      	movcc	r5, #12
 800b51e:	2d00      	cmp	r5, #0
 800b520:	4607      	mov	r7, r0
 800b522:	db01      	blt.n	800b528 <_malloc_r+0x1c>
 800b524:	42a9      	cmp	r1, r5
 800b526:	d905      	bls.n	800b534 <_malloc_r+0x28>
 800b528:	230c      	movs	r3, #12
 800b52a:	603b      	str	r3, [r7, #0]
 800b52c:	2600      	movs	r6, #0
 800b52e:	4630      	mov	r0, r6
 800b530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b534:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b608 <_malloc_r+0xfc>
 800b538:	f000 f868 	bl	800b60c <__malloc_lock>
 800b53c:	f8d8 3000 	ldr.w	r3, [r8]
 800b540:	461c      	mov	r4, r3
 800b542:	bb5c      	cbnz	r4, 800b59c <_malloc_r+0x90>
 800b544:	4629      	mov	r1, r5
 800b546:	4638      	mov	r0, r7
 800b548:	f7ff ffc0 	bl	800b4cc <sbrk_aligned>
 800b54c:	1c43      	adds	r3, r0, #1
 800b54e:	4604      	mov	r4, r0
 800b550:	d155      	bne.n	800b5fe <_malloc_r+0xf2>
 800b552:	f8d8 4000 	ldr.w	r4, [r8]
 800b556:	4626      	mov	r6, r4
 800b558:	2e00      	cmp	r6, #0
 800b55a:	d145      	bne.n	800b5e8 <_malloc_r+0xdc>
 800b55c:	2c00      	cmp	r4, #0
 800b55e:	d048      	beq.n	800b5f2 <_malloc_r+0xe6>
 800b560:	6823      	ldr	r3, [r4, #0]
 800b562:	4631      	mov	r1, r6
 800b564:	4638      	mov	r0, r7
 800b566:	eb04 0903 	add.w	r9, r4, r3
 800b56a:	f000 fb81 	bl	800bc70 <_sbrk_r>
 800b56e:	4581      	cmp	r9, r0
 800b570:	d13f      	bne.n	800b5f2 <_malloc_r+0xe6>
 800b572:	6821      	ldr	r1, [r4, #0]
 800b574:	1a6d      	subs	r5, r5, r1
 800b576:	4629      	mov	r1, r5
 800b578:	4638      	mov	r0, r7
 800b57a:	f7ff ffa7 	bl	800b4cc <sbrk_aligned>
 800b57e:	3001      	adds	r0, #1
 800b580:	d037      	beq.n	800b5f2 <_malloc_r+0xe6>
 800b582:	6823      	ldr	r3, [r4, #0]
 800b584:	442b      	add	r3, r5
 800b586:	6023      	str	r3, [r4, #0]
 800b588:	f8d8 3000 	ldr.w	r3, [r8]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d038      	beq.n	800b602 <_malloc_r+0xf6>
 800b590:	685a      	ldr	r2, [r3, #4]
 800b592:	42a2      	cmp	r2, r4
 800b594:	d12b      	bne.n	800b5ee <_malloc_r+0xe2>
 800b596:	2200      	movs	r2, #0
 800b598:	605a      	str	r2, [r3, #4]
 800b59a:	e00f      	b.n	800b5bc <_malloc_r+0xb0>
 800b59c:	6822      	ldr	r2, [r4, #0]
 800b59e:	1b52      	subs	r2, r2, r5
 800b5a0:	d41f      	bmi.n	800b5e2 <_malloc_r+0xd6>
 800b5a2:	2a0b      	cmp	r2, #11
 800b5a4:	d917      	bls.n	800b5d6 <_malloc_r+0xca>
 800b5a6:	1961      	adds	r1, r4, r5
 800b5a8:	42a3      	cmp	r3, r4
 800b5aa:	6025      	str	r5, [r4, #0]
 800b5ac:	bf18      	it	ne
 800b5ae:	6059      	strne	r1, [r3, #4]
 800b5b0:	6863      	ldr	r3, [r4, #4]
 800b5b2:	bf08      	it	eq
 800b5b4:	f8c8 1000 	streq.w	r1, [r8]
 800b5b8:	5162      	str	r2, [r4, r5]
 800b5ba:	604b      	str	r3, [r1, #4]
 800b5bc:	4638      	mov	r0, r7
 800b5be:	f104 060b 	add.w	r6, r4, #11
 800b5c2:	f000 f829 	bl	800b618 <__malloc_unlock>
 800b5c6:	f026 0607 	bic.w	r6, r6, #7
 800b5ca:	1d23      	adds	r3, r4, #4
 800b5cc:	1af2      	subs	r2, r6, r3
 800b5ce:	d0ae      	beq.n	800b52e <_malloc_r+0x22>
 800b5d0:	1b9b      	subs	r3, r3, r6
 800b5d2:	50a3      	str	r3, [r4, r2]
 800b5d4:	e7ab      	b.n	800b52e <_malloc_r+0x22>
 800b5d6:	42a3      	cmp	r3, r4
 800b5d8:	6862      	ldr	r2, [r4, #4]
 800b5da:	d1dd      	bne.n	800b598 <_malloc_r+0x8c>
 800b5dc:	f8c8 2000 	str.w	r2, [r8]
 800b5e0:	e7ec      	b.n	800b5bc <_malloc_r+0xb0>
 800b5e2:	4623      	mov	r3, r4
 800b5e4:	6864      	ldr	r4, [r4, #4]
 800b5e6:	e7ac      	b.n	800b542 <_malloc_r+0x36>
 800b5e8:	4634      	mov	r4, r6
 800b5ea:	6876      	ldr	r6, [r6, #4]
 800b5ec:	e7b4      	b.n	800b558 <_malloc_r+0x4c>
 800b5ee:	4613      	mov	r3, r2
 800b5f0:	e7cc      	b.n	800b58c <_malloc_r+0x80>
 800b5f2:	230c      	movs	r3, #12
 800b5f4:	603b      	str	r3, [r7, #0]
 800b5f6:	4638      	mov	r0, r7
 800b5f8:	f000 f80e 	bl	800b618 <__malloc_unlock>
 800b5fc:	e797      	b.n	800b52e <_malloc_r+0x22>
 800b5fe:	6025      	str	r5, [r4, #0]
 800b600:	e7dc      	b.n	800b5bc <_malloc_r+0xb0>
 800b602:	605b      	str	r3, [r3, #4]
 800b604:	deff      	udf	#255	; 0xff
 800b606:	bf00      	nop
 800b608:	20001510 	.word	0x20001510

0800b60c <__malloc_lock>:
 800b60c:	4801      	ldr	r0, [pc, #4]	; (800b614 <__malloc_lock+0x8>)
 800b60e:	f000 bb7b 	b.w	800bd08 <__retarget_lock_acquire_recursive>
 800b612:	bf00      	nop
 800b614:	20001658 	.word	0x20001658

0800b618 <__malloc_unlock>:
 800b618:	4801      	ldr	r0, [pc, #4]	; (800b620 <__malloc_unlock+0x8>)
 800b61a:	f000 bb76 	b.w	800bd0a <__retarget_lock_release_recursive>
 800b61e:	bf00      	nop
 800b620:	20001658 	.word	0x20001658

0800b624 <__sflush_r>:
 800b624:	898a      	ldrh	r2, [r1, #12]
 800b626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b62a:	4605      	mov	r5, r0
 800b62c:	0710      	lsls	r0, r2, #28
 800b62e:	460c      	mov	r4, r1
 800b630:	d458      	bmi.n	800b6e4 <__sflush_r+0xc0>
 800b632:	684b      	ldr	r3, [r1, #4]
 800b634:	2b00      	cmp	r3, #0
 800b636:	dc05      	bgt.n	800b644 <__sflush_r+0x20>
 800b638:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	dc02      	bgt.n	800b644 <__sflush_r+0x20>
 800b63e:	2000      	movs	r0, #0
 800b640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b644:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b646:	2e00      	cmp	r6, #0
 800b648:	d0f9      	beq.n	800b63e <__sflush_r+0x1a>
 800b64a:	2300      	movs	r3, #0
 800b64c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b650:	682f      	ldr	r7, [r5, #0]
 800b652:	6a21      	ldr	r1, [r4, #32]
 800b654:	602b      	str	r3, [r5, #0]
 800b656:	d032      	beq.n	800b6be <__sflush_r+0x9a>
 800b658:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b65a:	89a3      	ldrh	r3, [r4, #12]
 800b65c:	075a      	lsls	r2, r3, #29
 800b65e:	d505      	bpl.n	800b66c <__sflush_r+0x48>
 800b660:	6863      	ldr	r3, [r4, #4]
 800b662:	1ac0      	subs	r0, r0, r3
 800b664:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b666:	b10b      	cbz	r3, 800b66c <__sflush_r+0x48>
 800b668:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b66a:	1ac0      	subs	r0, r0, r3
 800b66c:	2300      	movs	r3, #0
 800b66e:	4602      	mov	r2, r0
 800b670:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b672:	6a21      	ldr	r1, [r4, #32]
 800b674:	4628      	mov	r0, r5
 800b676:	47b0      	blx	r6
 800b678:	1c43      	adds	r3, r0, #1
 800b67a:	89a3      	ldrh	r3, [r4, #12]
 800b67c:	d106      	bne.n	800b68c <__sflush_r+0x68>
 800b67e:	6829      	ldr	r1, [r5, #0]
 800b680:	291d      	cmp	r1, #29
 800b682:	d82b      	bhi.n	800b6dc <__sflush_r+0xb8>
 800b684:	4a29      	ldr	r2, [pc, #164]	; (800b72c <__sflush_r+0x108>)
 800b686:	410a      	asrs	r2, r1
 800b688:	07d6      	lsls	r6, r2, #31
 800b68a:	d427      	bmi.n	800b6dc <__sflush_r+0xb8>
 800b68c:	2200      	movs	r2, #0
 800b68e:	6062      	str	r2, [r4, #4]
 800b690:	04d9      	lsls	r1, r3, #19
 800b692:	6922      	ldr	r2, [r4, #16]
 800b694:	6022      	str	r2, [r4, #0]
 800b696:	d504      	bpl.n	800b6a2 <__sflush_r+0x7e>
 800b698:	1c42      	adds	r2, r0, #1
 800b69a:	d101      	bne.n	800b6a0 <__sflush_r+0x7c>
 800b69c:	682b      	ldr	r3, [r5, #0]
 800b69e:	b903      	cbnz	r3, 800b6a2 <__sflush_r+0x7e>
 800b6a0:	6560      	str	r0, [r4, #84]	; 0x54
 800b6a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6a4:	602f      	str	r7, [r5, #0]
 800b6a6:	2900      	cmp	r1, #0
 800b6a8:	d0c9      	beq.n	800b63e <__sflush_r+0x1a>
 800b6aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6ae:	4299      	cmp	r1, r3
 800b6b0:	d002      	beq.n	800b6b8 <__sflush_r+0x94>
 800b6b2:	4628      	mov	r0, r5
 800b6b4:	f000 fb38 	bl	800bd28 <_free_r>
 800b6b8:	2000      	movs	r0, #0
 800b6ba:	6360      	str	r0, [r4, #52]	; 0x34
 800b6bc:	e7c0      	b.n	800b640 <__sflush_r+0x1c>
 800b6be:	2301      	movs	r3, #1
 800b6c0:	4628      	mov	r0, r5
 800b6c2:	47b0      	blx	r6
 800b6c4:	1c41      	adds	r1, r0, #1
 800b6c6:	d1c8      	bne.n	800b65a <__sflush_r+0x36>
 800b6c8:	682b      	ldr	r3, [r5, #0]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d0c5      	beq.n	800b65a <__sflush_r+0x36>
 800b6ce:	2b1d      	cmp	r3, #29
 800b6d0:	d001      	beq.n	800b6d6 <__sflush_r+0xb2>
 800b6d2:	2b16      	cmp	r3, #22
 800b6d4:	d101      	bne.n	800b6da <__sflush_r+0xb6>
 800b6d6:	602f      	str	r7, [r5, #0]
 800b6d8:	e7b1      	b.n	800b63e <__sflush_r+0x1a>
 800b6da:	89a3      	ldrh	r3, [r4, #12]
 800b6dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6e0:	81a3      	strh	r3, [r4, #12]
 800b6e2:	e7ad      	b.n	800b640 <__sflush_r+0x1c>
 800b6e4:	690f      	ldr	r7, [r1, #16]
 800b6e6:	2f00      	cmp	r7, #0
 800b6e8:	d0a9      	beq.n	800b63e <__sflush_r+0x1a>
 800b6ea:	0793      	lsls	r3, r2, #30
 800b6ec:	680e      	ldr	r6, [r1, #0]
 800b6ee:	bf08      	it	eq
 800b6f0:	694b      	ldreq	r3, [r1, #20]
 800b6f2:	600f      	str	r7, [r1, #0]
 800b6f4:	bf18      	it	ne
 800b6f6:	2300      	movne	r3, #0
 800b6f8:	eba6 0807 	sub.w	r8, r6, r7
 800b6fc:	608b      	str	r3, [r1, #8]
 800b6fe:	f1b8 0f00 	cmp.w	r8, #0
 800b702:	dd9c      	ble.n	800b63e <__sflush_r+0x1a>
 800b704:	6a21      	ldr	r1, [r4, #32]
 800b706:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b708:	4643      	mov	r3, r8
 800b70a:	463a      	mov	r2, r7
 800b70c:	4628      	mov	r0, r5
 800b70e:	47b0      	blx	r6
 800b710:	2800      	cmp	r0, #0
 800b712:	dc06      	bgt.n	800b722 <__sflush_r+0xfe>
 800b714:	89a3      	ldrh	r3, [r4, #12]
 800b716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b71a:	81a3      	strh	r3, [r4, #12]
 800b71c:	f04f 30ff 	mov.w	r0, #4294967295
 800b720:	e78e      	b.n	800b640 <__sflush_r+0x1c>
 800b722:	4407      	add	r7, r0
 800b724:	eba8 0800 	sub.w	r8, r8, r0
 800b728:	e7e9      	b.n	800b6fe <__sflush_r+0xda>
 800b72a:	bf00      	nop
 800b72c:	dfbffffe 	.word	0xdfbffffe

0800b730 <_fflush_r>:
 800b730:	b538      	push	{r3, r4, r5, lr}
 800b732:	690b      	ldr	r3, [r1, #16]
 800b734:	4605      	mov	r5, r0
 800b736:	460c      	mov	r4, r1
 800b738:	b913      	cbnz	r3, 800b740 <_fflush_r+0x10>
 800b73a:	2500      	movs	r5, #0
 800b73c:	4628      	mov	r0, r5
 800b73e:	bd38      	pop	{r3, r4, r5, pc}
 800b740:	b118      	cbz	r0, 800b74a <_fflush_r+0x1a>
 800b742:	6a03      	ldr	r3, [r0, #32]
 800b744:	b90b      	cbnz	r3, 800b74a <_fflush_r+0x1a>
 800b746:	f000 f895 	bl	800b874 <__sinit>
 800b74a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d0f3      	beq.n	800b73a <_fflush_r+0xa>
 800b752:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b754:	07d0      	lsls	r0, r2, #31
 800b756:	d404      	bmi.n	800b762 <_fflush_r+0x32>
 800b758:	0599      	lsls	r1, r3, #22
 800b75a:	d402      	bmi.n	800b762 <_fflush_r+0x32>
 800b75c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b75e:	f000 fad3 	bl	800bd08 <__retarget_lock_acquire_recursive>
 800b762:	4628      	mov	r0, r5
 800b764:	4621      	mov	r1, r4
 800b766:	f7ff ff5d 	bl	800b624 <__sflush_r>
 800b76a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b76c:	07da      	lsls	r2, r3, #31
 800b76e:	4605      	mov	r5, r0
 800b770:	d4e4      	bmi.n	800b73c <_fflush_r+0xc>
 800b772:	89a3      	ldrh	r3, [r4, #12]
 800b774:	059b      	lsls	r3, r3, #22
 800b776:	d4e1      	bmi.n	800b73c <_fflush_r+0xc>
 800b778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b77a:	f000 fac6 	bl	800bd0a <__retarget_lock_release_recursive>
 800b77e:	e7dd      	b.n	800b73c <_fflush_r+0xc>

0800b780 <std>:
 800b780:	2300      	movs	r3, #0
 800b782:	b510      	push	{r4, lr}
 800b784:	4604      	mov	r4, r0
 800b786:	e9c0 3300 	strd	r3, r3, [r0]
 800b78a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b78e:	6083      	str	r3, [r0, #8]
 800b790:	8181      	strh	r1, [r0, #12]
 800b792:	6643      	str	r3, [r0, #100]	; 0x64
 800b794:	81c2      	strh	r2, [r0, #14]
 800b796:	6183      	str	r3, [r0, #24]
 800b798:	4619      	mov	r1, r3
 800b79a:	2208      	movs	r2, #8
 800b79c:	305c      	adds	r0, #92	; 0x5c
 800b79e:	f000 fa19 	bl	800bbd4 <memset>
 800b7a2:	4b05      	ldr	r3, [pc, #20]	; (800b7b8 <std+0x38>)
 800b7a4:	6263      	str	r3, [r4, #36]	; 0x24
 800b7a6:	4b05      	ldr	r3, [pc, #20]	; (800b7bc <std+0x3c>)
 800b7a8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b7aa:	4b05      	ldr	r3, [pc, #20]	; (800b7c0 <std+0x40>)
 800b7ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b7ae:	4b05      	ldr	r3, [pc, #20]	; (800b7c4 <std+0x44>)
 800b7b0:	6224      	str	r4, [r4, #32]
 800b7b2:	6323      	str	r3, [r4, #48]	; 0x30
 800b7b4:	bd10      	pop	{r4, pc}
 800b7b6:	bf00      	nop
 800b7b8:	0800ba25 	.word	0x0800ba25
 800b7bc:	0800ba47 	.word	0x0800ba47
 800b7c0:	0800ba7f 	.word	0x0800ba7f
 800b7c4:	0800baa3 	.word	0x0800baa3

0800b7c8 <stdio_exit_handler>:
 800b7c8:	4a02      	ldr	r2, [pc, #8]	; (800b7d4 <stdio_exit_handler+0xc>)
 800b7ca:	4903      	ldr	r1, [pc, #12]	; (800b7d8 <stdio_exit_handler+0x10>)
 800b7cc:	4803      	ldr	r0, [pc, #12]	; (800b7dc <stdio_exit_handler+0x14>)
 800b7ce:	f000 b869 	b.w	800b8a4 <_fwalk_sglue>
 800b7d2:	bf00      	nop
 800b7d4:	200000d4 	.word	0x200000d4
 800b7d8:	0800b731 	.word	0x0800b731
 800b7dc:	200000e0 	.word	0x200000e0

0800b7e0 <cleanup_stdio>:
 800b7e0:	6841      	ldr	r1, [r0, #4]
 800b7e2:	4b0c      	ldr	r3, [pc, #48]	; (800b814 <cleanup_stdio+0x34>)
 800b7e4:	4299      	cmp	r1, r3
 800b7e6:	b510      	push	{r4, lr}
 800b7e8:	4604      	mov	r4, r0
 800b7ea:	d001      	beq.n	800b7f0 <cleanup_stdio+0x10>
 800b7ec:	f7ff ffa0 	bl	800b730 <_fflush_r>
 800b7f0:	68a1      	ldr	r1, [r4, #8]
 800b7f2:	4b09      	ldr	r3, [pc, #36]	; (800b818 <cleanup_stdio+0x38>)
 800b7f4:	4299      	cmp	r1, r3
 800b7f6:	d002      	beq.n	800b7fe <cleanup_stdio+0x1e>
 800b7f8:	4620      	mov	r0, r4
 800b7fa:	f7ff ff99 	bl	800b730 <_fflush_r>
 800b7fe:	68e1      	ldr	r1, [r4, #12]
 800b800:	4b06      	ldr	r3, [pc, #24]	; (800b81c <cleanup_stdio+0x3c>)
 800b802:	4299      	cmp	r1, r3
 800b804:	d004      	beq.n	800b810 <cleanup_stdio+0x30>
 800b806:	4620      	mov	r0, r4
 800b808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b80c:	f7ff bf90 	b.w	800b730 <_fflush_r>
 800b810:	bd10      	pop	{r4, pc}
 800b812:	bf00      	nop
 800b814:	20001518 	.word	0x20001518
 800b818:	20001580 	.word	0x20001580
 800b81c:	200015e8 	.word	0x200015e8

0800b820 <global_stdio_init.part.0>:
 800b820:	b510      	push	{r4, lr}
 800b822:	4b0b      	ldr	r3, [pc, #44]	; (800b850 <global_stdio_init.part.0+0x30>)
 800b824:	4c0b      	ldr	r4, [pc, #44]	; (800b854 <global_stdio_init.part.0+0x34>)
 800b826:	4a0c      	ldr	r2, [pc, #48]	; (800b858 <global_stdio_init.part.0+0x38>)
 800b828:	601a      	str	r2, [r3, #0]
 800b82a:	4620      	mov	r0, r4
 800b82c:	2200      	movs	r2, #0
 800b82e:	2104      	movs	r1, #4
 800b830:	f7ff ffa6 	bl	800b780 <std>
 800b834:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b838:	2201      	movs	r2, #1
 800b83a:	2109      	movs	r1, #9
 800b83c:	f7ff ffa0 	bl	800b780 <std>
 800b840:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b844:	2202      	movs	r2, #2
 800b846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b84a:	2112      	movs	r1, #18
 800b84c:	f7ff bf98 	b.w	800b780 <std>
 800b850:	20001650 	.word	0x20001650
 800b854:	20001518 	.word	0x20001518
 800b858:	0800b7c9 	.word	0x0800b7c9

0800b85c <__sfp_lock_acquire>:
 800b85c:	4801      	ldr	r0, [pc, #4]	; (800b864 <__sfp_lock_acquire+0x8>)
 800b85e:	f000 ba53 	b.w	800bd08 <__retarget_lock_acquire_recursive>
 800b862:	bf00      	nop
 800b864:	20001659 	.word	0x20001659

0800b868 <__sfp_lock_release>:
 800b868:	4801      	ldr	r0, [pc, #4]	; (800b870 <__sfp_lock_release+0x8>)
 800b86a:	f000 ba4e 	b.w	800bd0a <__retarget_lock_release_recursive>
 800b86e:	bf00      	nop
 800b870:	20001659 	.word	0x20001659

0800b874 <__sinit>:
 800b874:	b510      	push	{r4, lr}
 800b876:	4604      	mov	r4, r0
 800b878:	f7ff fff0 	bl	800b85c <__sfp_lock_acquire>
 800b87c:	6a23      	ldr	r3, [r4, #32]
 800b87e:	b11b      	cbz	r3, 800b888 <__sinit+0x14>
 800b880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b884:	f7ff bff0 	b.w	800b868 <__sfp_lock_release>
 800b888:	4b04      	ldr	r3, [pc, #16]	; (800b89c <__sinit+0x28>)
 800b88a:	6223      	str	r3, [r4, #32]
 800b88c:	4b04      	ldr	r3, [pc, #16]	; (800b8a0 <__sinit+0x2c>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d1f5      	bne.n	800b880 <__sinit+0xc>
 800b894:	f7ff ffc4 	bl	800b820 <global_stdio_init.part.0>
 800b898:	e7f2      	b.n	800b880 <__sinit+0xc>
 800b89a:	bf00      	nop
 800b89c:	0800b7e1 	.word	0x0800b7e1
 800b8a0:	20001650 	.word	0x20001650

0800b8a4 <_fwalk_sglue>:
 800b8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8a8:	4607      	mov	r7, r0
 800b8aa:	4688      	mov	r8, r1
 800b8ac:	4614      	mov	r4, r2
 800b8ae:	2600      	movs	r6, #0
 800b8b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b8b4:	f1b9 0901 	subs.w	r9, r9, #1
 800b8b8:	d505      	bpl.n	800b8c6 <_fwalk_sglue+0x22>
 800b8ba:	6824      	ldr	r4, [r4, #0]
 800b8bc:	2c00      	cmp	r4, #0
 800b8be:	d1f7      	bne.n	800b8b0 <_fwalk_sglue+0xc>
 800b8c0:	4630      	mov	r0, r6
 800b8c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8c6:	89ab      	ldrh	r3, [r5, #12]
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d907      	bls.n	800b8dc <_fwalk_sglue+0x38>
 800b8cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	d003      	beq.n	800b8dc <_fwalk_sglue+0x38>
 800b8d4:	4629      	mov	r1, r5
 800b8d6:	4638      	mov	r0, r7
 800b8d8:	47c0      	blx	r8
 800b8da:	4306      	orrs	r6, r0
 800b8dc:	3568      	adds	r5, #104	; 0x68
 800b8de:	e7e9      	b.n	800b8b4 <_fwalk_sglue+0x10>

0800b8e0 <iprintf>:
 800b8e0:	b40f      	push	{r0, r1, r2, r3}
 800b8e2:	b507      	push	{r0, r1, r2, lr}
 800b8e4:	4906      	ldr	r1, [pc, #24]	; (800b900 <iprintf+0x20>)
 800b8e6:	ab04      	add	r3, sp, #16
 800b8e8:	6808      	ldr	r0, [r1, #0]
 800b8ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8ee:	6881      	ldr	r1, [r0, #8]
 800b8f0:	9301      	str	r3, [sp, #4]
 800b8f2:	f000 fbe7 	bl	800c0c4 <_vfiprintf_r>
 800b8f6:	b003      	add	sp, #12
 800b8f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8fc:	b004      	add	sp, #16
 800b8fe:	4770      	bx	lr
 800b900:	2000012c 	.word	0x2000012c

0800b904 <_puts_r>:
 800b904:	6a03      	ldr	r3, [r0, #32]
 800b906:	b570      	push	{r4, r5, r6, lr}
 800b908:	6884      	ldr	r4, [r0, #8]
 800b90a:	4605      	mov	r5, r0
 800b90c:	460e      	mov	r6, r1
 800b90e:	b90b      	cbnz	r3, 800b914 <_puts_r+0x10>
 800b910:	f7ff ffb0 	bl	800b874 <__sinit>
 800b914:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b916:	07db      	lsls	r3, r3, #31
 800b918:	d405      	bmi.n	800b926 <_puts_r+0x22>
 800b91a:	89a3      	ldrh	r3, [r4, #12]
 800b91c:	0598      	lsls	r0, r3, #22
 800b91e:	d402      	bmi.n	800b926 <_puts_r+0x22>
 800b920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b922:	f000 f9f1 	bl	800bd08 <__retarget_lock_acquire_recursive>
 800b926:	89a3      	ldrh	r3, [r4, #12]
 800b928:	0719      	lsls	r1, r3, #28
 800b92a:	d513      	bpl.n	800b954 <_puts_r+0x50>
 800b92c:	6923      	ldr	r3, [r4, #16]
 800b92e:	b18b      	cbz	r3, 800b954 <_puts_r+0x50>
 800b930:	3e01      	subs	r6, #1
 800b932:	68a3      	ldr	r3, [r4, #8]
 800b934:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b938:	3b01      	subs	r3, #1
 800b93a:	60a3      	str	r3, [r4, #8]
 800b93c:	b9e9      	cbnz	r1, 800b97a <_puts_r+0x76>
 800b93e:	2b00      	cmp	r3, #0
 800b940:	da2e      	bge.n	800b9a0 <_puts_r+0x9c>
 800b942:	4622      	mov	r2, r4
 800b944:	210a      	movs	r1, #10
 800b946:	4628      	mov	r0, r5
 800b948:	f000 f8af 	bl	800baaa <__swbuf_r>
 800b94c:	3001      	adds	r0, #1
 800b94e:	d007      	beq.n	800b960 <_puts_r+0x5c>
 800b950:	250a      	movs	r5, #10
 800b952:	e007      	b.n	800b964 <_puts_r+0x60>
 800b954:	4621      	mov	r1, r4
 800b956:	4628      	mov	r0, r5
 800b958:	f000 f8e4 	bl	800bb24 <__swsetup_r>
 800b95c:	2800      	cmp	r0, #0
 800b95e:	d0e7      	beq.n	800b930 <_puts_r+0x2c>
 800b960:	f04f 35ff 	mov.w	r5, #4294967295
 800b964:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b966:	07da      	lsls	r2, r3, #31
 800b968:	d405      	bmi.n	800b976 <_puts_r+0x72>
 800b96a:	89a3      	ldrh	r3, [r4, #12]
 800b96c:	059b      	lsls	r3, r3, #22
 800b96e:	d402      	bmi.n	800b976 <_puts_r+0x72>
 800b970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b972:	f000 f9ca 	bl	800bd0a <__retarget_lock_release_recursive>
 800b976:	4628      	mov	r0, r5
 800b978:	bd70      	pop	{r4, r5, r6, pc}
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	da04      	bge.n	800b988 <_puts_r+0x84>
 800b97e:	69a2      	ldr	r2, [r4, #24]
 800b980:	429a      	cmp	r2, r3
 800b982:	dc06      	bgt.n	800b992 <_puts_r+0x8e>
 800b984:	290a      	cmp	r1, #10
 800b986:	d004      	beq.n	800b992 <_puts_r+0x8e>
 800b988:	6823      	ldr	r3, [r4, #0]
 800b98a:	1c5a      	adds	r2, r3, #1
 800b98c:	6022      	str	r2, [r4, #0]
 800b98e:	7019      	strb	r1, [r3, #0]
 800b990:	e7cf      	b.n	800b932 <_puts_r+0x2e>
 800b992:	4622      	mov	r2, r4
 800b994:	4628      	mov	r0, r5
 800b996:	f000 f888 	bl	800baaa <__swbuf_r>
 800b99a:	3001      	adds	r0, #1
 800b99c:	d1c9      	bne.n	800b932 <_puts_r+0x2e>
 800b99e:	e7df      	b.n	800b960 <_puts_r+0x5c>
 800b9a0:	6823      	ldr	r3, [r4, #0]
 800b9a2:	250a      	movs	r5, #10
 800b9a4:	1c5a      	adds	r2, r3, #1
 800b9a6:	6022      	str	r2, [r4, #0]
 800b9a8:	701d      	strb	r5, [r3, #0]
 800b9aa:	e7db      	b.n	800b964 <_puts_r+0x60>

0800b9ac <puts>:
 800b9ac:	4b02      	ldr	r3, [pc, #8]	; (800b9b8 <puts+0xc>)
 800b9ae:	4601      	mov	r1, r0
 800b9b0:	6818      	ldr	r0, [r3, #0]
 800b9b2:	f7ff bfa7 	b.w	800b904 <_puts_r>
 800b9b6:	bf00      	nop
 800b9b8:	2000012c 	.word	0x2000012c

0800b9bc <sniprintf>:
 800b9bc:	b40c      	push	{r2, r3}
 800b9be:	b530      	push	{r4, r5, lr}
 800b9c0:	4b17      	ldr	r3, [pc, #92]	; (800ba20 <sniprintf+0x64>)
 800b9c2:	1e0c      	subs	r4, r1, #0
 800b9c4:	681d      	ldr	r5, [r3, #0]
 800b9c6:	b09d      	sub	sp, #116	; 0x74
 800b9c8:	da08      	bge.n	800b9dc <sniprintf+0x20>
 800b9ca:	238b      	movs	r3, #139	; 0x8b
 800b9cc:	602b      	str	r3, [r5, #0]
 800b9ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b9d2:	b01d      	add	sp, #116	; 0x74
 800b9d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9d8:	b002      	add	sp, #8
 800b9da:	4770      	bx	lr
 800b9dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b9e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b9e4:	bf14      	ite	ne
 800b9e6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b9ea:	4623      	moveq	r3, r4
 800b9ec:	9304      	str	r3, [sp, #16]
 800b9ee:	9307      	str	r3, [sp, #28]
 800b9f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b9f4:	9002      	str	r0, [sp, #8]
 800b9f6:	9006      	str	r0, [sp, #24]
 800b9f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b9fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b9fe:	ab21      	add	r3, sp, #132	; 0x84
 800ba00:	a902      	add	r1, sp, #8
 800ba02:	4628      	mov	r0, r5
 800ba04:	9301      	str	r3, [sp, #4]
 800ba06:	f000 fa35 	bl	800be74 <_svfiprintf_r>
 800ba0a:	1c43      	adds	r3, r0, #1
 800ba0c:	bfbc      	itt	lt
 800ba0e:	238b      	movlt	r3, #139	; 0x8b
 800ba10:	602b      	strlt	r3, [r5, #0]
 800ba12:	2c00      	cmp	r4, #0
 800ba14:	d0dd      	beq.n	800b9d2 <sniprintf+0x16>
 800ba16:	9b02      	ldr	r3, [sp, #8]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	701a      	strb	r2, [r3, #0]
 800ba1c:	e7d9      	b.n	800b9d2 <sniprintf+0x16>
 800ba1e:	bf00      	nop
 800ba20:	2000012c 	.word	0x2000012c

0800ba24 <__sread>:
 800ba24:	b510      	push	{r4, lr}
 800ba26:	460c      	mov	r4, r1
 800ba28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba2c:	f000 f90e 	bl	800bc4c <_read_r>
 800ba30:	2800      	cmp	r0, #0
 800ba32:	bfab      	itete	ge
 800ba34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba36:	89a3      	ldrhlt	r3, [r4, #12]
 800ba38:	181b      	addge	r3, r3, r0
 800ba3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba3e:	bfac      	ite	ge
 800ba40:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba42:	81a3      	strhlt	r3, [r4, #12]
 800ba44:	bd10      	pop	{r4, pc}

0800ba46 <__swrite>:
 800ba46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba4a:	461f      	mov	r7, r3
 800ba4c:	898b      	ldrh	r3, [r1, #12]
 800ba4e:	05db      	lsls	r3, r3, #23
 800ba50:	4605      	mov	r5, r0
 800ba52:	460c      	mov	r4, r1
 800ba54:	4616      	mov	r6, r2
 800ba56:	d505      	bpl.n	800ba64 <__swrite+0x1e>
 800ba58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba5c:	2302      	movs	r3, #2
 800ba5e:	2200      	movs	r2, #0
 800ba60:	f000 f8e2 	bl	800bc28 <_lseek_r>
 800ba64:	89a3      	ldrh	r3, [r4, #12]
 800ba66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba6e:	81a3      	strh	r3, [r4, #12]
 800ba70:	4632      	mov	r2, r6
 800ba72:	463b      	mov	r3, r7
 800ba74:	4628      	mov	r0, r5
 800ba76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba7a:	f000 b909 	b.w	800bc90 <_write_r>

0800ba7e <__sseek>:
 800ba7e:	b510      	push	{r4, lr}
 800ba80:	460c      	mov	r4, r1
 800ba82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba86:	f000 f8cf 	bl	800bc28 <_lseek_r>
 800ba8a:	1c43      	adds	r3, r0, #1
 800ba8c:	89a3      	ldrh	r3, [r4, #12]
 800ba8e:	bf15      	itete	ne
 800ba90:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba9a:	81a3      	strheq	r3, [r4, #12]
 800ba9c:	bf18      	it	ne
 800ba9e:	81a3      	strhne	r3, [r4, #12]
 800baa0:	bd10      	pop	{r4, pc}

0800baa2 <__sclose>:
 800baa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baa6:	f000 b8af 	b.w	800bc08 <_close_r>

0800baaa <__swbuf_r>:
 800baaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baac:	460e      	mov	r6, r1
 800baae:	4614      	mov	r4, r2
 800bab0:	4605      	mov	r5, r0
 800bab2:	b118      	cbz	r0, 800babc <__swbuf_r+0x12>
 800bab4:	6a03      	ldr	r3, [r0, #32]
 800bab6:	b90b      	cbnz	r3, 800babc <__swbuf_r+0x12>
 800bab8:	f7ff fedc 	bl	800b874 <__sinit>
 800babc:	69a3      	ldr	r3, [r4, #24]
 800babe:	60a3      	str	r3, [r4, #8]
 800bac0:	89a3      	ldrh	r3, [r4, #12]
 800bac2:	071a      	lsls	r2, r3, #28
 800bac4:	d525      	bpl.n	800bb12 <__swbuf_r+0x68>
 800bac6:	6923      	ldr	r3, [r4, #16]
 800bac8:	b31b      	cbz	r3, 800bb12 <__swbuf_r+0x68>
 800baca:	6823      	ldr	r3, [r4, #0]
 800bacc:	6922      	ldr	r2, [r4, #16]
 800bace:	1a98      	subs	r0, r3, r2
 800bad0:	6963      	ldr	r3, [r4, #20]
 800bad2:	b2f6      	uxtb	r6, r6
 800bad4:	4283      	cmp	r3, r0
 800bad6:	4637      	mov	r7, r6
 800bad8:	dc04      	bgt.n	800bae4 <__swbuf_r+0x3a>
 800bada:	4621      	mov	r1, r4
 800badc:	4628      	mov	r0, r5
 800bade:	f7ff fe27 	bl	800b730 <_fflush_r>
 800bae2:	b9e0      	cbnz	r0, 800bb1e <__swbuf_r+0x74>
 800bae4:	68a3      	ldr	r3, [r4, #8]
 800bae6:	3b01      	subs	r3, #1
 800bae8:	60a3      	str	r3, [r4, #8]
 800baea:	6823      	ldr	r3, [r4, #0]
 800baec:	1c5a      	adds	r2, r3, #1
 800baee:	6022      	str	r2, [r4, #0]
 800baf0:	701e      	strb	r6, [r3, #0]
 800baf2:	6962      	ldr	r2, [r4, #20]
 800baf4:	1c43      	adds	r3, r0, #1
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d004      	beq.n	800bb04 <__swbuf_r+0x5a>
 800bafa:	89a3      	ldrh	r3, [r4, #12]
 800bafc:	07db      	lsls	r3, r3, #31
 800bafe:	d506      	bpl.n	800bb0e <__swbuf_r+0x64>
 800bb00:	2e0a      	cmp	r6, #10
 800bb02:	d104      	bne.n	800bb0e <__swbuf_r+0x64>
 800bb04:	4621      	mov	r1, r4
 800bb06:	4628      	mov	r0, r5
 800bb08:	f7ff fe12 	bl	800b730 <_fflush_r>
 800bb0c:	b938      	cbnz	r0, 800bb1e <__swbuf_r+0x74>
 800bb0e:	4638      	mov	r0, r7
 800bb10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb12:	4621      	mov	r1, r4
 800bb14:	4628      	mov	r0, r5
 800bb16:	f000 f805 	bl	800bb24 <__swsetup_r>
 800bb1a:	2800      	cmp	r0, #0
 800bb1c:	d0d5      	beq.n	800baca <__swbuf_r+0x20>
 800bb1e:	f04f 37ff 	mov.w	r7, #4294967295
 800bb22:	e7f4      	b.n	800bb0e <__swbuf_r+0x64>

0800bb24 <__swsetup_r>:
 800bb24:	b538      	push	{r3, r4, r5, lr}
 800bb26:	4b2a      	ldr	r3, [pc, #168]	; (800bbd0 <__swsetup_r+0xac>)
 800bb28:	4605      	mov	r5, r0
 800bb2a:	6818      	ldr	r0, [r3, #0]
 800bb2c:	460c      	mov	r4, r1
 800bb2e:	b118      	cbz	r0, 800bb38 <__swsetup_r+0x14>
 800bb30:	6a03      	ldr	r3, [r0, #32]
 800bb32:	b90b      	cbnz	r3, 800bb38 <__swsetup_r+0x14>
 800bb34:	f7ff fe9e 	bl	800b874 <__sinit>
 800bb38:	89a3      	ldrh	r3, [r4, #12]
 800bb3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb3e:	0718      	lsls	r0, r3, #28
 800bb40:	d422      	bmi.n	800bb88 <__swsetup_r+0x64>
 800bb42:	06d9      	lsls	r1, r3, #27
 800bb44:	d407      	bmi.n	800bb56 <__swsetup_r+0x32>
 800bb46:	2309      	movs	r3, #9
 800bb48:	602b      	str	r3, [r5, #0]
 800bb4a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb4e:	81a3      	strh	r3, [r4, #12]
 800bb50:	f04f 30ff 	mov.w	r0, #4294967295
 800bb54:	e034      	b.n	800bbc0 <__swsetup_r+0x9c>
 800bb56:	0758      	lsls	r0, r3, #29
 800bb58:	d512      	bpl.n	800bb80 <__swsetup_r+0x5c>
 800bb5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb5c:	b141      	cbz	r1, 800bb70 <__swsetup_r+0x4c>
 800bb5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb62:	4299      	cmp	r1, r3
 800bb64:	d002      	beq.n	800bb6c <__swsetup_r+0x48>
 800bb66:	4628      	mov	r0, r5
 800bb68:	f000 f8de 	bl	800bd28 <_free_r>
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	6363      	str	r3, [r4, #52]	; 0x34
 800bb70:	89a3      	ldrh	r3, [r4, #12]
 800bb72:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bb76:	81a3      	strh	r3, [r4, #12]
 800bb78:	2300      	movs	r3, #0
 800bb7a:	6063      	str	r3, [r4, #4]
 800bb7c:	6923      	ldr	r3, [r4, #16]
 800bb7e:	6023      	str	r3, [r4, #0]
 800bb80:	89a3      	ldrh	r3, [r4, #12]
 800bb82:	f043 0308 	orr.w	r3, r3, #8
 800bb86:	81a3      	strh	r3, [r4, #12]
 800bb88:	6923      	ldr	r3, [r4, #16]
 800bb8a:	b94b      	cbnz	r3, 800bba0 <__swsetup_r+0x7c>
 800bb8c:	89a3      	ldrh	r3, [r4, #12]
 800bb8e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bb92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb96:	d003      	beq.n	800bba0 <__swsetup_r+0x7c>
 800bb98:	4621      	mov	r1, r4
 800bb9a:	4628      	mov	r0, r5
 800bb9c:	f000 fd62 	bl	800c664 <__smakebuf_r>
 800bba0:	89a0      	ldrh	r0, [r4, #12]
 800bba2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bba6:	f010 0301 	ands.w	r3, r0, #1
 800bbaa:	d00a      	beq.n	800bbc2 <__swsetup_r+0x9e>
 800bbac:	2300      	movs	r3, #0
 800bbae:	60a3      	str	r3, [r4, #8]
 800bbb0:	6963      	ldr	r3, [r4, #20]
 800bbb2:	425b      	negs	r3, r3
 800bbb4:	61a3      	str	r3, [r4, #24]
 800bbb6:	6923      	ldr	r3, [r4, #16]
 800bbb8:	b943      	cbnz	r3, 800bbcc <__swsetup_r+0xa8>
 800bbba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bbbe:	d1c4      	bne.n	800bb4a <__swsetup_r+0x26>
 800bbc0:	bd38      	pop	{r3, r4, r5, pc}
 800bbc2:	0781      	lsls	r1, r0, #30
 800bbc4:	bf58      	it	pl
 800bbc6:	6963      	ldrpl	r3, [r4, #20]
 800bbc8:	60a3      	str	r3, [r4, #8]
 800bbca:	e7f4      	b.n	800bbb6 <__swsetup_r+0x92>
 800bbcc:	2000      	movs	r0, #0
 800bbce:	e7f7      	b.n	800bbc0 <__swsetup_r+0x9c>
 800bbd0:	2000012c 	.word	0x2000012c

0800bbd4 <memset>:
 800bbd4:	4402      	add	r2, r0
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d100      	bne.n	800bbde <memset+0xa>
 800bbdc:	4770      	bx	lr
 800bbde:	f803 1b01 	strb.w	r1, [r3], #1
 800bbe2:	e7f9      	b.n	800bbd8 <memset+0x4>

0800bbe4 <strncmp>:
 800bbe4:	b510      	push	{r4, lr}
 800bbe6:	b16a      	cbz	r2, 800bc04 <strncmp+0x20>
 800bbe8:	3901      	subs	r1, #1
 800bbea:	1884      	adds	r4, r0, r2
 800bbec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbf0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d103      	bne.n	800bc00 <strncmp+0x1c>
 800bbf8:	42a0      	cmp	r0, r4
 800bbfa:	d001      	beq.n	800bc00 <strncmp+0x1c>
 800bbfc:	2a00      	cmp	r2, #0
 800bbfe:	d1f5      	bne.n	800bbec <strncmp+0x8>
 800bc00:	1ad0      	subs	r0, r2, r3
 800bc02:	bd10      	pop	{r4, pc}
 800bc04:	4610      	mov	r0, r2
 800bc06:	e7fc      	b.n	800bc02 <strncmp+0x1e>

0800bc08 <_close_r>:
 800bc08:	b538      	push	{r3, r4, r5, lr}
 800bc0a:	4d06      	ldr	r5, [pc, #24]	; (800bc24 <_close_r+0x1c>)
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	4604      	mov	r4, r0
 800bc10:	4608      	mov	r0, r1
 800bc12:	602b      	str	r3, [r5, #0]
 800bc14:	f7f7 f957 	bl	8002ec6 <_close>
 800bc18:	1c43      	adds	r3, r0, #1
 800bc1a:	d102      	bne.n	800bc22 <_close_r+0x1a>
 800bc1c:	682b      	ldr	r3, [r5, #0]
 800bc1e:	b103      	cbz	r3, 800bc22 <_close_r+0x1a>
 800bc20:	6023      	str	r3, [r4, #0]
 800bc22:	bd38      	pop	{r3, r4, r5, pc}
 800bc24:	20001654 	.word	0x20001654

0800bc28 <_lseek_r>:
 800bc28:	b538      	push	{r3, r4, r5, lr}
 800bc2a:	4d07      	ldr	r5, [pc, #28]	; (800bc48 <_lseek_r+0x20>)
 800bc2c:	4604      	mov	r4, r0
 800bc2e:	4608      	mov	r0, r1
 800bc30:	4611      	mov	r1, r2
 800bc32:	2200      	movs	r2, #0
 800bc34:	602a      	str	r2, [r5, #0]
 800bc36:	461a      	mov	r2, r3
 800bc38:	f7f7 f96c 	bl	8002f14 <_lseek>
 800bc3c:	1c43      	adds	r3, r0, #1
 800bc3e:	d102      	bne.n	800bc46 <_lseek_r+0x1e>
 800bc40:	682b      	ldr	r3, [r5, #0]
 800bc42:	b103      	cbz	r3, 800bc46 <_lseek_r+0x1e>
 800bc44:	6023      	str	r3, [r4, #0]
 800bc46:	bd38      	pop	{r3, r4, r5, pc}
 800bc48:	20001654 	.word	0x20001654

0800bc4c <_read_r>:
 800bc4c:	b538      	push	{r3, r4, r5, lr}
 800bc4e:	4d07      	ldr	r5, [pc, #28]	; (800bc6c <_read_r+0x20>)
 800bc50:	4604      	mov	r4, r0
 800bc52:	4608      	mov	r0, r1
 800bc54:	4611      	mov	r1, r2
 800bc56:	2200      	movs	r2, #0
 800bc58:	602a      	str	r2, [r5, #0]
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	f7f7 f8fa 	bl	8002e54 <_read>
 800bc60:	1c43      	adds	r3, r0, #1
 800bc62:	d102      	bne.n	800bc6a <_read_r+0x1e>
 800bc64:	682b      	ldr	r3, [r5, #0]
 800bc66:	b103      	cbz	r3, 800bc6a <_read_r+0x1e>
 800bc68:	6023      	str	r3, [r4, #0]
 800bc6a:	bd38      	pop	{r3, r4, r5, pc}
 800bc6c:	20001654 	.word	0x20001654

0800bc70 <_sbrk_r>:
 800bc70:	b538      	push	{r3, r4, r5, lr}
 800bc72:	4d06      	ldr	r5, [pc, #24]	; (800bc8c <_sbrk_r+0x1c>)
 800bc74:	2300      	movs	r3, #0
 800bc76:	4604      	mov	r4, r0
 800bc78:	4608      	mov	r0, r1
 800bc7a:	602b      	str	r3, [r5, #0]
 800bc7c:	f7f7 f958 	bl	8002f30 <_sbrk>
 800bc80:	1c43      	adds	r3, r0, #1
 800bc82:	d102      	bne.n	800bc8a <_sbrk_r+0x1a>
 800bc84:	682b      	ldr	r3, [r5, #0]
 800bc86:	b103      	cbz	r3, 800bc8a <_sbrk_r+0x1a>
 800bc88:	6023      	str	r3, [r4, #0]
 800bc8a:	bd38      	pop	{r3, r4, r5, pc}
 800bc8c:	20001654 	.word	0x20001654

0800bc90 <_write_r>:
 800bc90:	b538      	push	{r3, r4, r5, lr}
 800bc92:	4d07      	ldr	r5, [pc, #28]	; (800bcb0 <_write_r+0x20>)
 800bc94:	4604      	mov	r4, r0
 800bc96:	4608      	mov	r0, r1
 800bc98:	4611      	mov	r1, r2
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	602a      	str	r2, [r5, #0]
 800bc9e:	461a      	mov	r2, r3
 800bca0:	f7f7 f8f5 	bl	8002e8e <_write>
 800bca4:	1c43      	adds	r3, r0, #1
 800bca6:	d102      	bne.n	800bcae <_write_r+0x1e>
 800bca8:	682b      	ldr	r3, [r5, #0]
 800bcaa:	b103      	cbz	r3, 800bcae <_write_r+0x1e>
 800bcac:	6023      	str	r3, [r4, #0]
 800bcae:	bd38      	pop	{r3, r4, r5, pc}
 800bcb0:	20001654 	.word	0x20001654

0800bcb4 <__errno>:
 800bcb4:	4b01      	ldr	r3, [pc, #4]	; (800bcbc <__errno+0x8>)
 800bcb6:	6818      	ldr	r0, [r3, #0]
 800bcb8:	4770      	bx	lr
 800bcba:	bf00      	nop
 800bcbc:	2000012c 	.word	0x2000012c

0800bcc0 <__libc_init_array>:
 800bcc0:	b570      	push	{r4, r5, r6, lr}
 800bcc2:	4d0d      	ldr	r5, [pc, #52]	; (800bcf8 <__libc_init_array+0x38>)
 800bcc4:	4c0d      	ldr	r4, [pc, #52]	; (800bcfc <__libc_init_array+0x3c>)
 800bcc6:	1b64      	subs	r4, r4, r5
 800bcc8:	10a4      	asrs	r4, r4, #2
 800bcca:	2600      	movs	r6, #0
 800bccc:	42a6      	cmp	r6, r4
 800bcce:	d109      	bne.n	800bce4 <__libc_init_array+0x24>
 800bcd0:	4d0b      	ldr	r5, [pc, #44]	; (800bd00 <__libc_init_array+0x40>)
 800bcd2:	4c0c      	ldr	r4, [pc, #48]	; (800bd04 <__libc_init_array+0x44>)
 800bcd4:	f000 fd76 	bl	800c7c4 <_init>
 800bcd8:	1b64      	subs	r4, r4, r5
 800bcda:	10a4      	asrs	r4, r4, #2
 800bcdc:	2600      	movs	r6, #0
 800bcde:	42a6      	cmp	r6, r4
 800bce0:	d105      	bne.n	800bcee <__libc_init_array+0x2e>
 800bce2:	bd70      	pop	{r4, r5, r6, pc}
 800bce4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bce8:	4798      	blx	r3
 800bcea:	3601      	adds	r6, #1
 800bcec:	e7ee      	b.n	800bccc <__libc_init_array+0xc>
 800bcee:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcf2:	4798      	blx	r3
 800bcf4:	3601      	adds	r6, #1
 800bcf6:	e7f2      	b.n	800bcde <__libc_init_array+0x1e>
 800bcf8:	0800cdb8 	.word	0x0800cdb8
 800bcfc:	0800cdb8 	.word	0x0800cdb8
 800bd00:	0800cdb8 	.word	0x0800cdb8
 800bd04:	0800cdbc 	.word	0x0800cdbc

0800bd08 <__retarget_lock_acquire_recursive>:
 800bd08:	4770      	bx	lr

0800bd0a <__retarget_lock_release_recursive>:
 800bd0a:	4770      	bx	lr

0800bd0c <memcpy>:
 800bd0c:	440a      	add	r2, r1
 800bd0e:	4291      	cmp	r1, r2
 800bd10:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd14:	d100      	bne.n	800bd18 <memcpy+0xc>
 800bd16:	4770      	bx	lr
 800bd18:	b510      	push	{r4, lr}
 800bd1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd22:	4291      	cmp	r1, r2
 800bd24:	d1f9      	bne.n	800bd1a <memcpy+0xe>
 800bd26:	bd10      	pop	{r4, pc}

0800bd28 <_free_r>:
 800bd28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd2a:	2900      	cmp	r1, #0
 800bd2c:	d044      	beq.n	800bdb8 <_free_r+0x90>
 800bd2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd32:	9001      	str	r0, [sp, #4]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	f1a1 0404 	sub.w	r4, r1, #4
 800bd3a:	bfb8      	it	lt
 800bd3c:	18e4      	addlt	r4, r4, r3
 800bd3e:	f7ff fc65 	bl	800b60c <__malloc_lock>
 800bd42:	4a1e      	ldr	r2, [pc, #120]	; (800bdbc <_free_r+0x94>)
 800bd44:	9801      	ldr	r0, [sp, #4]
 800bd46:	6813      	ldr	r3, [r2, #0]
 800bd48:	b933      	cbnz	r3, 800bd58 <_free_r+0x30>
 800bd4a:	6063      	str	r3, [r4, #4]
 800bd4c:	6014      	str	r4, [r2, #0]
 800bd4e:	b003      	add	sp, #12
 800bd50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd54:	f7ff bc60 	b.w	800b618 <__malloc_unlock>
 800bd58:	42a3      	cmp	r3, r4
 800bd5a:	d908      	bls.n	800bd6e <_free_r+0x46>
 800bd5c:	6825      	ldr	r5, [r4, #0]
 800bd5e:	1961      	adds	r1, r4, r5
 800bd60:	428b      	cmp	r3, r1
 800bd62:	bf01      	itttt	eq
 800bd64:	6819      	ldreq	r1, [r3, #0]
 800bd66:	685b      	ldreq	r3, [r3, #4]
 800bd68:	1949      	addeq	r1, r1, r5
 800bd6a:	6021      	streq	r1, [r4, #0]
 800bd6c:	e7ed      	b.n	800bd4a <_free_r+0x22>
 800bd6e:	461a      	mov	r2, r3
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	b10b      	cbz	r3, 800bd78 <_free_r+0x50>
 800bd74:	42a3      	cmp	r3, r4
 800bd76:	d9fa      	bls.n	800bd6e <_free_r+0x46>
 800bd78:	6811      	ldr	r1, [r2, #0]
 800bd7a:	1855      	adds	r5, r2, r1
 800bd7c:	42a5      	cmp	r5, r4
 800bd7e:	d10b      	bne.n	800bd98 <_free_r+0x70>
 800bd80:	6824      	ldr	r4, [r4, #0]
 800bd82:	4421      	add	r1, r4
 800bd84:	1854      	adds	r4, r2, r1
 800bd86:	42a3      	cmp	r3, r4
 800bd88:	6011      	str	r1, [r2, #0]
 800bd8a:	d1e0      	bne.n	800bd4e <_free_r+0x26>
 800bd8c:	681c      	ldr	r4, [r3, #0]
 800bd8e:	685b      	ldr	r3, [r3, #4]
 800bd90:	6053      	str	r3, [r2, #4]
 800bd92:	440c      	add	r4, r1
 800bd94:	6014      	str	r4, [r2, #0]
 800bd96:	e7da      	b.n	800bd4e <_free_r+0x26>
 800bd98:	d902      	bls.n	800bda0 <_free_r+0x78>
 800bd9a:	230c      	movs	r3, #12
 800bd9c:	6003      	str	r3, [r0, #0]
 800bd9e:	e7d6      	b.n	800bd4e <_free_r+0x26>
 800bda0:	6825      	ldr	r5, [r4, #0]
 800bda2:	1961      	adds	r1, r4, r5
 800bda4:	428b      	cmp	r3, r1
 800bda6:	bf04      	itt	eq
 800bda8:	6819      	ldreq	r1, [r3, #0]
 800bdaa:	685b      	ldreq	r3, [r3, #4]
 800bdac:	6063      	str	r3, [r4, #4]
 800bdae:	bf04      	itt	eq
 800bdb0:	1949      	addeq	r1, r1, r5
 800bdb2:	6021      	streq	r1, [r4, #0]
 800bdb4:	6054      	str	r4, [r2, #4]
 800bdb6:	e7ca      	b.n	800bd4e <_free_r+0x26>
 800bdb8:	b003      	add	sp, #12
 800bdba:	bd30      	pop	{r4, r5, pc}
 800bdbc:	20001510 	.word	0x20001510

0800bdc0 <__ssputs_r>:
 800bdc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdc4:	688e      	ldr	r6, [r1, #8]
 800bdc6:	461f      	mov	r7, r3
 800bdc8:	42be      	cmp	r6, r7
 800bdca:	680b      	ldr	r3, [r1, #0]
 800bdcc:	4682      	mov	sl, r0
 800bdce:	460c      	mov	r4, r1
 800bdd0:	4690      	mov	r8, r2
 800bdd2:	d82c      	bhi.n	800be2e <__ssputs_r+0x6e>
 800bdd4:	898a      	ldrh	r2, [r1, #12]
 800bdd6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bdda:	d026      	beq.n	800be2a <__ssputs_r+0x6a>
 800bddc:	6965      	ldr	r5, [r4, #20]
 800bdde:	6909      	ldr	r1, [r1, #16]
 800bde0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bde4:	eba3 0901 	sub.w	r9, r3, r1
 800bde8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bdec:	1c7b      	adds	r3, r7, #1
 800bdee:	444b      	add	r3, r9
 800bdf0:	106d      	asrs	r5, r5, #1
 800bdf2:	429d      	cmp	r5, r3
 800bdf4:	bf38      	it	cc
 800bdf6:	461d      	movcc	r5, r3
 800bdf8:	0553      	lsls	r3, r2, #21
 800bdfa:	d527      	bpl.n	800be4c <__ssputs_r+0x8c>
 800bdfc:	4629      	mov	r1, r5
 800bdfe:	f7ff fb85 	bl	800b50c <_malloc_r>
 800be02:	4606      	mov	r6, r0
 800be04:	b360      	cbz	r0, 800be60 <__ssputs_r+0xa0>
 800be06:	6921      	ldr	r1, [r4, #16]
 800be08:	464a      	mov	r2, r9
 800be0a:	f7ff ff7f 	bl	800bd0c <memcpy>
 800be0e:	89a3      	ldrh	r3, [r4, #12]
 800be10:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800be14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be18:	81a3      	strh	r3, [r4, #12]
 800be1a:	6126      	str	r6, [r4, #16]
 800be1c:	6165      	str	r5, [r4, #20]
 800be1e:	444e      	add	r6, r9
 800be20:	eba5 0509 	sub.w	r5, r5, r9
 800be24:	6026      	str	r6, [r4, #0]
 800be26:	60a5      	str	r5, [r4, #8]
 800be28:	463e      	mov	r6, r7
 800be2a:	42be      	cmp	r6, r7
 800be2c:	d900      	bls.n	800be30 <__ssputs_r+0x70>
 800be2e:	463e      	mov	r6, r7
 800be30:	6820      	ldr	r0, [r4, #0]
 800be32:	4632      	mov	r2, r6
 800be34:	4641      	mov	r1, r8
 800be36:	f000 fc51 	bl	800c6dc <memmove>
 800be3a:	68a3      	ldr	r3, [r4, #8]
 800be3c:	1b9b      	subs	r3, r3, r6
 800be3e:	60a3      	str	r3, [r4, #8]
 800be40:	6823      	ldr	r3, [r4, #0]
 800be42:	4433      	add	r3, r6
 800be44:	6023      	str	r3, [r4, #0]
 800be46:	2000      	movs	r0, #0
 800be48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be4c:	462a      	mov	r2, r5
 800be4e:	f000 fc81 	bl	800c754 <_realloc_r>
 800be52:	4606      	mov	r6, r0
 800be54:	2800      	cmp	r0, #0
 800be56:	d1e0      	bne.n	800be1a <__ssputs_r+0x5a>
 800be58:	6921      	ldr	r1, [r4, #16]
 800be5a:	4650      	mov	r0, sl
 800be5c:	f7ff ff64 	bl	800bd28 <_free_r>
 800be60:	230c      	movs	r3, #12
 800be62:	f8ca 3000 	str.w	r3, [sl]
 800be66:	89a3      	ldrh	r3, [r4, #12]
 800be68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be6c:	81a3      	strh	r3, [r4, #12]
 800be6e:	f04f 30ff 	mov.w	r0, #4294967295
 800be72:	e7e9      	b.n	800be48 <__ssputs_r+0x88>

0800be74 <_svfiprintf_r>:
 800be74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be78:	4698      	mov	r8, r3
 800be7a:	898b      	ldrh	r3, [r1, #12]
 800be7c:	061b      	lsls	r3, r3, #24
 800be7e:	b09d      	sub	sp, #116	; 0x74
 800be80:	4607      	mov	r7, r0
 800be82:	460d      	mov	r5, r1
 800be84:	4614      	mov	r4, r2
 800be86:	d50e      	bpl.n	800bea6 <_svfiprintf_r+0x32>
 800be88:	690b      	ldr	r3, [r1, #16]
 800be8a:	b963      	cbnz	r3, 800bea6 <_svfiprintf_r+0x32>
 800be8c:	2140      	movs	r1, #64	; 0x40
 800be8e:	f7ff fb3d 	bl	800b50c <_malloc_r>
 800be92:	6028      	str	r0, [r5, #0]
 800be94:	6128      	str	r0, [r5, #16]
 800be96:	b920      	cbnz	r0, 800bea2 <_svfiprintf_r+0x2e>
 800be98:	230c      	movs	r3, #12
 800be9a:	603b      	str	r3, [r7, #0]
 800be9c:	f04f 30ff 	mov.w	r0, #4294967295
 800bea0:	e0d0      	b.n	800c044 <_svfiprintf_r+0x1d0>
 800bea2:	2340      	movs	r3, #64	; 0x40
 800bea4:	616b      	str	r3, [r5, #20]
 800bea6:	2300      	movs	r3, #0
 800bea8:	9309      	str	r3, [sp, #36]	; 0x24
 800beaa:	2320      	movs	r3, #32
 800beac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800beb0:	f8cd 800c 	str.w	r8, [sp, #12]
 800beb4:	2330      	movs	r3, #48	; 0x30
 800beb6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c05c <_svfiprintf_r+0x1e8>
 800beba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bebe:	f04f 0901 	mov.w	r9, #1
 800bec2:	4623      	mov	r3, r4
 800bec4:	469a      	mov	sl, r3
 800bec6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800beca:	b10a      	cbz	r2, 800bed0 <_svfiprintf_r+0x5c>
 800becc:	2a25      	cmp	r2, #37	; 0x25
 800bece:	d1f9      	bne.n	800bec4 <_svfiprintf_r+0x50>
 800bed0:	ebba 0b04 	subs.w	fp, sl, r4
 800bed4:	d00b      	beq.n	800beee <_svfiprintf_r+0x7a>
 800bed6:	465b      	mov	r3, fp
 800bed8:	4622      	mov	r2, r4
 800beda:	4629      	mov	r1, r5
 800bedc:	4638      	mov	r0, r7
 800bede:	f7ff ff6f 	bl	800bdc0 <__ssputs_r>
 800bee2:	3001      	adds	r0, #1
 800bee4:	f000 80a9 	beq.w	800c03a <_svfiprintf_r+0x1c6>
 800bee8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800beea:	445a      	add	r2, fp
 800beec:	9209      	str	r2, [sp, #36]	; 0x24
 800beee:	f89a 3000 	ldrb.w	r3, [sl]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	f000 80a1 	beq.w	800c03a <_svfiprintf_r+0x1c6>
 800bef8:	2300      	movs	r3, #0
 800befa:	f04f 32ff 	mov.w	r2, #4294967295
 800befe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf02:	f10a 0a01 	add.w	sl, sl, #1
 800bf06:	9304      	str	r3, [sp, #16]
 800bf08:	9307      	str	r3, [sp, #28]
 800bf0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf0e:	931a      	str	r3, [sp, #104]	; 0x68
 800bf10:	4654      	mov	r4, sl
 800bf12:	2205      	movs	r2, #5
 800bf14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf18:	4850      	ldr	r0, [pc, #320]	; (800c05c <_svfiprintf_r+0x1e8>)
 800bf1a:	f7f4 f999 	bl	8000250 <memchr>
 800bf1e:	9a04      	ldr	r2, [sp, #16]
 800bf20:	b9d8      	cbnz	r0, 800bf5a <_svfiprintf_r+0xe6>
 800bf22:	06d0      	lsls	r0, r2, #27
 800bf24:	bf44      	itt	mi
 800bf26:	2320      	movmi	r3, #32
 800bf28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf2c:	0711      	lsls	r1, r2, #28
 800bf2e:	bf44      	itt	mi
 800bf30:	232b      	movmi	r3, #43	; 0x2b
 800bf32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf36:	f89a 3000 	ldrb.w	r3, [sl]
 800bf3a:	2b2a      	cmp	r3, #42	; 0x2a
 800bf3c:	d015      	beq.n	800bf6a <_svfiprintf_r+0xf6>
 800bf3e:	9a07      	ldr	r2, [sp, #28]
 800bf40:	4654      	mov	r4, sl
 800bf42:	2000      	movs	r0, #0
 800bf44:	f04f 0c0a 	mov.w	ip, #10
 800bf48:	4621      	mov	r1, r4
 800bf4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf4e:	3b30      	subs	r3, #48	; 0x30
 800bf50:	2b09      	cmp	r3, #9
 800bf52:	d94d      	bls.n	800bff0 <_svfiprintf_r+0x17c>
 800bf54:	b1b0      	cbz	r0, 800bf84 <_svfiprintf_r+0x110>
 800bf56:	9207      	str	r2, [sp, #28]
 800bf58:	e014      	b.n	800bf84 <_svfiprintf_r+0x110>
 800bf5a:	eba0 0308 	sub.w	r3, r0, r8
 800bf5e:	fa09 f303 	lsl.w	r3, r9, r3
 800bf62:	4313      	orrs	r3, r2
 800bf64:	9304      	str	r3, [sp, #16]
 800bf66:	46a2      	mov	sl, r4
 800bf68:	e7d2      	b.n	800bf10 <_svfiprintf_r+0x9c>
 800bf6a:	9b03      	ldr	r3, [sp, #12]
 800bf6c:	1d19      	adds	r1, r3, #4
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	9103      	str	r1, [sp, #12]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	bfbb      	ittet	lt
 800bf76:	425b      	neglt	r3, r3
 800bf78:	f042 0202 	orrlt.w	r2, r2, #2
 800bf7c:	9307      	strge	r3, [sp, #28]
 800bf7e:	9307      	strlt	r3, [sp, #28]
 800bf80:	bfb8      	it	lt
 800bf82:	9204      	strlt	r2, [sp, #16]
 800bf84:	7823      	ldrb	r3, [r4, #0]
 800bf86:	2b2e      	cmp	r3, #46	; 0x2e
 800bf88:	d10c      	bne.n	800bfa4 <_svfiprintf_r+0x130>
 800bf8a:	7863      	ldrb	r3, [r4, #1]
 800bf8c:	2b2a      	cmp	r3, #42	; 0x2a
 800bf8e:	d134      	bne.n	800bffa <_svfiprintf_r+0x186>
 800bf90:	9b03      	ldr	r3, [sp, #12]
 800bf92:	1d1a      	adds	r2, r3, #4
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	9203      	str	r2, [sp, #12]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	bfb8      	it	lt
 800bf9c:	f04f 33ff 	movlt.w	r3, #4294967295
 800bfa0:	3402      	adds	r4, #2
 800bfa2:	9305      	str	r3, [sp, #20]
 800bfa4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c06c <_svfiprintf_r+0x1f8>
 800bfa8:	7821      	ldrb	r1, [r4, #0]
 800bfaa:	2203      	movs	r2, #3
 800bfac:	4650      	mov	r0, sl
 800bfae:	f7f4 f94f 	bl	8000250 <memchr>
 800bfb2:	b138      	cbz	r0, 800bfc4 <_svfiprintf_r+0x150>
 800bfb4:	9b04      	ldr	r3, [sp, #16]
 800bfb6:	eba0 000a 	sub.w	r0, r0, sl
 800bfba:	2240      	movs	r2, #64	; 0x40
 800bfbc:	4082      	lsls	r2, r0
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	3401      	adds	r4, #1
 800bfc2:	9304      	str	r3, [sp, #16]
 800bfc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfc8:	4825      	ldr	r0, [pc, #148]	; (800c060 <_svfiprintf_r+0x1ec>)
 800bfca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bfce:	2206      	movs	r2, #6
 800bfd0:	f7f4 f93e 	bl	8000250 <memchr>
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	d038      	beq.n	800c04a <_svfiprintf_r+0x1d6>
 800bfd8:	4b22      	ldr	r3, [pc, #136]	; (800c064 <_svfiprintf_r+0x1f0>)
 800bfda:	bb1b      	cbnz	r3, 800c024 <_svfiprintf_r+0x1b0>
 800bfdc:	9b03      	ldr	r3, [sp, #12]
 800bfde:	3307      	adds	r3, #7
 800bfe0:	f023 0307 	bic.w	r3, r3, #7
 800bfe4:	3308      	adds	r3, #8
 800bfe6:	9303      	str	r3, [sp, #12]
 800bfe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfea:	4433      	add	r3, r6
 800bfec:	9309      	str	r3, [sp, #36]	; 0x24
 800bfee:	e768      	b.n	800bec2 <_svfiprintf_r+0x4e>
 800bff0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bff4:	460c      	mov	r4, r1
 800bff6:	2001      	movs	r0, #1
 800bff8:	e7a6      	b.n	800bf48 <_svfiprintf_r+0xd4>
 800bffa:	2300      	movs	r3, #0
 800bffc:	3401      	adds	r4, #1
 800bffe:	9305      	str	r3, [sp, #20]
 800c000:	4619      	mov	r1, r3
 800c002:	f04f 0c0a 	mov.w	ip, #10
 800c006:	4620      	mov	r0, r4
 800c008:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c00c:	3a30      	subs	r2, #48	; 0x30
 800c00e:	2a09      	cmp	r2, #9
 800c010:	d903      	bls.n	800c01a <_svfiprintf_r+0x1a6>
 800c012:	2b00      	cmp	r3, #0
 800c014:	d0c6      	beq.n	800bfa4 <_svfiprintf_r+0x130>
 800c016:	9105      	str	r1, [sp, #20]
 800c018:	e7c4      	b.n	800bfa4 <_svfiprintf_r+0x130>
 800c01a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c01e:	4604      	mov	r4, r0
 800c020:	2301      	movs	r3, #1
 800c022:	e7f0      	b.n	800c006 <_svfiprintf_r+0x192>
 800c024:	ab03      	add	r3, sp, #12
 800c026:	9300      	str	r3, [sp, #0]
 800c028:	462a      	mov	r2, r5
 800c02a:	4b0f      	ldr	r3, [pc, #60]	; (800c068 <_svfiprintf_r+0x1f4>)
 800c02c:	a904      	add	r1, sp, #16
 800c02e:	4638      	mov	r0, r7
 800c030:	f3af 8000 	nop.w
 800c034:	1c42      	adds	r2, r0, #1
 800c036:	4606      	mov	r6, r0
 800c038:	d1d6      	bne.n	800bfe8 <_svfiprintf_r+0x174>
 800c03a:	89ab      	ldrh	r3, [r5, #12]
 800c03c:	065b      	lsls	r3, r3, #25
 800c03e:	f53f af2d 	bmi.w	800be9c <_svfiprintf_r+0x28>
 800c042:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c044:	b01d      	add	sp, #116	; 0x74
 800c046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c04a:	ab03      	add	r3, sp, #12
 800c04c:	9300      	str	r3, [sp, #0]
 800c04e:	462a      	mov	r2, r5
 800c050:	4b05      	ldr	r3, [pc, #20]	; (800c068 <_svfiprintf_r+0x1f4>)
 800c052:	a904      	add	r1, sp, #16
 800c054:	4638      	mov	r0, r7
 800c056:	f000 f9bd 	bl	800c3d4 <_printf_i>
 800c05a:	e7eb      	b.n	800c034 <_svfiprintf_r+0x1c0>
 800c05c:	0800cd7c 	.word	0x0800cd7c
 800c060:	0800cd86 	.word	0x0800cd86
 800c064:	00000000 	.word	0x00000000
 800c068:	0800bdc1 	.word	0x0800bdc1
 800c06c:	0800cd82 	.word	0x0800cd82

0800c070 <__sfputc_r>:
 800c070:	6893      	ldr	r3, [r2, #8]
 800c072:	3b01      	subs	r3, #1
 800c074:	2b00      	cmp	r3, #0
 800c076:	b410      	push	{r4}
 800c078:	6093      	str	r3, [r2, #8]
 800c07a:	da08      	bge.n	800c08e <__sfputc_r+0x1e>
 800c07c:	6994      	ldr	r4, [r2, #24]
 800c07e:	42a3      	cmp	r3, r4
 800c080:	db01      	blt.n	800c086 <__sfputc_r+0x16>
 800c082:	290a      	cmp	r1, #10
 800c084:	d103      	bne.n	800c08e <__sfputc_r+0x1e>
 800c086:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c08a:	f7ff bd0e 	b.w	800baaa <__swbuf_r>
 800c08e:	6813      	ldr	r3, [r2, #0]
 800c090:	1c58      	adds	r0, r3, #1
 800c092:	6010      	str	r0, [r2, #0]
 800c094:	7019      	strb	r1, [r3, #0]
 800c096:	4608      	mov	r0, r1
 800c098:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c09c:	4770      	bx	lr

0800c09e <__sfputs_r>:
 800c09e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0a0:	4606      	mov	r6, r0
 800c0a2:	460f      	mov	r7, r1
 800c0a4:	4614      	mov	r4, r2
 800c0a6:	18d5      	adds	r5, r2, r3
 800c0a8:	42ac      	cmp	r4, r5
 800c0aa:	d101      	bne.n	800c0b0 <__sfputs_r+0x12>
 800c0ac:	2000      	movs	r0, #0
 800c0ae:	e007      	b.n	800c0c0 <__sfputs_r+0x22>
 800c0b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0b4:	463a      	mov	r2, r7
 800c0b6:	4630      	mov	r0, r6
 800c0b8:	f7ff ffda 	bl	800c070 <__sfputc_r>
 800c0bc:	1c43      	adds	r3, r0, #1
 800c0be:	d1f3      	bne.n	800c0a8 <__sfputs_r+0xa>
 800c0c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c0c4 <_vfiprintf_r>:
 800c0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0c8:	460d      	mov	r5, r1
 800c0ca:	b09d      	sub	sp, #116	; 0x74
 800c0cc:	4614      	mov	r4, r2
 800c0ce:	4698      	mov	r8, r3
 800c0d0:	4606      	mov	r6, r0
 800c0d2:	b118      	cbz	r0, 800c0dc <_vfiprintf_r+0x18>
 800c0d4:	6a03      	ldr	r3, [r0, #32]
 800c0d6:	b90b      	cbnz	r3, 800c0dc <_vfiprintf_r+0x18>
 800c0d8:	f7ff fbcc 	bl	800b874 <__sinit>
 800c0dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0de:	07d9      	lsls	r1, r3, #31
 800c0e0:	d405      	bmi.n	800c0ee <_vfiprintf_r+0x2a>
 800c0e2:	89ab      	ldrh	r3, [r5, #12]
 800c0e4:	059a      	lsls	r2, r3, #22
 800c0e6:	d402      	bmi.n	800c0ee <_vfiprintf_r+0x2a>
 800c0e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0ea:	f7ff fe0d 	bl	800bd08 <__retarget_lock_acquire_recursive>
 800c0ee:	89ab      	ldrh	r3, [r5, #12]
 800c0f0:	071b      	lsls	r3, r3, #28
 800c0f2:	d501      	bpl.n	800c0f8 <_vfiprintf_r+0x34>
 800c0f4:	692b      	ldr	r3, [r5, #16]
 800c0f6:	b99b      	cbnz	r3, 800c120 <_vfiprintf_r+0x5c>
 800c0f8:	4629      	mov	r1, r5
 800c0fa:	4630      	mov	r0, r6
 800c0fc:	f7ff fd12 	bl	800bb24 <__swsetup_r>
 800c100:	b170      	cbz	r0, 800c120 <_vfiprintf_r+0x5c>
 800c102:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c104:	07dc      	lsls	r4, r3, #31
 800c106:	d504      	bpl.n	800c112 <_vfiprintf_r+0x4e>
 800c108:	f04f 30ff 	mov.w	r0, #4294967295
 800c10c:	b01d      	add	sp, #116	; 0x74
 800c10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c112:	89ab      	ldrh	r3, [r5, #12]
 800c114:	0598      	lsls	r0, r3, #22
 800c116:	d4f7      	bmi.n	800c108 <_vfiprintf_r+0x44>
 800c118:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c11a:	f7ff fdf6 	bl	800bd0a <__retarget_lock_release_recursive>
 800c11e:	e7f3      	b.n	800c108 <_vfiprintf_r+0x44>
 800c120:	2300      	movs	r3, #0
 800c122:	9309      	str	r3, [sp, #36]	; 0x24
 800c124:	2320      	movs	r3, #32
 800c126:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c12a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c12e:	2330      	movs	r3, #48	; 0x30
 800c130:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c2e4 <_vfiprintf_r+0x220>
 800c134:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c138:	f04f 0901 	mov.w	r9, #1
 800c13c:	4623      	mov	r3, r4
 800c13e:	469a      	mov	sl, r3
 800c140:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c144:	b10a      	cbz	r2, 800c14a <_vfiprintf_r+0x86>
 800c146:	2a25      	cmp	r2, #37	; 0x25
 800c148:	d1f9      	bne.n	800c13e <_vfiprintf_r+0x7a>
 800c14a:	ebba 0b04 	subs.w	fp, sl, r4
 800c14e:	d00b      	beq.n	800c168 <_vfiprintf_r+0xa4>
 800c150:	465b      	mov	r3, fp
 800c152:	4622      	mov	r2, r4
 800c154:	4629      	mov	r1, r5
 800c156:	4630      	mov	r0, r6
 800c158:	f7ff ffa1 	bl	800c09e <__sfputs_r>
 800c15c:	3001      	adds	r0, #1
 800c15e:	f000 80a9 	beq.w	800c2b4 <_vfiprintf_r+0x1f0>
 800c162:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c164:	445a      	add	r2, fp
 800c166:	9209      	str	r2, [sp, #36]	; 0x24
 800c168:	f89a 3000 	ldrb.w	r3, [sl]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	f000 80a1 	beq.w	800c2b4 <_vfiprintf_r+0x1f0>
 800c172:	2300      	movs	r3, #0
 800c174:	f04f 32ff 	mov.w	r2, #4294967295
 800c178:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c17c:	f10a 0a01 	add.w	sl, sl, #1
 800c180:	9304      	str	r3, [sp, #16]
 800c182:	9307      	str	r3, [sp, #28]
 800c184:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c188:	931a      	str	r3, [sp, #104]	; 0x68
 800c18a:	4654      	mov	r4, sl
 800c18c:	2205      	movs	r2, #5
 800c18e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c192:	4854      	ldr	r0, [pc, #336]	; (800c2e4 <_vfiprintf_r+0x220>)
 800c194:	f7f4 f85c 	bl	8000250 <memchr>
 800c198:	9a04      	ldr	r2, [sp, #16]
 800c19a:	b9d8      	cbnz	r0, 800c1d4 <_vfiprintf_r+0x110>
 800c19c:	06d1      	lsls	r1, r2, #27
 800c19e:	bf44      	itt	mi
 800c1a0:	2320      	movmi	r3, #32
 800c1a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1a6:	0713      	lsls	r3, r2, #28
 800c1a8:	bf44      	itt	mi
 800c1aa:	232b      	movmi	r3, #43	; 0x2b
 800c1ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1b0:	f89a 3000 	ldrb.w	r3, [sl]
 800c1b4:	2b2a      	cmp	r3, #42	; 0x2a
 800c1b6:	d015      	beq.n	800c1e4 <_vfiprintf_r+0x120>
 800c1b8:	9a07      	ldr	r2, [sp, #28]
 800c1ba:	4654      	mov	r4, sl
 800c1bc:	2000      	movs	r0, #0
 800c1be:	f04f 0c0a 	mov.w	ip, #10
 800c1c2:	4621      	mov	r1, r4
 800c1c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1c8:	3b30      	subs	r3, #48	; 0x30
 800c1ca:	2b09      	cmp	r3, #9
 800c1cc:	d94d      	bls.n	800c26a <_vfiprintf_r+0x1a6>
 800c1ce:	b1b0      	cbz	r0, 800c1fe <_vfiprintf_r+0x13a>
 800c1d0:	9207      	str	r2, [sp, #28]
 800c1d2:	e014      	b.n	800c1fe <_vfiprintf_r+0x13a>
 800c1d4:	eba0 0308 	sub.w	r3, r0, r8
 800c1d8:	fa09 f303 	lsl.w	r3, r9, r3
 800c1dc:	4313      	orrs	r3, r2
 800c1de:	9304      	str	r3, [sp, #16]
 800c1e0:	46a2      	mov	sl, r4
 800c1e2:	e7d2      	b.n	800c18a <_vfiprintf_r+0xc6>
 800c1e4:	9b03      	ldr	r3, [sp, #12]
 800c1e6:	1d19      	adds	r1, r3, #4
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	9103      	str	r1, [sp, #12]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	bfbb      	ittet	lt
 800c1f0:	425b      	neglt	r3, r3
 800c1f2:	f042 0202 	orrlt.w	r2, r2, #2
 800c1f6:	9307      	strge	r3, [sp, #28]
 800c1f8:	9307      	strlt	r3, [sp, #28]
 800c1fa:	bfb8      	it	lt
 800c1fc:	9204      	strlt	r2, [sp, #16]
 800c1fe:	7823      	ldrb	r3, [r4, #0]
 800c200:	2b2e      	cmp	r3, #46	; 0x2e
 800c202:	d10c      	bne.n	800c21e <_vfiprintf_r+0x15a>
 800c204:	7863      	ldrb	r3, [r4, #1]
 800c206:	2b2a      	cmp	r3, #42	; 0x2a
 800c208:	d134      	bne.n	800c274 <_vfiprintf_r+0x1b0>
 800c20a:	9b03      	ldr	r3, [sp, #12]
 800c20c:	1d1a      	adds	r2, r3, #4
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	9203      	str	r2, [sp, #12]
 800c212:	2b00      	cmp	r3, #0
 800c214:	bfb8      	it	lt
 800c216:	f04f 33ff 	movlt.w	r3, #4294967295
 800c21a:	3402      	adds	r4, #2
 800c21c:	9305      	str	r3, [sp, #20]
 800c21e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c2f4 <_vfiprintf_r+0x230>
 800c222:	7821      	ldrb	r1, [r4, #0]
 800c224:	2203      	movs	r2, #3
 800c226:	4650      	mov	r0, sl
 800c228:	f7f4 f812 	bl	8000250 <memchr>
 800c22c:	b138      	cbz	r0, 800c23e <_vfiprintf_r+0x17a>
 800c22e:	9b04      	ldr	r3, [sp, #16]
 800c230:	eba0 000a 	sub.w	r0, r0, sl
 800c234:	2240      	movs	r2, #64	; 0x40
 800c236:	4082      	lsls	r2, r0
 800c238:	4313      	orrs	r3, r2
 800c23a:	3401      	adds	r4, #1
 800c23c:	9304      	str	r3, [sp, #16]
 800c23e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c242:	4829      	ldr	r0, [pc, #164]	; (800c2e8 <_vfiprintf_r+0x224>)
 800c244:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c248:	2206      	movs	r2, #6
 800c24a:	f7f4 f801 	bl	8000250 <memchr>
 800c24e:	2800      	cmp	r0, #0
 800c250:	d03f      	beq.n	800c2d2 <_vfiprintf_r+0x20e>
 800c252:	4b26      	ldr	r3, [pc, #152]	; (800c2ec <_vfiprintf_r+0x228>)
 800c254:	bb1b      	cbnz	r3, 800c29e <_vfiprintf_r+0x1da>
 800c256:	9b03      	ldr	r3, [sp, #12]
 800c258:	3307      	adds	r3, #7
 800c25a:	f023 0307 	bic.w	r3, r3, #7
 800c25e:	3308      	adds	r3, #8
 800c260:	9303      	str	r3, [sp, #12]
 800c262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c264:	443b      	add	r3, r7
 800c266:	9309      	str	r3, [sp, #36]	; 0x24
 800c268:	e768      	b.n	800c13c <_vfiprintf_r+0x78>
 800c26a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c26e:	460c      	mov	r4, r1
 800c270:	2001      	movs	r0, #1
 800c272:	e7a6      	b.n	800c1c2 <_vfiprintf_r+0xfe>
 800c274:	2300      	movs	r3, #0
 800c276:	3401      	adds	r4, #1
 800c278:	9305      	str	r3, [sp, #20]
 800c27a:	4619      	mov	r1, r3
 800c27c:	f04f 0c0a 	mov.w	ip, #10
 800c280:	4620      	mov	r0, r4
 800c282:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c286:	3a30      	subs	r2, #48	; 0x30
 800c288:	2a09      	cmp	r2, #9
 800c28a:	d903      	bls.n	800c294 <_vfiprintf_r+0x1d0>
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d0c6      	beq.n	800c21e <_vfiprintf_r+0x15a>
 800c290:	9105      	str	r1, [sp, #20]
 800c292:	e7c4      	b.n	800c21e <_vfiprintf_r+0x15a>
 800c294:	fb0c 2101 	mla	r1, ip, r1, r2
 800c298:	4604      	mov	r4, r0
 800c29a:	2301      	movs	r3, #1
 800c29c:	e7f0      	b.n	800c280 <_vfiprintf_r+0x1bc>
 800c29e:	ab03      	add	r3, sp, #12
 800c2a0:	9300      	str	r3, [sp, #0]
 800c2a2:	462a      	mov	r2, r5
 800c2a4:	4b12      	ldr	r3, [pc, #72]	; (800c2f0 <_vfiprintf_r+0x22c>)
 800c2a6:	a904      	add	r1, sp, #16
 800c2a8:	4630      	mov	r0, r6
 800c2aa:	f3af 8000 	nop.w
 800c2ae:	4607      	mov	r7, r0
 800c2b0:	1c78      	adds	r0, r7, #1
 800c2b2:	d1d6      	bne.n	800c262 <_vfiprintf_r+0x19e>
 800c2b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2b6:	07d9      	lsls	r1, r3, #31
 800c2b8:	d405      	bmi.n	800c2c6 <_vfiprintf_r+0x202>
 800c2ba:	89ab      	ldrh	r3, [r5, #12]
 800c2bc:	059a      	lsls	r2, r3, #22
 800c2be:	d402      	bmi.n	800c2c6 <_vfiprintf_r+0x202>
 800c2c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2c2:	f7ff fd22 	bl	800bd0a <__retarget_lock_release_recursive>
 800c2c6:	89ab      	ldrh	r3, [r5, #12]
 800c2c8:	065b      	lsls	r3, r3, #25
 800c2ca:	f53f af1d 	bmi.w	800c108 <_vfiprintf_r+0x44>
 800c2ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2d0:	e71c      	b.n	800c10c <_vfiprintf_r+0x48>
 800c2d2:	ab03      	add	r3, sp, #12
 800c2d4:	9300      	str	r3, [sp, #0]
 800c2d6:	462a      	mov	r2, r5
 800c2d8:	4b05      	ldr	r3, [pc, #20]	; (800c2f0 <_vfiprintf_r+0x22c>)
 800c2da:	a904      	add	r1, sp, #16
 800c2dc:	4630      	mov	r0, r6
 800c2de:	f000 f879 	bl	800c3d4 <_printf_i>
 800c2e2:	e7e4      	b.n	800c2ae <_vfiprintf_r+0x1ea>
 800c2e4:	0800cd7c 	.word	0x0800cd7c
 800c2e8:	0800cd86 	.word	0x0800cd86
 800c2ec:	00000000 	.word	0x00000000
 800c2f0:	0800c09f 	.word	0x0800c09f
 800c2f4:	0800cd82 	.word	0x0800cd82

0800c2f8 <_printf_common>:
 800c2f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2fc:	4616      	mov	r6, r2
 800c2fe:	4699      	mov	r9, r3
 800c300:	688a      	ldr	r2, [r1, #8]
 800c302:	690b      	ldr	r3, [r1, #16]
 800c304:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c308:	4293      	cmp	r3, r2
 800c30a:	bfb8      	it	lt
 800c30c:	4613      	movlt	r3, r2
 800c30e:	6033      	str	r3, [r6, #0]
 800c310:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c314:	4607      	mov	r7, r0
 800c316:	460c      	mov	r4, r1
 800c318:	b10a      	cbz	r2, 800c31e <_printf_common+0x26>
 800c31a:	3301      	adds	r3, #1
 800c31c:	6033      	str	r3, [r6, #0]
 800c31e:	6823      	ldr	r3, [r4, #0]
 800c320:	0699      	lsls	r1, r3, #26
 800c322:	bf42      	ittt	mi
 800c324:	6833      	ldrmi	r3, [r6, #0]
 800c326:	3302      	addmi	r3, #2
 800c328:	6033      	strmi	r3, [r6, #0]
 800c32a:	6825      	ldr	r5, [r4, #0]
 800c32c:	f015 0506 	ands.w	r5, r5, #6
 800c330:	d106      	bne.n	800c340 <_printf_common+0x48>
 800c332:	f104 0a19 	add.w	sl, r4, #25
 800c336:	68e3      	ldr	r3, [r4, #12]
 800c338:	6832      	ldr	r2, [r6, #0]
 800c33a:	1a9b      	subs	r3, r3, r2
 800c33c:	42ab      	cmp	r3, r5
 800c33e:	dc26      	bgt.n	800c38e <_printf_common+0x96>
 800c340:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c344:	1e13      	subs	r3, r2, #0
 800c346:	6822      	ldr	r2, [r4, #0]
 800c348:	bf18      	it	ne
 800c34a:	2301      	movne	r3, #1
 800c34c:	0692      	lsls	r2, r2, #26
 800c34e:	d42b      	bmi.n	800c3a8 <_printf_common+0xb0>
 800c350:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c354:	4649      	mov	r1, r9
 800c356:	4638      	mov	r0, r7
 800c358:	47c0      	blx	r8
 800c35a:	3001      	adds	r0, #1
 800c35c:	d01e      	beq.n	800c39c <_printf_common+0xa4>
 800c35e:	6823      	ldr	r3, [r4, #0]
 800c360:	6922      	ldr	r2, [r4, #16]
 800c362:	f003 0306 	and.w	r3, r3, #6
 800c366:	2b04      	cmp	r3, #4
 800c368:	bf02      	ittt	eq
 800c36a:	68e5      	ldreq	r5, [r4, #12]
 800c36c:	6833      	ldreq	r3, [r6, #0]
 800c36e:	1aed      	subeq	r5, r5, r3
 800c370:	68a3      	ldr	r3, [r4, #8]
 800c372:	bf0c      	ite	eq
 800c374:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c378:	2500      	movne	r5, #0
 800c37a:	4293      	cmp	r3, r2
 800c37c:	bfc4      	itt	gt
 800c37e:	1a9b      	subgt	r3, r3, r2
 800c380:	18ed      	addgt	r5, r5, r3
 800c382:	2600      	movs	r6, #0
 800c384:	341a      	adds	r4, #26
 800c386:	42b5      	cmp	r5, r6
 800c388:	d11a      	bne.n	800c3c0 <_printf_common+0xc8>
 800c38a:	2000      	movs	r0, #0
 800c38c:	e008      	b.n	800c3a0 <_printf_common+0xa8>
 800c38e:	2301      	movs	r3, #1
 800c390:	4652      	mov	r2, sl
 800c392:	4649      	mov	r1, r9
 800c394:	4638      	mov	r0, r7
 800c396:	47c0      	blx	r8
 800c398:	3001      	adds	r0, #1
 800c39a:	d103      	bne.n	800c3a4 <_printf_common+0xac>
 800c39c:	f04f 30ff 	mov.w	r0, #4294967295
 800c3a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3a4:	3501      	adds	r5, #1
 800c3a6:	e7c6      	b.n	800c336 <_printf_common+0x3e>
 800c3a8:	18e1      	adds	r1, r4, r3
 800c3aa:	1c5a      	adds	r2, r3, #1
 800c3ac:	2030      	movs	r0, #48	; 0x30
 800c3ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c3b2:	4422      	add	r2, r4
 800c3b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c3b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c3bc:	3302      	adds	r3, #2
 800c3be:	e7c7      	b.n	800c350 <_printf_common+0x58>
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	4622      	mov	r2, r4
 800c3c4:	4649      	mov	r1, r9
 800c3c6:	4638      	mov	r0, r7
 800c3c8:	47c0      	blx	r8
 800c3ca:	3001      	adds	r0, #1
 800c3cc:	d0e6      	beq.n	800c39c <_printf_common+0xa4>
 800c3ce:	3601      	adds	r6, #1
 800c3d0:	e7d9      	b.n	800c386 <_printf_common+0x8e>
	...

0800c3d4 <_printf_i>:
 800c3d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c3d8:	7e0f      	ldrb	r7, [r1, #24]
 800c3da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c3dc:	2f78      	cmp	r7, #120	; 0x78
 800c3de:	4691      	mov	r9, r2
 800c3e0:	4680      	mov	r8, r0
 800c3e2:	460c      	mov	r4, r1
 800c3e4:	469a      	mov	sl, r3
 800c3e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c3ea:	d807      	bhi.n	800c3fc <_printf_i+0x28>
 800c3ec:	2f62      	cmp	r7, #98	; 0x62
 800c3ee:	d80a      	bhi.n	800c406 <_printf_i+0x32>
 800c3f0:	2f00      	cmp	r7, #0
 800c3f2:	f000 80d4 	beq.w	800c59e <_printf_i+0x1ca>
 800c3f6:	2f58      	cmp	r7, #88	; 0x58
 800c3f8:	f000 80c0 	beq.w	800c57c <_printf_i+0x1a8>
 800c3fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c400:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c404:	e03a      	b.n	800c47c <_printf_i+0xa8>
 800c406:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c40a:	2b15      	cmp	r3, #21
 800c40c:	d8f6      	bhi.n	800c3fc <_printf_i+0x28>
 800c40e:	a101      	add	r1, pc, #4	; (adr r1, 800c414 <_printf_i+0x40>)
 800c410:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c414:	0800c46d 	.word	0x0800c46d
 800c418:	0800c481 	.word	0x0800c481
 800c41c:	0800c3fd 	.word	0x0800c3fd
 800c420:	0800c3fd 	.word	0x0800c3fd
 800c424:	0800c3fd 	.word	0x0800c3fd
 800c428:	0800c3fd 	.word	0x0800c3fd
 800c42c:	0800c481 	.word	0x0800c481
 800c430:	0800c3fd 	.word	0x0800c3fd
 800c434:	0800c3fd 	.word	0x0800c3fd
 800c438:	0800c3fd 	.word	0x0800c3fd
 800c43c:	0800c3fd 	.word	0x0800c3fd
 800c440:	0800c585 	.word	0x0800c585
 800c444:	0800c4ad 	.word	0x0800c4ad
 800c448:	0800c53f 	.word	0x0800c53f
 800c44c:	0800c3fd 	.word	0x0800c3fd
 800c450:	0800c3fd 	.word	0x0800c3fd
 800c454:	0800c5a7 	.word	0x0800c5a7
 800c458:	0800c3fd 	.word	0x0800c3fd
 800c45c:	0800c4ad 	.word	0x0800c4ad
 800c460:	0800c3fd 	.word	0x0800c3fd
 800c464:	0800c3fd 	.word	0x0800c3fd
 800c468:	0800c547 	.word	0x0800c547
 800c46c:	682b      	ldr	r3, [r5, #0]
 800c46e:	1d1a      	adds	r2, r3, #4
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	602a      	str	r2, [r5, #0]
 800c474:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c478:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c47c:	2301      	movs	r3, #1
 800c47e:	e09f      	b.n	800c5c0 <_printf_i+0x1ec>
 800c480:	6820      	ldr	r0, [r4, #0]
 800c482:	682b      	ldr	r3, [r5, #0]
 800c484:	0607      	lsls	r7, r0, #24
 800c486:	f103 0104 	add.w	r1, r3, #4
 800c48a:	6029      	str	r1, [r5, #0]
 800c48c:	d501      	bpl.n	800c492 <_printf_i+0xbe>
 800c48e:	681e      	ldr	r6, [r3, #0]
 800c490:	e003      	b.n	800c49a <_printf_i+0xc6>
 800c492:	0646      	lsls	r6, r0, #25
 800c494:	d5fb      	bpl.n	800c48e <_printf_i+0xba>
 800c496:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c49a:	2e00      	cmp	r6, #0
 800c49c:	da03      	bge.n	800c4a6 <_printf_i+0xd2>
 800c49e:	232d      	movs	r3, #45	; 0x2d
 800c4a0:	4276      	negs	r6, r6
 800c4a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4a6:	485a      	ldr	r0, [pc, #360]	; (800c610 <_printf_i+0x23c>)
 800c4a8:	230a      	movs	r3, #10
 800c4aa:	e012      	b.n	800c4d2 <_printf_i+0xfe>
 800c4ac:	682b      	ldr	r3, [r5, #0]
 800c4ae:	6820      	ldr	r0, [r4, #0]
 800c4b0:	1d19      	adds	r1, r3, #4
 800c4b2:	6029      	str	r1, [r5, #0]
 800c4b4:	0605      	lsls	r5, r0, #24
 800c4b6:	d501      	bpl.n	800c4bc <_printf_i+0xe8>
 800c4b8:	681e      	ldr	r6, [r3, #0]
 800c4ba:	e002      	b.n	800c4c2 <_printf_i+0xee>
 800c4bc:	0641      	lsls	r1, r0, #25
 800c4be:	d5fb      	bpl.n	800c4b8 <_printf_i+0xe4>
 800c4c0:	881e      	ldrh	r6, [r3, #0]
 800c4c2:	4853      	ldr	r0, [pc, #332]	; (800c610 <_printf_i+0x23c>)
 800c4c4:	2f6f      	cmp	r7, #111	; 0x6f
 800c4c6:	bf0c      	ite	eq
 800c4c8:	2308      	moveq	r3, #8
 800c4ca:	230a      	movne	r3, #10
 800c4cc:	2100      	movs	r1, #0
 800c4ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c4d2:	6865      	ldr	r5, [r4, #4]
 800c4d4:	60a5      	str	r5, [r4, #8]
 800c4d6:	2d00      	cmp	r5, #0
 800c4d8:	bfa2      	ittt	ge
 800c4da:	6821      	ldrge	r1, [r4, #0]
 800c4dc:	f021 0104 	bicge.w	r1, r1, #4
 800c4e0:	6021      	strge	r1, [r4, #0]
 800c4e2:	b90e      	cbnz	r6, 800c4e8 <_printf_i+0x114>
 800c4e4:	2d00      	cmp	r5, #0
 800c4e6:	d04b      	beq.n	800c580 <_printf_i+0x1ac>
 800c4e8:	4615      	mov	r5, r2
 800c4ea:	fbb6 f1f3 	udiv	r1, r6, r3
 800c4ee:	fb03 6711 	mls	r7, r3, r1, r6
 800c4f2:	5dc7      	ldrb	r7, [r0, r7]
 800c4f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c4f8:	4637      	mov	r7, r6
 800c4fa:	42bb      	cmp	r3, r7
 800c4fc:	460e      	mov	r6, r1
 800c4fe:	d9f4      	bls.n	800c4ea <_printf_i+0x116>
 800c500:	2b08      	cmp	r3, #8
 800c502:	d10b      	bne.n	800c51c <_printf_i+0x148>
 800c504:	6823      	ldr	r3, [r4, #0]
 800c506:	07de      	lsls	r6, r3, #31
 800c508:	d508      	bpl.n	800c51c <_printf_i+0x148>
 800c50a:	6923      	ldr	r3, [r4, #16]
 800c50c:	6861      	ldr	r1, [r4, #4]
 800c50e:	4299      	cmp	r1, r3
 800c510:	bfde      	ittt	le
 800c512:	2330      	movle	r3, #48	; 0x30
 800c514:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c518:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c51c:	1b52      	subs	r2, r2, r5
 800c51e:	6122      	str	r2, [r4, #16]
 800c520:	f8cd a000 	str.w	sl, [sp]
 800c524:	464b      	mov	r3, r9
 800c526:	aa03      	add	r2, sp, #12
 800c528:	4621      	mov	r1, r4
 800c52a:	4640      	mov	r0, r8
 800c52c:	f7ff fee4 	bl	800c2f8 <_printf_common>
 800c530:	3001      	adds	r0, #1
 800c532:	d14a      	bne.n	800c5ca <_printf_i+0x1f6>
 800c534:	f04f 30ff 	mov.w	r0, #4294967295
 800c538:	b004      	add	sp, #16
 800c53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c53e:	6823      	ldr	r3, [r4, #0]
 800c540:	f043 0320 	orr.w	r3, r3, #32
 800c544:	6023      	str	r3, [r4, #0]
 800c546:	4833      	ldr	r0, [pc, #204]	; (800c614 <_printf_i+0x240>)
 800c548:	2778      	movs	r7, #120	; 0x78
 800c54a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c54e:	6823      	ldr	r3, [r4, #0]
 800c550:	6829      	ldr	r1, [r5, #0]
 800c552:	061f      	lsls	r7, r3, #24
 800c554:	f851 6b04 	ldr.w	r6, [r1], #4
 800c558:	d402      	bmi.n	800c560 <_printf_i+0x18c>
 800c55a:	065f      	lsls	r7, r3, #25
 800c55c:	bf48      	it	mi
 800c55e:	b2b6      	uxthmi	r6, r6
 800c560:	07df      	lsls	r7, r3, #31
 800c562:	bf48      	it	mi
 800c564:	f043 0320 	orrmi.w	r3, r3, #32
 800c568:	6029      	str	r1, [r5, #0]
 800c56a:	bf48      	it	mi
 800c56c:	6023      	strmi	r3, [r4, #0]
 800c56e:	b91e      	cbnz	r6, 800c578 <_printf_i+0x1a4>
 800c570:	6823      	ldr	r3, [r4, #0]
 800c572:	f023 0320 	bic.w	r3, r3, #32
 800c576:	6023      	str	r3, [r4, #0]
 800c578:	2310      	movs	r3, #16
 800c57a:	e7a7      	b.n	800c4cc <_printf_i+0xf8>
 800c57c:	4824      	ldr	r0, [pc, #144]	; (800c610 <_printf_i+0x23c>)
 800c57e:	e7e4      	b.n	800c54a <_printf_i+0x176>
 800c580:	4615      	mov	r5, r2
 800c582:	e7bd      	b.n	800c500 <_printf_i+0x12c>
 800c584:	682b      	ldr	r3, [r5, #0]
 800c586:	6826      	ldr	r6, [r4, #0]
 800c588:	6961      	ldr	r1, [r4, #20]
 800c58a:	1d18      	adds	r0, r3, #4
 800c58c:	6028      	str	r0, [r5, #0]
 800c58e:	0635      	lsls	r5, r6, #24
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	d501      	bpl.n	800c598 <_printf_i+0x1c4>
 800c594:	6019      	str	r1, [r3, #0]
 800c596:	e002      	b.n	800c59e <_printf_i+0x1ca>
 800c598:	0670      	lsls	r0, r6, #25
 800c59a:	d5fb      	bpl.n	800c594 <_printf_i+0x1c0>
 800c59c:	8019      	strh	r1, [r3, #0]
 800c59e:	2300      	movs	r3, #0
 800c5a0:	6123      	str	r3, [r4, #16]
 800c5a2:	4615      	mov	r5, r2
 800c5a4:	e7bc      	b.n	800c520 <_printf_i+0x14c>
 800c5a6:	682b      	ldr	r3, [r5, #0]
 800c5a8:	1d1a      	adds	r2, r3, #4
 800c5aa:	602a      	str	r2, [r5, #0]
 800c5ac:	681d      	ldr	r5, [r3, #0]
 800c5ae:	6862      	ldr	r2, [r4, #4]
 800c5b0:	2100      	movs	r1, #0
 800c5b2:	4628      	mov	r0, r5
 800c5b4:	f7f3 fe4c 	bl	8000250 <memchr>
 800c5b8:	b108      	cbz	r0, 800c5be <_printf_i+0x1ea>
 800c5ba:	1b40      	subs	r0, r0, r5
 800c5bc:	6060      	str	r0, [r4, #4]
 800c5be:	6863      	ldr	r3, [r4, #4]
 800c5c0:	6123      	str	r3, [r4, #16]
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5c8:	e7aa      	b.n	800c520 <_printf_i+0x14c>
 800c5ca:	6923      	ldr	r3, [r4, #16]
 800c5cc:	462a      	mov	r2, r5
 800c5ce:	4649      	mov	r1, r9
 800c5d0:	4640      	mov	r0, r8
 800c5d2:	47d0      	blx	sl
 800c5d4:	3001      	adds	r0, #1
 800c5d6:	d0ad      	beq.n	800c534 <_printf_i+0x160>
 800c5d8:	6823      	ldr	r3, [r4, #0]
 800c5da:	079b      	lsls	r3, r3, #30
 800c5dc:	d413      	bmi.n	800c606 <_printf_i+0x232>
 800c5de:	68e0      	ldr	r0, [r4, #12]
 800c5e0:	9b03      	ldr	r3, [sp, #12]
 800c5e2:	4298      	cmp	r0, r3
 800c5e4:	bfb8      	it	lt
 800c5e6:	4618      	movlt	r0, r3
 800c5e8:	e7a6      	b.n	800c538 <_printf_i+0x164>
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	4632      	mov	r2, r6
 800c5ee:	4649      	mov	r1, r9
 800c5f0:	4640      	mov	r0, r8
 800c5f2:	47d0      	blx	sl
 800c5f4:	3001      	adds	r0, #1
 800c5f6:	d09d      	beq.n	800c534 <_printf_i+0x160>
 800c5f8:	3501      	adds	r5, #1
 800c5fa:	68e3      	ldr	r3, [r4, #12]
 800c5fc:	9903      	ldr	r1, [sp, #12]
 800c5fe:	1a5b      	subs	r3, r3, r1
 800c600:	42ab      	cmp	r3, r5
 800c602:	dcf2      	bgt.n	800c5ea <_printf_i+0x216>
 800c604:	e7eb      	b.n	800c5de <_printf_i+0x20a>
 800c606:	2500      	movs	r5, #0
 800c608:	f104 0619 	add.w	r6, r4, #25
 800c60c:	e7f5      	b.n	800c5fa <_printf_i+0x226>
 800c60e:	bf00      	nop
 800c610:	0800cd8d 	.word	0x0800cd8d
 800c614:	0800cd9e 	.word	0x0800cd9e

0800c618 <__swhatbuf_r>:
 800c618:	b570      	push	{r4, r5, r6, lr}
 800c61a:	460c      	mov	r4, r1
 800c61c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c620:	2900      	cmp	r1, #0
 800c622:	b096      	sub	sp, #88	; 0x58
 800c624:	4615      	mov	r5, r2
 800c626:	461e      	mov	r6, r3
 800c628:	da0d      	bge.n	800c646 <__swhatbuf_r+0x2e>
 800c62a:	89a3      	ldrh	r3, [r4, #12]
 800c62c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c630:	f04f 0100 	mov.w	r1, #0
 800c634:	bf0c      	ite	eq
 800c636:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c63a:	2340      	movne	r3, #64	; 0x40
 800c63c:	2000      	movs	r0, #0
 800c63e:	6031      	str	r1, [r6, #0]
 800c640:	602b      	str	r3, [r5, #0]
 800c642:	b016      	add	sp, #88	; 0x58
 800c644:	bd70      	pop	{r4, r5, r6, pc}
 800c646:	466a      	mov	r2, sp
 800c648:	f000 f862 	bl	800c710 <_fstat_r>
 800c64c:	2800      	cmp	r0, #0
 800c64e:	dbec      	blt.n	800c62a <__swhatbuf_r+0x12>
 800c650:	9901      	ldr	r1, [sp, #4]
 800c652:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c656:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c65a:	4259      	negs	r1, r3
 800c65c:	4159      	adcs	r1, r3
 800c65e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c662:	e7eb      	b.n	800c63c <__swhatbuf_r+0x24>

0800c664 <__smakebuf_r>:
 800c664:	898b      	ldrh	r3, [r1, #12]
 800c666:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c668:	079d      	lsls	r5, r3, #30
 800c66a:	4606      	mov	r6, r0
 800c66c:	460c      	mov	r4, r1
 800c66e:	d507      	bpl.n	800c680 <__smakebuf_r+0x1c>
 800c670:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c674:	6023      	str	r3, [r4, #0]
 800c676:	6123      	str	r3, [r4, #16]
 800c678:	2301      	movs	r3, #1
 800c67a:	6163      	str	r3, [r4, #20]
 800c67c:	b002      	add	sp, #8
 800c67e:	bd70      	pop	{r4, r5, r6, pc}
 800c680:	ab01      	add	r3, sp, #4
 800c682:	466a      	mov	r2, sp
 800c684:	f7ff ffc8 	bl	800c618 <__swhatbuf_r>
 800c688:	9900      	ldr	r1, [sp, #0]
 800c68a:	4605      	mov	r5, r0
 800c68c:	4630      	mov	r0, r6
 800c68e:	f7fe ff3d 	bl	800b50c <_malloc_r>
 800c692:	b948      	cbnz	r0, 800c6a8 <__smakebuf_r+0x44>
 800c694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c698:	059a      	lsls	r2, r3, #22
 800c69a:	d4ef      	bmi.n	800c67c <__smakebuf_r+0x18>
 800c69c:	f023 0303 	bic.w	r3, r3, #3
 800c6a0:	f043 0302 	orr.w	r3, r3, #2
 800c6a4:	81a3      	strh	r3, [r4, #12]
 800c6a6:	e7e3      	b.n	800c670 <__smakebuf_r+0xc>
 800c6a8:	89a3      	ldrh	r3, [r4, #12]
 800c6aa:	6020      	str	r0, [r4, #0]
 800c6ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6b0:	81a3      	strh	r3, [r4, #12]
 800c6b2:	9b00      	ldr	r3, [sp, #0]
 800c6b4:	6163      	str	r3, [r4, #20]
 800c6b6:	9b01      	ldr	r3, [sp, #4]
 800c6b8:	6120      	str	r0, [r4, #16]
 800c6ba:	b15b      	cbz	r3, 800c6d4 <__smakebuf_r+0x70>
 800c6bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6c0:	4630      	mov	r0, r6
 800c6c2:	f000 f837 	bl	800c734 <_isatty_r>
 800c6c6:	b128      	cbz	r0, 800c6d4 <__smakebuf_r+0x70>
 800c6c8:	89a3      	ldrh	r3, [r4, #12]
 800c6ca:	f023 0303 	bic.w	r3, r3, #3
 800c6ce:	f043 0301 	orr.w	r3, r3, #1
 800c6d2:	81a3      	strh	r3, [r4, #12]
 800c6d4:	89a3      	ldrh	r3, [r4, #12]
 800c6d6:	431d      	orrs	r5, r3
 800c6d8:	81a5      	strh	r5, [r4, #12]
 800c6da:	e7cf      	b.n	800c67c <__smakebuf_r+0x18>

0800c6dc <memmove>:
 800c6dc:	4288      	cmp	r0, r1
 800c6de:	b510      	push	{r4, lr}
 800c6e0:	eb01 0402 	add.w	r4, r1, r2
 800c6e4:	d902      	bls.n	800c6ec <memmove+0x10>
 800c6e6:	4284      	cmp	r4, r0
 800c6e8:	4623      	mov	r3, r4
 800c6ea:	d807      	bhi.n	800c6fc <memmove+0x20>
 800c6ec:	1e43      	subs	r3, r0, #1
 800c6ee:	42a1      	cmp	r1, r4
 800c6f0:	d008      	beq.n	800c704 <memmove+0x28>
 800c6f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6fa:	e7f8      	b.n	800c6ee <memmove+0x12>
 800c6fc:	4402      	add	r2, r0
 800c6fe:	4601      	mov	r1, r0
 800c700:	428a      	cmp	r2, r1
 800c702:	d100      	bne.n	800c706 <memmove+0x2a>
 800c704:	bd10      	pop	{r4, pc}
 800c706:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c70a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c70e:	e7f7      	b.n	800c700 <memmove+0x24>

0800c710 <_fstat_r>:
 800c710:	b538      	push	{r3, r4, r5, lr}
 800c712:	4d07      	ldr	r5, [pc, #28]	; (800c730 <_fstat_r+0x20>)
 800c714:	2300      	movs	r3, #0
 800c716:	4604      	mov	r4, r0
 800c718:	4608      	mov	r0, r1
 800c71a:	4611      	mov	r1, r2
 800c71c:	602b      	str	r3, [r5, #0]
 800c71e:	f7f6 fbde 	bl	8002ede <_fstat>
 800c722:	1c43      	adds	r3, r0, #1
 800c724:	d102      	bne.n	800c72c <_fstat_r+0x1c>
 800c726:	682b      	ldr	r3, [r5, #0]
 800c728:	b103      	cbz	r3, 800c72c <_fstat_r+0x1c>
 800c72a:	6023      	str	r3, [r4, #0]
 800c72c:	bd38      	pop	{r3, r4, r5, pc}
 800c72e:	bf00      	nop
 800c730:	20001654 	.word	0x20001654

0800c734 <_isatty_r>:
 800c734:	b538      	push	{r3, r4, r5, lr}
 800c736:	4d06      	ldr	r5, [pc, #24]	; (800c750 <_isatty_r+0x1c>)
 800c738:	2300      	movs	r3, #0
 800c73a:	4604      	mov	r4, r0
 800c73c:	4608      	mov	r0, r1
 800c73e:	602b      	str	r3, [r5, #0]
 800c740:	f7f6 fbdd 	bl	8002efe <_isatty>
 800c744:	1c43      	adds	r3, r0, #1
 800c746:	d102      	bne.n	800c74e <_isatty_r+0x1a>
 800c748:	682b      	ldr	r3, [r5, #0]
 800c74a:	b103      	cbz	r3, 800c74e <_isatty_r+0x1a>
 800c74c:	6023      	str	r3, [r4, #0]
 800c74e:	bd38      	pop	{r3, r4, r5, pc}
 800c750:	20001654 	.word	0x20001654

0800c754 <_realloc_r>:
 800c754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c758:	4680      	mov	r8, r0
 800c75a:	4614      	mov	r4, r2
 800c75c:	460e      	mov	r6, r1
 800c75e:	b921      	cbnz	r1, 800c76a <_realloc_r+0x16>
 800c760:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c764:	4611      	mov	r1, r2
 800c766:	f7fe bed1 	b.w	800b50c <_malloc_r>
 800c76a:	b92a      	cbnz	r2, 800c778 <_realloc_r+0x24>
 800c76c:	f7ff fadc 	bl	800bd28 <_free_r>
 800c770:	4625      	mov	r5, r4
 800c772:	4628      	mov	r0, r5
 800c774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c778:	f000 f81b 	bl	800c7b2 <_malloc_usable_size_r>
 800c77c:	4284      	cmp	r4, r0
 800c77e:	4607      	mov	r7, r0
 800c780:	d802      	bhi.n	800c788 <_realloc_r+0x34>
 800c782:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c786:	d812      	bhi.n	800c7ae <_realloc_r+0x5a>
 800c788:	4621      	mov	r1, r4
 800c78a:	4640      	mov	r0, r8
 800c78c:	f7fe febe 	bl	800b50c <_malloc_r>
 800c790:	4605      	mov	r5, r0
 800c792:	2800      	cmp	r0, #0
 800c794:	d0ed      	beq.n	800c772 <_realloc_r+0x1e>
 800c796:	42bc      	cmp	r4, r7
 800c798:	4622      	mov	r2, r4
 800c79a:	4631      	mov	r1, r6
 800c79c:	bf28      	it	cs
 800c79e:	463a      	movcs	r2, r7
 800c7a0:	f7ff fab4 	bl	800bd0c <memcpy>
 800c7a4:	4631      	mov	r1, r6
 800c7a6:	4640      	mov	r0, r8
 800c7a8:	f7ff fabe 	bl	800bd28 <_free_r>
 800c7ac:	e7e1      	b.n	800c772 <_realloc_r+0x1e>
 800c7ae:	4635      	mov	r5, r6
 800c7b0:	e7df      	b.n	800c772 <_realloc_r+0x1e>

0800c7b2 <_malloc_usable_size_r>:
 800c7b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7b6:	1f18      	subs	r0, r3, #4
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	bfbc      	itt	lt
 800c7bc:	580b      	ldrlt	r3, [r1, r0]
 800c7be:	18c0      	addlt	r0, r0, r3
 800c7c0:	4770      	bx	lr
	...

0800c7c4 <_init>:
 800c7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7c6:	bf00      	nop
 800c7c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7ca:	bc08      	pop	{r3}
 800c7cc:	469e      	mov	lr, r3
 800c7ce:	4770      	bx	lr

0800c7d0 <_fini>:
 800c7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7d2:	bf00      	nop
 800c7d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7d6:	bc08      	pop	{r3}
 800c7d8:	469e      	mov	lr, r3
 800c7da:	4770      	bx	lr
